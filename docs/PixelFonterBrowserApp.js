// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["fonthx"] = $hx_exports["fonthx"] || {};
$hx_exports["fonthx"]["examples"] = $hx_exports["fonthx"]["examples"] || {};
$hx_exports["fonthx"]["examples"]["pixelfonter"] = $hx_exports["fonthx"]["examples"]["pixelfonter"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var fonthx_Assets = function() { };
fonthx_Assets.__name__ = ["fonthx","Assets"];
fonthx_Assets.getText = function(id) {
	return haxe_Resource.getString(id);
};
var fonthx_examples_pixelfonter_GlyphIdentifier = function(codepoint) {
	if(codepoint == null) {
		codepoint = -1;
	}
	this.codepoint = -1;
	this.name = null;
	this.codepoint = codepoint;
};
fonthx_examples_pixelfonter_GlyphIdentifier.__name__ = ["fonthx","examples","pixelfonter","GlyphIdentifier"];
fonthx_examples_pixelfonter_GlyphIdentifier.prototype = {
	name: null
	,codepoint: null
	,__class__: fonthx_examples_pixelfonter_GlyphIdentifier
};
var fonthx_model_font_IFont = function() { };
fonthx_model_font_IFont.__name__ = ["fonthx","model","font","IFont"];
fonthx_model_font_IFont.prototype = {
	get_typoLineGap: null
	,get_realDescender: null
	,get_realAscender: null
	,get_idealDescender: null
	,get_idealAscender: null
	,get_sampleText: null
	,get_URL: null
	,get_vendorURL: null
	,get_vendorID: null
	,get_manufacturerURL: null
	,get_trademark: null
	,get_postscriptName: null
	,get_uniqueFamilyName: null
	,get_licenseURL: null
	,get_license: null
	,get_copyright: null
	,get_styleModifiers: null
	,get_fullName: null
	,get_description: null
	,get_emSquare: null
	,get_gsubLayout: null
	,get_gposLayout: null
	,get_version: null
	,get_creationDate: null
	,get_style: null
	,get_author: null
	,get_name: null
	,get_glyphs: null
	,glyphs: null
	,name: null
	,author: null
	,style: null
	,creationDate: null
	,version: null
	,gposLayout: null
	,gsubLayout: null
	,emSquare: null
	,description: null
	,fullName: null
	,styleModifiers: null
	,copyright: null
	,license: null
	,licenseURL: null
	,uniqueFamilyName: null
	,postscriptName: null
	,trademark: null
	,manufacturerURL: null
	,vendorID: null
	,vendorURL: null
	,URL: null
	,sampleText: null
	,idealAscender: null
	,idealDescender: null
	,realAscender: null
	,realDescender: null
	,typoLineGap: null
	,getGlyphForCodepoint: null
	,getGlyphIndexForCodepoint: null
	,getGlyphIndexForName: null
	,getKerningPairs: null
	,getLineGap: null
	,getNumberOfHMetrics: null
	,hasKerning: null
	,isFixedPitch: null
	,getItalicAngle: null
	,getUnderlinePosition: null
	,getUnderlineThickness: null
	,__class__: fonthx_model_font_IFont
	,__properties__: {get_typoLineGap:"get_typoLineGap",get_realDescender:"get_realDescender",get_realAscender:"get_realAscender",get_idealDescender:"get_idealDescender",get_idealAscender:"get_idealAscender",get_sampleText:"get_sampleText",get_URL:"get_URL",get_vendorURL:"get_vendorURL",get_vendorID:"get_vendorID",get_manufacturerURL:"get_manufacturerURL",get_trademark:"get_trademark",get_postscriptName:"get_postscriptName",get_uniqueFamilyName:"get_uniqueFamilyName",get_licenseURL:"get_licenseURL",get_license:"get_license",get_copyright:"get_copyright",get_styleModifiers:"get_styleModifiers",get_fullName:"get_fullName",get_description:"get_description",get_emSquare:"get_emSquare",get_gsubLayout:"get_gsubLayout",get_gposLayout:"get_gposLayout",get_version:"get_version",get_creationDate:"get_creationDate",get_style:"get_style",get_author:"get_author",get_name:"get_name",get_glyphs:"get_glyphs"}
};
var fonthx_model_font_AbstractFont = function() {
	this.glyphs = [];
	this.set_name("Unnamed");
	this.version = "1.0";
	this.set_style("Regular");
	this.copyright = "";
	this.description = "";
	this.set_emSquare(1000);
	this.gposLayout = new fonthx_model_font_features_Layout();
	this.gsubLayout = new fonthx_model_font_features_Layout();
};
fonthx_model_font_AbstractFont.__name__ = ["fonthx","model","font","AbstractFont"];
fonthx_model_font_AbstractFont.__interfaces__ = [fonthx_model_font_IFont];
fonthx_model_font_AbstractFont.prototype = {
	glyphs: null
	,name: null
	,emSquare: null
	,style: null
	,sampleText: null
	,idealAscender: null
	,idealDescender: null
	,realAscender: null
	,realDescender: null
	,typoLineGap: null
	,gposLayout: null
	,gsubLayout: null
	,copyright: null
	,creationDate: null
	,author: null
	,description: null
	,uniqueFamilyName: null
	,fullName: null
	,version: null
	,postscriptName: null
	,trademark: null
	,manufacturerURL: null
	,vendorID: null
	,vendorURL: null
	,URL: null
	,license: null
	,licenseURL: null
	,styleModifiers: null
	,getGlyphForCodepoint: function(cp) {
		return Lambda.find(this.get_glyphs(),function(g) {
			return g.get_codepoint() == cp;
		});
	}
	,getGlyphIndexForCodepoint: function(cp) {
		var _g1 = 0;
		var _g = this.get_glyphs().length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.get_glyphs()[i].get_codepoint() == cp) {
				return i;
			}
		}
		return -1;
	}
	,getGlyphIndexForName: function(name) {
		var _g1 = 0;
		var _g = this.get_glyphs().length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.get_glyphs()[i].get_name() == name) {
				return i;
			}
		}
		return -1;
	}
	,get_name: function() {
		return this.name;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,get_style: function() {
		return this.style;
	}
	,set_style: function(value) {
		return this.style = value;
	}
	,get_copyright: function() {
		return this.copyright;
	}
	,set_copyright: function(value) {
		return this.copyright = value;
	}
	,get_creationDate: function() {
		return this.creationDate;
	}
	,set_creationDate: function(value) {
		return this.creationDate = value;
	}
	,get_author: function() {
		return this.author;
	}
	,set_author: function(value) {
		return this.author = value;
	}
	,get_description: function() {
		return this.description;
	}
	,set_description: function(value) {
		return this.description = value;
	}
	,get_uniqueFamilyName: function() {
		return this.uniqueFamilyName;
	}
	,set_uniqueFamilyName: function(value) {
		return this.uniqueFamilyName = value;
	}
	,get_fullName: function() {
		return this.fullName;
	}
	,set_fullName: function(value) {
		return this.fullName = value;
	}
	,get_version: function() {
		return "1.0";
	}
	,set_version: function(value) {
		return this.version = value;
	}
	,get_postscriptName: function() {
		return this.postscriptName;
	}
	,set_postscriptName: function(value) {
		return this.postscriptName = value;
	}
	,get_trademark: function() {
		return this.trademark;
	}
	,set_trademark: function(value) {
		return this.trademark = value;
	}
	,get_manufacturerURL: function() {
		return this.manufacturerURL;
	}
	,set_manufacturerURL: function(value) {
		return this.manufacturerURL = value;
	}
	,get_vendorID: function() {
		return "-";
	}
	,get_vendorURL: function() {
		return this.vendorURL;
	}
	,set_vendorURL: function(value) {
		return this.vendorURL = value;
	}
	,get_URL: function() {
		return this.URL;
	}
	,set_URL: function(value) {
		return this.URL = value;
	}
	,get_license: function() {
		return this.license;
	}
	,set_license: function(value) {
		return this.license = value;
	}
	,get_licenseURL: function() {
		return this.licenseURL;
	}
	,set_licenseURL: function(value) {
		return this.licenseURL = value;
	}
	,get_styleModifiers: function() {
		return this.styleModifiers;
	}
	,set_styleModifiers: function(value) {
		return this.styleModifiers = value;
	}
	,get_sampleText: function() {
		return this.sampleText;
	}
	,set_sampleText: function(value) {
		return this.sampleText = value;
	}
	,get_emSquare: function() {
		return this.emSquare;
	}
	,set_emSquare: function(value) {
		return this.emSquare = value;
	}
	,get_idealAscender: function() {
		return this.idealAscender;
	}
	,set_idealAscender: function(value) {
		return this.idealAscender = value;
	}
	,get_idealDescender: function() {
		return this.idealDescender;
	}
	,set_idealDescender: function(value) {
		return this.idealDescender = value;
	}
	,get_realAscender: function() {
		return this.realAscender;
	}
	,set_realAscender: function(value) {
		return this.realAscender = value;
	}
	,get_realDescender: function() {
		return this.realDescender;
	}
	,set_realDescender: function(value) {
		return this.realDescender = value;
	}
	,get_typoLineGap: function() {
		return this.typoLineGap;
	}
	,set_typoLineGap: function(value) {
		return this.typoLineGap = value;
	}
	,get_gsubLayout: function() {
		return this.gsubLayout;
	}
	,get_gposLayout: function() {
		return this.gposLayout;
	}
	,get_glyphs: function() {
		return this.glyphs;
	}
	,getLineGap: function() {
		return 0;
	}
	,getNumberOfHMetrics: function() {
		return 0;
	}
	,hasKerning: function() {
		if(this.getKerningPairs() != null) {
			return this.getKerningPairs().length > 0;
		} else {
			return false;
		}
	}
	,getKerningPairs: function() {
		return null;
	}
	,isFixedPitch: function() {
		return false;
	}
	,getItalicAngle: function() {
		return 0;
	}
	,getUnderlinePosition: function() {
		return this.get_emSquare() / 10 | 0;
	}
	,getUnderlineThickness: function() {
		return this.get_emSquare() / 20 | 0;
	}
	,__class__: fonthx_model_font_AbstractFont
	,__properties__: {get_styleModifiers:"get_styleModifiers",get_licenseURL:"get_licenseURL",get_license:"get_license",get_URL:"get_URL",get_vendorURL:"get_vendorURL",get_vendorID:"get_vendorID",get_manufacturerURL:"get_manufacturerURL",get_trademark:"get_trademark",get_postscriptName:"get_postscriptName",get_version:"get_version",get_fullName:"get_fullName",get_uniqueFamilyName:"get_uniqueFamilyName",get_description:"get_description",get_author:"get_author",get_creationDate:"get_creationDate",get_copyright:"get_copyright",get_gsubLayout:"get_gsubLayout",get_gposLayout:"get_gposLayout",set_typoLineGap:"set_typoLineGap",get_typoLineGap:"get_typoLineGap",set_realDescender:"set_realDescender",get_realDescender:"get_realDescender",set_realAscender:"set_realAscender",get_realAscender:"get_realAscender",set_idealDescender:"set_idealDescender",get_idealDescender:"get_idealDescender",set_idealAscender:"set_idealAscender",get_idealAscender:"get_idealAscender",set_sampleText:"set_sampleText",get_sampleText:"get_sampleText",set_style:"set_style",get_style:"get_style",set_emSquare:"set_emSquare",get_emSquare:"get_emSquare",set_name:"set_name",get_name:"get_name",get_glyphs:"get_glyphs"}
};
var fonthx_examples_pixelfonter_PixelFont = function(name,emSquare,pixelSize,shape) {
	if(shape == null) {
		shape = 1;
	}
	fonthx_model_font_AbstractFont.call(this);
	this.set_name(name);
	this.set_emSquare(emSquare);
	this.pixelSize = pixelSize;
	this.shape = shape;
	this.set_idealAscender(emSquare + pixelSize * 2);
	this.set_idealDescender(0);
	this.set_realAscender(emSquare + pixelSize * 2);
	this.set_realDescender(0);
	this.set_typoLineGap(emSquare);
	this.kerningSubLookup = new fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup();
};
fonthx_examples_pixelfonter_PixelFont.__name__ = ["fonthx","examples","pixelfonter","PixelFont"];
fonthx_examples_pixelfonter_PixelFont.__interfaces__ = [fonthx_model_font_IFont];
fonthx_examples_pixelfonter_PixelFont.autoKernGlyphs = function(left,right) {
	if(left.getPixels().length == 0 || right.getPixels().length == 0) {
		return 0;
	}
	var leftBounds = left.getGridBounds();
	var rightBounds = right.getGridBounds();
	var leftPixels = left.getPixels();
	var rightPixels = right.getPixels();
	var leftLeadEdgePixels = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < leftPixels.length) {
		var px = leftPixels[_g];
		++_g;
		if(!leftLeadEdgePixels.h.hasOwnProperty(px.y) || px.x > leftLeadEdgePixels.h[px.y]) {
			var v = px.x;
			leftLeadEdgePixels.h[px.y] = v;
		}
	}
	var rightTrailEdgePixels = new haxe_ds_IntMap();
	var _g1 = 0;
	while(_g1 < rightPixels.length) {
		var px1 = rightPixels[_g1];
		++_g1;
		if(!rightTrailEdgePixels.h.hasOwnProperty(px1.y) || px1.x < rightTrailEdgePixels.h[px1.y]) {
			var v1 = px1.x;
			rightTrailEdgePixels.h[px1.y] = v1;
		}
	}
	var leftOffset = 0 - (leftBounds.get_left() | 0);
	var rightOffset = 0 - (rightBounds.get_left() | 0);
	rightOffset += leftBounds.width | 0;
	var kern = 0;
	var closeEnough = false;
	var y;
	var trailingEdge;
	while(!closeEnough) {
		var y1 = rightTrailEdgePixels.keys();
		while(y1.hasNext()) {
			var y2 = y1.next();
			trailingEdge = rightTrailEdgePixels.h[y2] + rightOffset + kern;
			if(leftLeadEdgePixels.h.hasOwnProperty(y2) && trailingEdge == leftLeadEdgePixels.h[y2] + leftOffset + 1 || leftLeadEdgePixels.h.hasOwnProperty(y2 + 1) && trailingEdge == leftLeadEdgePixels.h[y2 + 1] + leftOffset || leftLeadEdgePixels.h.hasOwnProperty(y2 - 1) && trailingEdge == leftLeadEdgePixels.h[y2 - 1] + leftOffset) {
				closeEnough = true;
				break;
			}
		}
		if(kern < -20) {
			kern = 0;
			break;
		}
		if(!closeEnough) {
			--kern;
		}
	}
	return kern;
};
fonthx_examples_pixelfonter_PixelFont.__super__ = fonthx_model_font_AbstractFont;
fonthx_examples_pixelfonter_PixelFont.prototype = $extend(fonthx_model_font_AbstractFont.prototype,{
	pixelSize: null
	,shape: null
	,kerningSubLookup: null
	,addGlyph: function(codepoint,name) {
		var glyph = new fonthx_examples_pixelfonter_PixelGlyph(codepoint,name);
		glyph.pixelSize = this.pixelSize;
		glyph.shape = this.shape;
		this.get_glyphs().push(glyph);
		return glyph;
	}
	,prepareForExport: function() {
		var notdef = this.addGlyph(0);
		notdef.set_name(".notdef");
		var space = this.addGlyph(32);
		space.bounds = new fonthx_model_geom_Rectangle(0,0,this.pixelSize * 2,this.get_emSquare());
		this.get_glyphs().sort(function(a,b) {
			return a.get_codepoint() - b.get_codepoint();
		});
		var kerning = new fonthx_model_font_features_Feature("kern",true);
		this.get_gposLayout().addFeature(kerning,"latn");
		var kerningLookup = this.autoKern();
		kerning.addLookup(kerningLookup);
		this.get_gposLayout().addLookup(kerningLookup);
	}
	,get_vendorID: function() {
		return "PXFR";
	}
	,get_uniqueFamilyName: function() {
		return "PixelFonter" + this.get_name();
	}
	,get_styleModifiers: function() {
		return "Regular";
	}
	,get_fullName: function() {
		return this.get_uniqueFamilyName() + " " + this.get_styleModifiers();
	}
	,get_version: function() {
		return "1.0";
	}
	,get_postscriptName: function() {
		var _this_r = new RegExp("[^\\x00-\\x7F]]","g".split("u").join(""));
		var psName = this.get_uniqueFamilyName().replace(_this_r,"");
		psName = StringTools.replace(psName," ","");
		return psName;
	}
	,getNumberOfHMetrics: function() {
		return this.get_glyphs().length;
	}
	,getLineGap: function() {
		return 0;
	}
	,getKerningPairs: function() {
		return this.kerningSubLookup.get_pairs();
	}
	,autoKern: function() {
		var lookup = new fonthx_model_font_features_lookups_Lookup(2,true);
		lookup.addSubLookup(this.kerningSubLookup);
		var leftId = 0;
		var _g = 0;
		var _g1 = this.get_glyphs();
		while(_g < _g1.length) {
			var left = _g1[_g];
			++_g;
			var rightId = 0;
			var _g2 = 0;
			var _g3 = this.get_glyphs();
			while(_g2 < _g3.length) {
				var right = _g3[_g2];
				++_g2;
				var kern = fonthx_examples_pixelfonter_PixelFont.autoKernGlyphs(js_Boot.__cast(left , fonthx_examples_pixelfonter_PixelGlyph),js_Boot.__cast(right , fonthx_examples_pixelfonter_PixelGlyph));
				if(kern != 0) {
					kern = kern * this.pixelSize | 0;
					this.kerningSubLookup.addPair(new fonthx_model_font_features_lookups_pairadjustment_PositioningPair(leftId,rightId,kern));
				}
				++rightId;
			}
			++leftId;
		}
		return lookup;
	}
	,__class__: fonthx_examples_pixelfonter_PixelFont
});
var fonthx_examples_pixelfonter_PixelFonter = function() { };
fonthx_examples_pixelfonter_PixelFonter.__name__ = ["fonthx","examples","pixelfonter","PixelFonter"];
fonthx_examples_pixelfonter_PixelFonter.build = function(opts) {
	fonthx_utils_ExecutionTimer.start("PixelFonter::generate");
	var codepointSegments = opts.codepointString.split(",");
	var identifiers = Lambda.fold(codepointSegments,function(segment,identifiers1) {
		var extremes = segment.split("-");
		if(extremes.length != 2) {
			var identifier = new fonthx_examples_pixelfonter_GlyphIdentifier();
			if(Std.parseInt(segment) > 0) {
				identifier.codepoint = Std.parseInt(segment);
			} else {
				identifier.name = segment;
			}
			identifiers1.push(identifier);
			return identifiers1;
		}
		var _g1 = Std.parseInt(extremes[0]);
		var _g = Std.parseInt(extremes[1]) + 1;
		while(_g1 < _g) {
			var i = _g1++;
			identifiers1.push(new fonthx_examples_pixelfonter_GlyphIdentifier(i));
		}
		return identifiers1;
	},[]);
	var em = 1024;
	var pixelSize = em / opts.glyphWidth | 0;
	var font = new fonthx_examples_pixelfonter_PixelFont(opts.name,em,pixelSize,opts.shape);
	var numRows = opts.imageHeight / opts.glyphHeight;
	var _g11 = 0;
	var _g2 = identifiers.length;
	while(_g11 < _g2) {
		var idx = _g11++;
		var glyph = font.addGlyph(identifiers[idx].codepoint,identifiers[idx].name);
		var _g3 = 0;
		var _g21 = opts.glyphHeight;
		while(_g3 < _g21) {
			var dy = _g3++;
			var _g5 = 0;
			var _g4 = opts.glyphWidth;
			while(_g5 < _g4) {
				var dx = _g5++;
				var x = idx * opts.glyphWidth + dx;
				var row = Math.floor(x / opts.imageWidth) | 0;
				x %= opts.imageWidth;
				var y = dy + row * opts.glyphHeight;
				var idx1 = (y * opts.imageWidth + x) * 4;
				var color = opts.pixelData.b[idx1];
				if(color != 0) {
					continue;
				}
				glyph.addPixel(dx,opts.glyphHeight - (dy + 1),dy > Math.floor(opts.glyphHeight / 2) ? "#0099CC" : "#CC0000");
			}
		}
	}
	if(opts.svgSheet) {
		var svgBuilder = new fonthx_svg_SVGBuilder();
		var svg = svgBuilder.buildSheet(font.get_glyphs());
		fonthx_utils_ExecutionTimer.end("PixelFonter::generate");
		return haxe_io_Bytes.ofString(svg);
	}
	font.get_gsubLayout().setDefaults("latn");
	font.get_gposLayout().setDefaults("latn");
	font.prepareForExport();
	fonthx_model_font_glyphnames_GlyphNamer.nameGlyphs(font.get_glyphs());
	if(opts.features != null) {
		var featureSpecParser = new fonthx_services_FeatureSpecParser();
		featureSpecParser.toLayout(opts.features,font);
	}
	var buildOptions = new fonthx_opentype_BuildOptions();
	buildOptions.useSubroutinesInCFF = true;
	buildOptions.useFixedCoordinatesInCFF = opts.floatingPointCoords;
	buildOptions.includeSVG = opts.includeSVG;
	var bytes = fonthx_opentype_OpenTypeBuilder.build(font,opts.format == "ttf" ? "ttf" : "otf",buildOptions);
	fonthx_utils_ExecutionTimer.end("PixelFonter::generate");
	return bytes;
};
var fonthx_examples_pixelfonter_PixelFonterBrowserApp = $hx_exports["fonthx"]["examples"]["pixelfonter"]["PixelFonterBrowserApp"] = function() { };
fonthx_examples_pixelfonter_PixelFonterBrowserApp.__name__ = ["fonthx","examples","pixelfonter","PixelFonterBrowserApp"];
fonthx_examples_pixelfonter_PixelFonterBrowserApp.main = function() {
};
fonthx_examples_pixelfonter_PixelFonterBrowserApp.generate = function(imageData,options) {
	var o = new fonthx_examples_pixelfonter_PixelFonterParams(options);
	var bytes = haxe_crypto_Base64.decode(imageData.split(",")[1]);
	var handle = new haxe_io_BytesInput(bytes);
	var png = new format_png_Reader(handle).read();
	o.imageWidth = format_png_Tools.getHeader(png).width;
	o.imageHeight = format_png_Tools.getHeader(png).height;
	o.pixelData = format_png_Tools.extract32(png);
	handle.close();
	var file = fonthx_examples_pixelfonter_PixelFonter.build(o);
	return haxe_crypto_Base64.encode(file);
};
var fonthx_examples_pixelfonter_PixelFonterParams = function(o) {
	this.imageWidth = 0;
	this.imageHeight = 0;
	this.pixelData = null;
	this.features = null;
	if(o != null) {
		var _g = 0;
		var _g1 = Type.getInstanceFields(fonthx_examples_pixelfonter_PixelFonterParams);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(o,field)) {
				Reflect.setProperty(this,field,Reflect.getProperty(o,field));
			}
		}
	}
};
fonthx_examples_pixelfonter_PixelFonterParams.__name__ = ["fonthx","examples","pixelfonter","PixelFonterParams"];
fonthx_examples_pixelfonter_PixelFonterParams.prototype = {
	glyphWidth: null
	,glyphHeight: null
	,codepointString: null
	,name: null
	,format: null
	,outputPath: null
	,shape: null
	,includeSVG: null
	,svgSheet: null
	,floatingPointCoords: null
	,features: null
	,imageWidth: null
	,imageHeight: null
	,pixelData: null
	,__class__: fonthx_examples_pixelfonter_PixelFonterParams
};
var fonthx_model_font_IContourGlyph = function() { };
fonthx_model_font_IContourGlyph.__name__ = ["fonthx","model","font","IContourGlyph"];
fonthx_model_font_IContourGlyph.prototype = {
	set_name: null
	,get_name: null
	,set_rsb: null
	,get_rsb: null
	,set_lsb: null
	,get_lsb: null
	,get_advancedWidth: null
	,get_numPoints: null
	,get_numContours: null
	,set_codepoint: null
	,get_codepoint: null
	,numContours: null
	,numPoints: null
	,advancedWidth: null
	,unmapped: null
	,getBounds: null
	,walkContours: null
	,__class__: fonthx_model_font_IContourGlyph
	,__properties__: {set_name:"set_name",get_name:"get_name",set_rsb:"set_rsb",get_rsb:"get_rsb",set_lsb:"set_lsb",get_lsb:"get_lsb",get_advancedWidth:"get_advancedWidth",get_numPoints:"get_numPoints",get_numContours:"get_numContours",set_codepoint:"set_codepoint",get_codepoint:"get_codepoint"}
};
var fonthx_model_font_AbstractContourGlyph = function(codepoint,name) {
	if(codepoint == null) {
		codepoint = 0;
	}
	this.set_codepoint(codepoint);
	this.set_name(name);
	this.unmapped = codepoint < 1;
};
fonthx_model_font_AbstractContourGlyph.__name__ = ["fonthx","model","font","AbstractContourGlyph"];
fonthx_model_font_AbstractContourGlyph.__interfaces__ = [fonthx_model_font_IContourGlyph];
fonthx_model_font_AbstractContourGlyph.prototype = {
	codepoint: null
	,numContours: null
	,numPoints: null
	,advancedWidth: null
	,lsb: null
	,rsb: null
	,name: null
	,unmapped: null
	,getBounds: function() {
		return null;
	}
	,set_rsb: function(value) {
		return this.rsb = value;
	}
	,get_rsb: function() {
		return this.rsb;
	}
	,set_lsb: function(value) {
		return this.lsb = value;
	}
	,get_lsb: function() {
		return this.lsb;
	}
	,get_advancedWidth: function() {
		return this.advancedWidth;
	}
	,get_numPoints: function() {
		return this.numPoints;
	}
	,get_numContours: function() {
		return this.numContours;
	}
	,set_codepoint: function(value) {
		return this.codepoint = value;
	}
	,get_codepoint: function() {
		return this.codepoint;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,get_name: function() {
		return this.name;
	}
	,walkContours: function(consumer,options) {
	}
	,__class__: fonthx_model_font_AbstractContourGlyph
	,__properties__: {set_name:"set_name",get_name:"get_name",set_rsb:"set_rsb",get_rsb:"get_rsb",set_lsb:"set_lsb",get_lsb:"get_lsb",get_advancedWidth:"get_advancedWidth",get_numPoints:"get_numPoints",get_numContours:"get_numContours",set_codepoint:"set_codepoint",get_codepoint:"get_codepoint"}
};
var fonthx_examples_pixelfonter_PixelGlyph = function(codepoint,name) {
	fonthx_model_font_AbstractContourGlyph.call(this,codepoint,name);
	this.pixels = [];
	this.bounds = new fonthx_model_geom_Rectangle();
	this.gridBounds = null;
};
fonthx_examples_pixelfonter_PixelGlyph.__name__ = ["fonthx","examples","pixelfonter","PixelGlyph"];
fonthx_examples_pixelfonter_PixelGlyph.__interfaces__ = [fonthx_model_font_IContourGlyph];
fonthx_examples_pixelfonter_PixelGlyph.__super__ = fonthx_model_font_AbstractContourGlyph;
fonthx_examples_pixelfonter_PixelGlyph.prototype = $extend(fonthx_model_font_AbstractContourGlyph.prototype,{
	pixels: null
	,pixelSize: null
	,shape: null
	,bounds: null
	,gridBounds: null
	,addPixel: function(x,y,color) {
		if(color == null) {
			color = "#FF0000";
		}
		this.pixels.push(new fonthx_examples_pixelfonter_Pixel(x,y,color));
		if(this.gridBounds == null) {
			this.gridBounds = new fonthx_model_geom_Rectangle(x,y,1,1);
		} else {
			this.gridBounds.add(x,y);
		}
		this.bounds.add((x + 1) * this.pixelSize,(y + 1) * this.pixelSize);
	}
	,toString: function() {
		return "Codepoint " + this.get_codepoint() + ": " + this.pixels.toString();
	}
	,getBounds: function() {
		return this.bounds;
	}
	,getGridBounds: function() {
		return this.gridBounds;
	}
	,walkContours: function(consumer,options) {
		consumer.start();
		var props = new fonthx_model_font_PathProperties();
		var _g = 0;
		var _g1 = this.pixels;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			props.fill = p.color;
			consumer.startShape();
			consumer.startGroup();
			consumer.startPath(props);
			if(this.shape == 2) {
				var r = this.pixelSize / 2;
				var c = 0.552284749831 * r;
				var x0 = p.x * this.pixelSize;
				var y0 = p.y * this.pixelSize;
				var x1 = x0 + r;
				var y1 = y0 + r;
				var x2 = x1 + r;
				var y2 = y1 - r;
				var x3 = x2 - r;
				var y3 = y2 - r;
				consumer.moveTo(x0,y0);
				consumer.cubicTo(x0,y0 + c,x1 - c,y1,x1,y1);
				consumer.cubicTo(x1 + c,y1,x2,y2 + c,x2,y2);
				consumer.cubicTo(x2,y2 - c,x3 + c,y3,x3,y3);
				consumer.cubicTo(x3 - c,y3,x0,y0 - c,x0,y0);
			} else {
				var x11 = p.x * this.pixelSize;
				var y11 = p.y * this.pixelSize;
				var x21 = x11 + this.pixelSize;
				var y21 = y11 + this.pixelSize;
				consumer.moveTo(x11,y11);
				consumer.lineTo(x21,y11);
				consumer.lineTo(x21,y21);
				consumer.lineTo(x11,y21);
				consumer.lineTo(x11,y11);
			}
			consumer.endPath();
			consumer.endGroup();
			consumer.endShape();
		}
		consumer.end();
	}
	,getPixels: function() {
		return this.pixels;
	}
	,get_advancedWidth: function() {
		return this.bounds.width + this.pixelSize;
	}
	,get_numPoints: function() {
		return this.pixels.length * 5;
	}
	,get_numContours: function() {
		return this.pixels.length;
	}
	,get_lsb: function() {
		return 0;
	}
	,get_rsb: function() {
		return this.pixelSize;
	}
	,__class__: fonthx_examples_pixelfonter_PixelGlyph
});
var fonthx_examples_pixelfonter_Pixel = function(x,y,color,opacity) {
	if(opacity == null) {
		opacity = 1;
	}
	if(color == null) {
		color = "#FF0000";
	}
	this.x = x;
	this.y = y;
	this.color = color;
	this.opacity = opacity;
};
fonthx_examples_pixelfonter_Pixel.__name__ = ["fonthx","examples","pixelfonter","Pixel"];
fonthx_examples_pixelfonter_Pixel.prototype = {
	x: null
	,y: null
	,color: null
	,opacity: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ") " + this.color + " " + this.opacity;
	}
	,__class__: fonthx_examples_pixelfonter_Pixel
};
var fonthx_model_font_IContourConsumer = function() { };
fonthx_model_font_IContourConsumer.__name__ = ["fonthx","model","font","IContourConsumer"];
fonthx_model_font_IContourConsumer.prototype = {
	start: null
	,startGroup: null
	,startShape: null
	,startPath: null
	,moveTo: null
	,lineTo: null
	,quadTo: null
	,cubicTo: null
	,endPath: null
	,endShape: null
	,endGroup: null
	,end: null
	,__class__: fonthx_model_font_IContourConsumer
};
var fonthx_model_font_AbstractContourConsumer = function() { };
fonthx_model_font_AbstractContourConsumer.__name__ = ["fonthx","model","font","AbstractContourConsumer"];
fonthx_model_font_AbstractContourConsumer.__interfaces__ = [fonthx_model_font_IContourConsumer];
fonthx_model_font_AbstractContourConsumer.prototype = {
	start: function() {
	}
	,startGroup: function() {
	}
	,startShape: function() {
	}
	,startPath: function(props) {
	}
	,moveTo: function(x,y) {
	}
	,lineTo: function(x,y) {
	}
	,quadTo: function(x1,y1,x2,y2) {
	}
	,cubicTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,endPath: function() {
	}
	,endShape: function() {
	}
	,endGroup: function() {
	}
	,end: function() {
	}
	,__class__: fonthx_model_font_AbstractContourConsumer
};
var fonthx_model_font_ContourOptions = function(mergeType) {
	if(mergeType == null) {
		mergeType = 2;
	}
	this.mergeType = mergeType;
};
fonthx_model_font_ContourOptions.__name__ = ["fonthx","model","font","ContourOptions"];
fonthx_model_font_ContourOptions.prototype = {
	mergeType: null
	,__class__: fonthx_model_font_ContourOptions
};
var fonthx_model_font_PathProperties = function() {
	this.fill = "#000000";
	this.stroke = null;
	this.opacity = 1;
};
fonthx_model_font_PathProperties.__name__ = ["fonthx","model","font","PathProperties"];
fonthx_model_font_PathProperties.prototype = {
	fill: null
	,stroke: null
	,opacity: null
	,__class__: fonthx_model_font_PathProperties
};
var fonthx_model_font_features_Feature = function(tag,isPos) {
	if(isPos == null) {
		isPos = false;
	}
	this.tag = tag;
	this.isPos = isPos;
	this.idx = 0;
	this.lookups = [];
};
fonthx_model_font_features_Feature.__name__ = ["fonthx","model","font","features","Feature"];
fonthx_model_font_features_Feature.prototype = {
	tag: null
	,idx: null
	,lookups: null
	,isPos: null
	,addLookup: function(lookup) {
		this.lookups.push(lookup);
	}
	,__class__: fonthx_model_font_features_Feature
};
var fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$ = {};
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.__name__ = ["fonthx","model","font","features","_FeatureTag","FeatureTag_Impl_"];
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString = function(this1) {
	return this1;
};
var fonthx_model_font_features_Language = function(tag) {
	this.tag = tag;
	this.features = [];
};
fonthx_model_font_features_Language.__name__ = ["fonthx","model","font","features","Language"];
fonthx_model_font_features_Language.prototype = {
	tag: null
	,features: null
	,addFeature: function(feature) {
		this.features.push(feature);
	}
	,__class__: fonthx_model_font_features_Language
};
var fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$ = {};
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.__name__ = ["fonthx","model","font","features","_LanguageTag","LanguageTag_Impl_"];
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.toString = function(this1) {
	return this1;
};
var fonthx_model_font_features_Layout = function() {
	this.scripts = [];
	this.features = [];
	this.lookups = [];
};
fonthx_model_font_features_Layout.__name__ = ["fonthx","model","font","features","Layout"];
fonthx_model_font_features_Layout.prototype = {
	scripts: null
	,features: null
	,lookups: null
	,setDefaults: function(scriptTag,addDefault) {
		if(addDefault == null) {
			addDefault = true;
		}
		var script = new fonthx_model_font_features_Script(scriptTag);
		this.addScript(script);
		if(addDefault) {
			var defaultLang = new fonthx_model_font_features_Language("DFLT");
			script.defaultLangSys = defaultLang;
		}
	}
	,addScript: function(script) {
		if(this.getScript(script.tag) != null) {
			return this;
		}
		this.scripts.push(script);
		this.scripts.sort(function(a,b) {
			if(fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString(a.tag) > fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString(b.tag)) {
				return 1;
			} else if(fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString(b.tag) > fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString(a.tag)) {
				return -1;
			} else {
				return 0;
			}
		});
		return this;
	}
	,addFeature: function(feature,scriptTag,langTag) {
		this.features.push(feature);
		this.features.sort(function(a,b) {
			if(fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString(a.tag) > fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString(b.tag)) {
				return 1;
			} else if(fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString(b.tag) > fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString(a.tag)) {
				return -1;
			} else {
				return 0;
			}
		});
		var idx = 0;
		var _g = 0;
		var _g1 = this.features;
		while(_g < _g1.length) {
			var feature1 = _g1[_g];
			++_g;
			feature1.idx = idx++;
		}
		var script = this.getScript(scriptTag);
		if(script == null) {
			script = this.getDefaultScript();
		}
		if(script == null) {
			console.log("No script to add feature to");
			return this;
		}
		var lang = script.getLanguage(langTag);
		if(lang == null) {
			lang = script.defaultLangSys;
		}
		if(lang == null) {
			console.log("No language to add feature to");
			return this;
		}
		console.log("Adding feature " + fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString(feature.tag) + " to " + fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString(script.tag) + "/" + fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.toString(lang.tag));
		lang.addFeature(feature);
		return this;
	}
	,addLookup: function(lookup) {
		console.log("Adding lookup " + (lookup.isPos ? "GPOS" : "GSUB"));
		this.lookups.push(lookup);
		var idx = 0;
		var _g = 0;
		var _g1 = this.lookups;
		while(_g < _g1.length) {
			var lookup1 = _g1[_g];
			++_g;
			lookup1.idx = idx++;
		}
		return this;
	}
	,getScript: function(tag) {
		return Lambda.find(this.scripts,function(s) {
			return s.tag == tag;
		});
	}
	,getDefaultScript: function() {
		if(this.scripts.length == 0) {
			return null;
		}
		var script = this.getScript("DFLT");
		if(script == null) {
			script = this.scripts[0];
		}
		return script;
	}
	,__class__: fonthx_model_font_features_Layout
};
var fonthx_model_font_features_Script = function(tag) {
	this.tag = tag;
	this.languages = [];
	this.defaultLangSys = null;
};
fonthx_model_font_features_Script.__name__ = ["fonthx","model","font","features","Script"];
fonthx_model_font_features_Script.prototype = {
	tag: null
	,languages: null
	,allLanguages: null
	,defaultLangSys: null
	,addLanguage: function(language) {
		this.languages.push(language);
	}
	,get_allLanguages: function() {
		var all = this.languages.slice();
		if(this.defaultLangSys != null) {
			all.unshift(this.defaultLangSys);
		}
		return all;
	}
	,getLanguage: function(tag) {
		return Lambda.find(this.languages,function(l) {
			return l.tag == tag;
		});
	}
	,__class__: fonthx_model_font_features_Script
	,__properties__: {get_allLanguages:"get_allLanguages"}
};
var fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$ = {};
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.__name__ = ["fonthx","model","font","features","_ScriptTag","ScriptTag_Impl_"];
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString = function(this1) {
	return this1;
};
var fonthx_model_font_features_lookups_AbstractSubLookup = function() {
	this.coveredGlyphIndices = [];
};
fonthx_model_font_features_lookups_AbstractSubLookup.__name__ = ["fonthx","model","font","features","lookups","AbstractSubLookup"];
fonthx_model_font_features_lookups_AbstractSubLookup.prototype = {
	coveredGlyphIndices: null
	,addGlyphIndex: function(idx) {
		if(this.coveredGlyphIndices.indexOf(idx) == -1) {
			this.coveredGlyphIndices.push(idx);
			this.coveredGlyphIndices.sort(function(a,b) {
				return a - b;
			});
		}
	}
	,__class__: fonthx_model_font_features_lookups_AbstractSubLookup
};
var fonthx_model_font_features_lookups_ILookup = function() { };
fonthx_model_font_features_lookups_ILookup.__name__ = ["fonthx","model","font","features","lookups","ILookup"];
fonthx_model_font_features_lookups_ILookup.prototype = {
	idx: null
	,flags: null
	,type: null
	,subLookups: null
	,__class__: fonthx_model_font_features_lookups_ILookup
};
var fonthx_model_font_features_lookups_ISubLookup = function() { };
fonthx_model_font_features_lookups_ISubLookup.__name__ = ["fonthx","model","font","features","lookups","ISubLookup"];
fonthx_model_font_features_lookups_ISubLookup.prototype = {
	coveredGlyphIndices: null
	,__class__: fonthx_model_font_features_lookups_ISubLookup
};
var fonthx_model_font_features_lookups_Lookup = function(type,isPos) {
	if(isPos == null) {
		isPos = false;
	}
	this.flags = 0;
	this.type = 0;
	this.idx = 0;
	this.subLookups = [];
	this.type = type;
	this.isPos = isPos;
};
fonthx_model_font_features_lookups_Lookup.__name__ = ["fonthx","model","font","features","lookups","Lookup"];
fonthx_model_font_features_lookups_Lookup.prototype = {
	subLookups: null
	,idx: null
	,type: null
	,isPos: null
	,flags: null
	,addSubLookup: function(subLookup) {
		this.subLookups.push(subLookup);
	}
	,__class__: fonthx_model_font_features_lookups_Lookup
};
var fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$ = {};
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.__name__ = ["fonthx","model","font","features","lookups","_LookupType","LookupType_Impl_"];
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.toInt = function(this1) {
	return this1;
};
var fonthx_model_font_features_lookups_ligasub_LigaSubstitution = function(ligatureGlyphId,componentIds) {
	this.ligatureGlyphId = ligatureGlyphId;
	this.componentGlyphIds = componentIds;
	if(this.componentGlyphIds == null) {
		this.componentGlyphIds = [];
	}
};
fonthx_model_font_features_lookups_ligasub_LigaSubstitution.__name__ = ["fonthx","model","font","features","lookups","ligasub","LigaSubstitution"];
fonthx_model_font_features_lookups_ligasub_LigaSubstitution.prototype = {
	ligatureGlyphId: null
	,componentGlyphIds: null
	,add: function(componentId) {
		this.componentGlyphIds.push(componentId);
	}
	,__class__: fonthx_model_font_features_lookups_ligasub_LigaSubstitution
};
var fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup = function() {
	fonthx_model_font_features_lookups_AbstractSubLookup.call(this);
	this.subs = [];
};
fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup.__name__ = ["fonthx","model","font","features","lookups","ligasub","LigaSubstitutionSubLookup"];
fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup.__interfaces__ = [fonthx_model_font_features_lookups_ISubLookup];
fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup.__super__ = fonthx_model_font_features_lookups_AbstractSubLookup;
fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup.prototype = $extend(fonthx_model_font_features_lookups_AbstractSubLookup.prototype,{
	subs: null
	,get_subs: function() {
		return this.subs;
	}
	,addSubstitution: function(ligatureId,componentIds) {
		var sub = new fonthx_model_font_features_lookups_ligasub_LigaSubstitution(ligatureId,componentIds);
		this.get_subs().push(sub);
		return sub;
	}
	,__class__: fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup
	,__properties__: {get_subs:"get_subs"}
});
var fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup = function(format1,format2) {
	if(format2 == null) {
		format2 = 0;
	}
	if(format1 == null) {
		format1 = 4;
	}
	fonthx_model_font_features_lookups_AbstractSubLookup.call(this);
	this.classes = [];
	this.format2 = format2;
	this.format1 = format1;
};
fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup.__name__ = ["fonthx","model","font","features","lookups","pairadjustment","ClassPairAdjustmentPositioningSubLookup"];
fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup.__interfaces__ = [fonthx_model_font_features_lookups_ISubLookup];
fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup.__super__ = fonthx_model_font_features_lookups_AbstractSubLookup;
fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup.prototype = $extend(fonthx_model_font_features_lookups_AbstractSubLookup.prototype,{
	classes: null
	,format1: null
	,format2: null
	,get_classes: function() {
		return this.classes;
	}
	,addClass: function(clazz) {
		this.get_classes().push(clazz);
		var _g = 0;
		var _g1 = clazz.pairs;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			this.addGlyphIndex(pair[0]);
		}
	}
	,addClasses: function(classes) {
		var _g = 0;
		while(_g < classes.length) {
			var clazz = classes[_g];
			++_g;
			this.addClass(clazz);
		}
	}
	,__class__: fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup
	,__properties__: {get_classes:"get_classes"}
});
var fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup = function(format1,format2) {
	if(format2 == null) {
		format2 = 0;
	}
	if(format1 == null) {
		format1 = 4;
	}
	fonthx_model_font_features_lookups_AbstractSubLookup.call(this);
	this.pairs = [];
	this.format1 = format1;
	this.format2 = format2;
};
fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup.__name__ = ["fonthx","model","font","features","lookups","pairadjustment","PairAdjustmentPositioningSubLookup"];
fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup.__interfaces__ = [fonthx_model_font_features_lookups_ISubLookup];
fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup.__super__ = fonthx_model_font_features_lookups_AbstractSubLookup;
fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup.prototype = $extend(fonthx_model_font_features_lookups_AbstractSubLookup.prototype,{
	pairs: null
	,format1: null
	,format2: null
	,get_pairs: function() {
		return this.pairs;
	}
	,addPair: function(pair) {
		this.get_pairs().push(pair);
		this.addGlyphIndex(pair.idx1);
	}
	,addPairs: function(pairs) {
		var _g = 0;
		while(_g < pairs.length) {
			var pair = pairs[_g];
			++_g;
			this.addPair(pair);
		}
	}
	,hasFirstValues: function() {
		return this.format1 != 0;
	}
	,hasSecondValues: function() {
		return this.format2 != 0;
	}
	,__class__: fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup
	,__properties__: {get_pairs:"get_pairs"}
});
var fonthx_model_font_features_lookups_pairadjustment_PositioningPair = function(left,right,x,y) {
	if(y == null) {
		y = 0;
	}
	this.idx1 = left;
	this.idx2 = right;
	this.x = x;
	this.y = y;
};
fonthx_model_font_features_lookups_pairadjustment_PositioningPair.__name__ = ["fonthx","model","font","features","lookups","pairadjustment","PositioningPair"];
fonthx_model_font_features_lookups_pairadjustment_PositioningPair.getKey = function(idx1,idx2) {
	return (idx1 == null ? "null" : "" + idx1) + "_" + (idx2 == null ? "null" : "" + idx2);
};
fonthx_model_font_features_lookups_pairadjustment_PositioningPair.prototype = {
	idx1: null
	,idx2: null
	,x: null
	,y: null
	,toString: function() {
		return fonthx_model_font_features_lookups_pairadjustment_PositioningPair.getKey(this.idx1,this.idx2) + ": (" + this.x + "," + this.y + ")";
	}
	,__class__: fonthx_model_font_features_lookups_pairadjustment_PositioningPair
};
var fonthx_model_font_features_lookups_pairadjustment_PositioningPairClass = function(name,value) {
	this.set_name(name);
	this.value = value;
	this.pairs = [];
};
fonthx_model_font_features_lookups_pairadjustment_PositioningPairClass.__name__ = ["fonthx","model","font","features","lookups","pairadjustment","PositioningPairClass"];
fonthx_model_font_features_lookups_pairadjustment_PositioningPairClass.prototype = {
	name: null
	,pairs: null
	,value: null
	,addPair: function(idx1,idx2) {
		this.pairs.push([idx1,idx2]);
	}
	,toString: function() {
		return this.get_name();
	}
	,get_name: function() {
		return this.name;
	}
	,set_name: function(name) {
		return this.name = name;
	}
	,__class__: fonthx_model_font_features_lookups_pairadjustment_PositioningPairClass
	,__properties__: {set_name:"set_name",get_name:"get_name"}
};
var fonthx_model_font_features_lookups_singlesub_SingleSubstitution = function(fromId,toId) {
	this.fromId = fromId;
	this.toId = toId;
};
fonthx_model_font_features_lookups_singlesub_SingleSubstitution.__name__ = ["fonthx","model","font","features","lookups","singlesub","SingleSubstitution"];
fonthx_model_font_features_lookups_singlesub_SingleSubstitution.prototype = {
	fromId: null
	,toId: null
	,getDelta: function() {
		return this.toId - this.fromId;
	}
	,__class__: fonthx_model_font_features_lookups_singlesub_SingleSubstitution
};
var fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup = function() {
	fonthx_model_font_features_lookups_AbstractSubLookup.call(this);
	this.subs = [];
};
fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup.__name__ = ["fonthx","model","font","features","lookups","singlesub","SingleSubstitutionSubLookup"];
fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup.__interfaces__ = [fonthx_model_font_features_lookups_ISubLookup];
fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup.__super__ = fonthx_model_font_features_lookups_AbstractSubLookup;
fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup.prototype = $extend(fonthx_model_font_features_lookups_AbstractSubLookup.prototype,{
	subs: null
	,addSubstitution: function(fromId,toId) {
		var sub = new fonthx_model_font_features_lookups_singlesub_SingleSubstitution(fromId,toId);
		this.get_subs().push(sub);
		return sub;
	}
	,simpleDeltaSubstitutions: function() {
		if(this.get_subs().length < 2) {
			return true;
		}
		var delta = this.get_subs()[0].toId - this.get_subs()[0].fromId;
		var _g = 0;
		var _g1 = this.get_subs();
		while(_g < _g1.length) {
			var sub = _g1[_g];
			++_g;
			if(sub.toId - sub.fromId != delta) {
				return false;
			}
		}
		return true;
	}
	,get_subs: function() {
		return this.subs;
	}
	,__class__: fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup
	,__properties__: {get_subs:"get_subs"}
});
var fonthx_model_font_glyphnames_AGLFN = function() { };
fonthx_model_font_glyphnames_AGLFN.__name__ = ["fonthx","model","font","glyphnames","AGLFN"];
fonthx_model_font_glyphnames_AGLFN.init = function() {
	if(fonthx_model_font_glyphnames_AGLFN.uvToGlyphName != null) {
		return;
	}
	fonthx_model_font_glyphnames_AGLFN.uvToGlyphName = new haxe_ds_IntMap();
	var text = fonthx_Assets.getText("AGLFN");
	var lines = text.split("\n");
	var splitter_r = new RegExp("\\s+","g".split("u").join(""));
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		if(HxOverrides.substr(line,0,1) == "#" || line.length == 0) {
			continue;
		}
		var parts = line.split(";");
		if(parts.length != 3) {
			continue;
		}
		fonthx_model_font_glyphnames_AGLFN.uvToGlyphName.h[Std.parseInt("0x" + parts[0])] = parts[1];
	}
};
var fonthx_model_font_glyphnames_GlyphNamer = function() { };
fonthx_model_font_glyphnames_GlyphNamer.__name__ = ["fonthx","model","font","glyphnames","GlyphNamer"];
fonthx_model_font_glyphnames_GlyphNamer.nameGlyphs = function(glyphs) {
	fonthx_model_font_glyphnames_AGLFN.init();
	var idx = 0;
	var _g = 0;
	while(_g < glyphs.length) {
		var g = glyphs[_g];
		++_g;
		if(g.get_name() != null) {
			continue;
		}
		if(g.get_codepoint() > 0) {
			var _this = fonthx_model_font_glyphnames_AGLFN.uvToGlyphName;
			var key = g.get_codepoint();
			if(_this.h.hasOwnProperty(key)) {
				var _this1 = fonthx_model_font_glyphnames_AGLFN.uvToGlyphName;
				var key1 = g.get_codepoint();
				g.set_name(_this1.h[key1]);
			} else {
				g.set_name("uni" + StringTools.hex(g.get_codepoint()));
			}
		} else {
			g.set_name("glyph" + idx++);
		}
	}
};
var fonthx_model_geom_CubicBezier = function(p0,p1,p2,p3) {
	this.p0 = p0;
	this.p1 = p1;
	this.p2 = p2;
	this.p3 = p3;
};
fonthx_model_geom_CubicBezier.__name__ = ["fonthx","model","geom","CubicBezier"];
fonthx_model_geom_CubicBezier.prototype = {
	p0: null
	,p1: null
	,p2: null
	,p3: null
	,recursionCount: null
	,toQuadratics: function() {
		this.recursionCount = 0;
		var quadPoints = [];
		var q0 = this.p0.clone();
		var q1 = this.getIntersectionPoint(this.p0,this.p1,this.p2,this.p3);
		var q2 = this.p3.clone();
		this.breakCubic(this.p0,this.p1,this.p2,this.p3,q0,q1,q2,0.0,1.0,quadPoints);
		return quadPoints;
	}
	,breakCubic: function(c0,c1,c2,c3,q0,q1,q2,t0,t1,result) {
		this.recursionCount++;
		var midPoint = t0 + (t1 - t0) * 0.5;
		var cubicMidPoint = this.getPointOnCubic(c0,c1,c2,c3,midPoint);
		var quadMidPoint = this.getPointOnQuadratic(q0,q1,q2,0.5);
		var dist = this.distance(quadMidPoint,cubicMidPoint);
		if(dist < fonthx_model_geom_CubicBezier.maxDistance || this.recursionCount > fonthx_model_geom_CubicBezier.recursionTolerance) {
			result.push(q1);
			result.push(q2);
			return;
		}
		var dl = this.derivativeOfCubicBezier(c0,c1,c2,c3,midPoint);
		dl.x += cubicMidPoint.x;
		dl.y += cubicMidPoint.y;
		var qq1 = this.getIntersectionPoint(q0,q1,cubicMidPoint,dl);
		this.breakCubic(c0,c1,c2,c3,q0,qq1,cubicMidPoint,t0,midPoint,result);
		var qq11 = this.getIntersectionPoint(q2,q1,cubicMidPoint,dl);
		this.breakCubic(c0,c1,c2,c3,cubicMidPoint,qq11,q2,midPoint,t1,result);
	}
	,getPointOnCubic: function(p0,p1,p2,p3,t) {
		var tt = t * t;
		var ttt = tt * t;
		var t1 = 1 - t;
		var tt1 = t1 * t1;
		var tt2 = tt1 * t1;
		var tt3 = 3 * t * tt1;
		var tt4 = 3 * tt * t1;
		var x = p0.x * tt2 + p1.x * tt3 + p2.x * tt4 + p3.x * ttt;
		var y = p0.y * tt2 + p1.y * tt3 + p2.y * tt4 + p3.y * ttt;
		return new fonthx_model_geom_Point(x,y);
	}
	,getPointOnQuadratic: function(p0,p1,p2,t) {
		var tt = t * t;
		var t1 = 1 - t;
		var tt1 = t1 * t1;
		var tt4 = 2 * t * t1;
		var x = p0.x * tt1 + p1.x * tt4 + p2.x * tt;
		var y = p0.y * tt1 + p1.y * tt4 + p2.y * tt;
		return new fonthx_model_geom_Point(x,y);
	}
	,getIntersectionPoint: function(a0,a1,b0,b1) {
		var dAx = a1.x - a0.x;
		var dAy = a1.y - a0.y;
		var dBx = b1.x - b0.x;
		var dBy = b1.y - b0.y;
		var Fa = dAx * a0.y - dAy * a0.x;
		var Fb = dBx * b0.y - dBy * b0.x;
		var ddd = dBy * dAx - dBx * dAy;
		var x = 0;
		var y = 0;
		if(ddd != 0) {
			x = (Fa * dBx - Fb * dAx) / ddd;
			y = (Fa * dBy - Fb * dAy) / ddd;
		}
		return new fonthx_model_geom_Point(x,y);
	}
	,distance: function(p0,p1) {
		var vx = p1.x - p0.x;
		var vy = p1.y - p0.y;
		return Math.abs(Math.sqrt(vx * vx + vy * vy));
	}
	,derivativeOfCubicBezier: function(p0,p1,p2,p3,t) {
		var ax = 3 * p1.x - 3 * p2.x - p0.x + p3.x;
		var bx = 3 * (p0.x - 2 * p1.x + p2.x);
		var cx = 3 * (p1.x - p0.x);
		var ay = 3 * p1.y - 3 * p2.y - p0.y + p3.y;
		var by = 3 * (p0.y - 2 * p1.y + p2.y);
		var cy = 3 * (p1.y - p0.y);
		var x = 3 * ax * t * t + 2 * bx * t + cx;
		var y = 3 * ay * t * t + 2 * by * t + cy;
		return new fonthx_model_geom_Point(x,y);
	}
	,__class__: fonthx_model_geom_CubicBezier
};
var fonthx_model_geom_Point = function(x,y,type) {
	if(type == null) {
		type = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.type = type;
};
fonthx_model_geom_Point.__name__ = ["fonthx","model","geom","Point"];
fonthx_model_geom_Point.prototype = {
	next: null
	,prev: null
	,type: null
	,x: null
	,y: null
	,clone: function() {
		var clone = new fonthx_model_geom_Point();
		clone.x = this.x;
		clone.y = this.y;
		clone.type = this.type;
		return clone;
	}
	,equals: function(other) {
		if(this.x == other.x && this.y == other.y) {
			return this.type == other.type;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Pt [" + this.x + "," + this.y + "] " + (this.type == 0 ? "ON" : "OFF");
	}
	,__class__: fonthx_model_geom_Point
};
var fonthx_model_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
fonthx_model_geom_Rectangle.__name__ = ["fonthx","model","geom","Rectangle"];
fonthx_model_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new fonthx_model_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,extendBounds: function(r) {
		var dx = this.x - r.x;
		if(dx > 0) {
			this.x -= dx;
			this.width += dx;
		}
		var dy = this.y - r.y;
		if(dy > 0) {
			this.y -= dy;
			this.height += dy;
		}
		if(r.get_right() > this.get_right()) {
			this.set_right(r.get_right());
		}
		if(r.get_bottom() > this.get_bottom()) {
			this.set_bottom(r.get_bottom());
		}
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,add: function(x,y) {
		this.extendBounds(new fonthx_model_geom_Rectangle(x,y,0,0));
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new fonthx_model_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(value) {
		this.height = value - this.y;
		return value;
	}
	,get_bottomRight: function() {
		return new fonthx_model_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(value) {
		this.width = value.x - this.x;
		this.height = value.y - this.y;
		return value.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(value) {
		this.width -= value - this.x;
		this.x = value;
		return value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(value) {
		this.width = value - this.x;
		return value;
	}
	,get_size: function() {
		return new fonthx_model_geom_Point(this.width,this.height);
	}
	,set_size: function(value) {
		this.width = value.x;
		this.height = value.y;
		return value.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(value) {
		this.height -= value - this.y;
		this.y = value;
		return value;
	}
	,get_topLeft: function() {
		return new fonthx_model_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(value) {
		this.x = value.x;
		this.y = value.y;
		return value.clone();
	}
	,__class__: fonthx_model_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var fonthx_opentype_BuildOptions = function() {
	this.includeSVG = false;
	this.useSubroutinesInCFF = false;
	this.useFixedCoordinatesInCFF = false;
	this.extraNamingRecords = new haxe_ds_IntMap();
};
fonthx_opentype_BuildOptions.__name__ = ["fonthx","opentype","BuildOptions"];
fonthx_opentype_BuildOptions.prototype = {
	useFixedCoordinatesInCFF: null
	,useSubroutinesInCFF: null
	,includeSVG: null
	,extraNamingRecords: null
	,__class__: fonthx_opentype_BuildOptions
};
var fonthx_opentype_OpenTypeBuilder = function() { };
fonthx_opentype_OpenTypeBuilder.__name__ = ["fonthx","opentype","OpenTypeBuilder"];
fonthx_opentype_OpenTypeBuilder.build = function(font,format,options) {
	if(format == null) {
		format = "ttf";
	}
	if(options == null) {
		options = new fonthx_opentype_BuildOptions();
	}
	console.log("Generating font file for " + font.get_name() + " " + font.get_glyphs().length + " glyphs");
	if(font.get_glyphs().length == 0) {
		console.log("Font file contains no glyphs");
		return null;
	}
	fonthx_model_font_glyphnames_GlyphNamer.nameGlyphs(font.get_glyphs());
	fonthx_utils_ExecutionTimer.start("OpenTypeBuilder.build");
	var tdir = new fonthx_opentype_tables_TableDirectory();
	var ttf = new fonthx_opentype_OpenTypeFont(tdir);
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createCmap(font));
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createFontHeader(font,format));
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createHorizontalHeaderTable(font));
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createHorizontalMetricsTable(font));
	if(font.hasKerning()) {
		ttf.addTable(fonthx_opentype_OpenTypeBuilder.createKerningTable(font));
		ttf.addTable(fonthx_opentype_OpenTypeBuilder.createGPOSTable(font));
	}
	if(font.get_gsubLayout().features.length > 0) {
		ttf.addTable(fonthx_opentype_OpenTypeBuilder.createGSUBTable(font));
	}
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createMaximumProfileTable(font,format));
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createNamingTable(font,options));
	ttf.addTable(fonthx_opentype_OpenTypeBuilder.createOS2Table(font));
	ttf.addTable(new fonthx_opentype_tables_PostTable(font,fonthx_opentype_tables_PostTable.VERSION_3_0));
	if(format == "otf") {
		ttf.addTable(fonthx_opentype_OpenTypeBuilder.createCFFTable(font,options));
	} else {
		var glyphTable = new fonthx_opentype_tables_GlyphTable(font);
		ttf.addTable(glyphTable);
		ttf.addTable(new fonthx_opentype_tables_LocationTable(glyphTable));
	}
	if(options.includeSVG) {
		var svgTable = new fonthx_opentype_svg_SVGTable(font);
		ttf.addTable(svgTable);
	}
	ttf.addTable(new fonthx_opentype_tables_DSIGTable());
	ttf.addTable(new fonthx_opentype_tables_SnftTable(ttf.getNumTables(),format));
	var bytes = fonthx_opentype_OpenTypeBuilder.writeToBytes(ttf);
	fonthx_utils_ExecutionTimer.end("OpenTypeBuilder.build");
	return bytes;
};
fonthx_opentype_OpenTypeBuilder.writeToBytes = function(ttf) {
	var byteBlocks = new haxe_ds_StringMap();
	var numTables = 0;
	var _g = 0;
	var _g1 = fonthx_opentype_tables_Table.compileOrder;
	while(_g < _g1.length) {
		var tag = _g1[_g];
		++_g;
		var table = ttf.getTable(tag);
		if(table == null) {
			continue;
		}
		++numTables;
		var writer = new fonthx_opentype_writers_TrueTypeFileWriter();
		console.log("Writing " + table.tag);
		table.write(writer);
		table.length = writer.getPosition();
		writer.pad();
		var v = writer.getBytes();
		if(__map_reserved[tag] != null) {
			byteBlocks.setReserved(tag,v);
		} else {
			byteBlocks.h[tag] = v;
		}
		table.checksum = fonthx_opentype_OpenTypeBuilder.calculateChecksum(__map_reserved[tag] != null ? byteBlocks.getReserved(tag) : byteBlocks.h[tag]);
	}
	var offset = 12 + numTables * 16;
	var _g2 = 0;
	var _g11 = fonthx_opentype_tables_Table.optimalOrder;
	while(_g2 < _g11.length) {
		var tag1 = _g11[_g2];
		++_g2;
		var table1 = ttf.getTable(tag1);
		if(table1 == null) {
			continue;
		}
		table1.offset = offset;
		offset += (__map_reserved[tag1] != null ? byteBlocks.getReserved(tag1) : byteBlocks.h[tag1]).length;
	}
	var writer1 = new fonthx_opentype_writers_TrueTypeFileWriter();
	ttf.getTable(fonthx_opentype_tables_Table.TDIR).write(writer1);
	var k = fonthx_opentype_tables_Table.TDIR;
	var v1 = writer1.getBytes();
	if(__map_reserved[k] != null) {
		byteBlocks.setReserved(k,v1);
	} else {
		byteBlocks.h[k] = v1;
	}
	writer1 = new fonthx_opentype_writers_TrueTypeFileWriter();
	ttf.getTable(fonthx_opentype_tables_Table.SFNT).write(writer1);
	var k1 = fonthx_opentype_tables_Table.SFNT;
	var v2 = writer1.getBytes();
	if(__map_reserved[k1] != null) {
		byteBlocks.setReserved(k1,v2);
	} else {
		byteBlocks.h[k1] = v2;
	}
	var b = new haxe_io_BytesBuffer();
	var key = fonthx_opentype_tables_Table.SFNT;
	var src = __map_reserved[key] != null ? byteBlocks.getReserved(key) : byteBlocks.h[key];
	var key1 = fonthx_opentype_tables_Table.SFNT;
	var len = (__map_reserved[key1] != null ? byteBlocks.getReserved(key1) : byteBlocks.h[key1]).length;
	if(len < 0 || len > src.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	var b1 = b.b;
	var b2 = src.b;
	var _g12 = 0;
	var _g3 = len;
	while(_g12 < _g3) {
		var i = _g12++;
		b.b.push(b2[i]);
	}
	var key2 = fonthx_opentype_tables_Table.TDIR;
	var src1 = __map_reserved[key2] != null ? byteBlocks.getReserved(key2) : byteBlocks.h[key2];
	var key3 = fonthx_opentype_tables_Table.TDIR;
	var len1 = (__map_reserved[key3] != null ? byteBlocks.getReserved(key3) : byteBlocks.h[key3]).length;
	if(len1 < 0 || len1 > src1.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	var b11 = b.b;
	var b21 = src1.b;
	var _g13 = 0;
	var _g4 = len1;
	while(_g13 < _g4) {
		var i1 = _g13++;
		b.b.push(b21[i1]);
	}
	var _g5 = 0;
	var _g14 = fonthx_opentype_tables_Table.optimalOrder;
	while(_g5 < _g14.length) {
		var tag2 = _g14[_g5];
		++_g5;
		if(!(__map_reserved[tag2] != null ? byteBlocks.existsReserved(tag2) : byteBlocks.h.hasOwnProperty(tag2))) {
			continue;
		}
		var src2 = __map_reserved[tag2] != null ? byteBlocks.getReserved(tag2) : byteBlocks.h[tag2];
		var len2 = (__map_reserved[tag2] != null ? byteBlocks.getReserved(tag2) : byteBlocks.h[tag2]).length;
		if(len2 < 0 || len2 > src2.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b12 = b.b;
		var b22 = src2.b;
		var _g15 = 0;
		var _g6 = len2;
		while(_g15 < _g6) {
			var i2 = _g15++;
			b.b.push(b22[i2]);
		}
	}
	var bytes = b.getBytes();
	var csa = -1313820742 - fonthx_opentype_OpenTypeBuilder.calculateChecksum(bytes);
	var offset1 = ttf.getTable(fonthx_opentype_tables_Table.HEAD).offset + 8;
	bytes.b[offset1] = csa >>> 24 & 255 & 255;
	bytes.b[offset1 + 1] = csa >>> 16 & 255 & 255;
	bytes.b[offset1 + 2] = csa >>> 8 & 255 & 255;
	bytes.b[offset1 + 3] = csa & 255 & 255;
	return bytes;
};
fonthx_opentype_OpenTypeBuilder.createFontHeader = function(fnt,format) {
	var head = new fonthx_opentype_tables_FontHeader();
	var now = new Date();
	head.setFormat(format).setCreated(fonthx_opentype_utils_Utils.getMillisSince1904(now)).setModified(fonthx_opentype_utils_Utils.getMillisSince1904(now)).setVersion(fnt.get_version()).setEmSquare(fnt.get_emSquare());
	var bounds = null;
	var _g = 0;
	var _g1 = fnt.get_glyphs();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		var gBounds = g.getBounds();
		if(bounds == null) {
			bounds = gBounds;
		} else if(gBounds != null) {
			bounds = bounds.union(gBounds);
		}
	}
	if(bounds == null) {
		bounds = new fonthx_model_geom_Rectangle();
	}
	head.setBounds(bounds).setMacStyle(fonthx_opentype_constants_MacStyle.REGULAR).setFontDirectionHint(2).setLongOffsetFormat(true).setSmallestReadablePixelSize(8);
	return head;
};
fonthx_opentype_OpenTypeBuilder.hasSMP = function(fnt) {
	var _g = 0;
	var _g1 = fnt.get_glyphs();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		if(g.get_codepoint() > 65535) {
			return true;
		}
	}
	return false;
};
fonthx_opentype_OpenTypeBuilder.createCmap = function(fnt) {
	var cmap = new fonthx_opentype_tables_CharacterMapTable();
	cmap.addSubtable(new fonthx_opentype_tables_CharacterMapFormat4Subtable(0,3,0));
	if(fonthx_opentype_OpenTypeBuilder.hasSMP(fnt)) {
		cmap.addSubtable(new fonthx_opentype_tables_CharacterMapFormat12Subtable(0,4,0));
	}
	cmap.addSubtable(new fonthx_opentype_tables_CharacterMapFormat4Subtable(3,1,0));
	var _g = 0;
	var _g1 = cmap.getSubtables();
	while(_g < _g1.length) {
		var sub = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = fnt.get_glyphs();
		while(_g2 < _g3.length) {
			var g = _g3[_g2];
			++_g2;
			sub.addCodepoint(g.get_codepoint());
		}
	}
	return cmap;
};
fonthx_opentype_OpenTypeBuilder.createHorizontalHeaderTable = function(font) {
	var table = new fonthx_opentype_tables_HorizontalHeaderTable();
	var minLSB = fonthx_utils_MathUtils.MAX_INT;
	var minRSB = fonthx_utils_MathUtils.MAX_INT;
	var maxAdvancedWidth = 0;
	var xMaxExtent = 0;
	var b;
	var _g = 0;
	var _g1 = font.get_glyphs();
	while(_g < _g1.length) {
		var glyph = _g1[_g];
		++_g;
		if(glyph.get_numContours() <= 0) {
			continue;
		}
		if(glyph.get_advancedWidth() > maxAdvancedWidth) {
			maxAdvancedWidth = glyph.get_advancedWidth() | 0;
		}
		if(glyph.get_lsb() < minLSB) {
			minLSB = glyph.get_lsb() | 0;
		}
		if(glyph.get_rsb() < minRSB && glyph.get_codepoint() != 0) {
			minRSB = glyph.get_rsb() | 0;
		}
		b = glyph.getBounds();
		var xExtent = glyph.get_lsb() + (b == null ? 0 : b.width);
		if(xExtent > xMaxExtent) {
			xMaxExtent = xExtent | 0;
		}
	}
	table.setAdvanceWidthMax(maxAdvancedWidth).setAscender(font.get_realAscender() | 0).setCaretOffset(0).setCaretSlopeRise(1).setCaretSlopeRun(0).setDescender(font.get_realDescender() | 0).setLineGap(font.getLineGap()).setMinLeftSideBearing(minLSB).setMinRightSideBearing(minRSB).setNumberOfHMetrics(font.getNumberOfHMetrics()).setXMaxExtent(xMaxExtent);
	var maxContext = 0;
	var _g2 = 0;
	var _g11 = font.get_gsubLayout().lookups;
	while(_g2 < _g11.length) {
		var lookup = _g11[_g2];
		++_g2;
		if(lookup.type == 1) {
			maxContext = fonthx_utils_MathUtils.maxint(2,maxContext);
		} else {
			var tmp = lookup.type == 4;
		}
	}
	var _g3 = 0;
	var _g12 = font.get_gposLayout().lookups;
	while(_g3 < _g12.length) {
		var lookup1 = _g12[_g3];
		++_g3;
		if(lookup1.type == 2) {
			maxContext = fonthx_utils_MathUtils.maxint(2,maxContext);
		}
	}
	return table;
};
fonthx_opentype_OpenTypeBuilder.createHorizontalMetricsTable = function(fnt) {
	var table = new fonthx_opentype_tables_HorizontalMetricsTable();
	var _g = 0;
	var _g1 = fnt.get_glyphs();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		table.addMetric(g.get_advancedWidth() | 0,g.get_lsb() | 0);
	}
	return table;
};
fonthx_opentype_OpenTypeBuilder.createMaximumProfileTable = function(fnt,format) {
	var table = new fonthx_opentype_tables_MaximumProfileTable();
	var isTT = format == "ttf";
	table.setVersion(isTT ? fonthx_opentype_tables_MaximumProfileTable.TRUETYPE_OUTLINES : fonthx_opentype_tables_MaximumProfileTable.CFF_OUTLINES).setNumGlyphs(fnt.get_glyphs().length);
	if(isTT) {
		var maxPoints = 0;
		var maxContours = 0;
		var _g = 0;
		var _g1 = fnt.get_glyphs();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var numPoints = g.get_numPoints();
			if(numPoints > maxPoints) {
				maxPoints = numPoints;
			}
			var numContours = g.get_numContours();
			if(numContours > maxContours) {
				maxContours = numContours;
			}
		}
		table.setMaxPoints(maxPoints).setMaxContours(maxContours);
	}
	return table;
};
fonthx_opentype_OpenTypeBuilder.createNamingTable = function(fnt,options) {
	var table = new fonthx_opentype_tables_NamingTable();
	var _g = 1;
	while(_g < 3) {
		var i = _g++;
		var platform = [fonthx_opentype_constants_Platform.UNICODE];
		var encoding = [fonthx_opentype_constants_UnicodeEncoding.UNICODE_1_0];
		var language = [0];
		if(i == 1) {
			platform[0] = fonthx_opentype_constants_Platform.MACINTOSH;
			encoding[0] = fonthx_opentype_constants_MacintoshEncoding.ROMAN;
			language[0] = fonthx_opentype_constants_MacintoshLanguages.ENGLISH;
		} else if(i == 2) {
			platform[0] = fonthx_opentype_constants_Platform.MICROSOFT;
			encoding[0] = fonthx_opentype_constants_MicrosoftEncoding.UNICODE_BMP_ONLY;
			language[0] = fonthx_opentype_constants_MicrosoftLanguages.ENU;
		}
		var addRecord = (function(language1,encoding1,platform1) {
			return function(key,content) {
				if(content != null) {
					table.addRecord(key,content,platform1[0],encoding1[0],language1[0]);
				}
			};
		})(language,encoding,platform);
		addRecord(fonthx_opentype_tables_NamingRecord.COPYRIGHT,fnt.get_copyright());
		addRecord(fonthx_opentype_tables_NamingRecord.FONT_FAMILY,fnt.get_uniqueFamilyName());
		addRecord(fonthx_opentype_tables_NamingRecord.FONT_SUBFAMILY,fnt.get_styleModifiers());
		addRecord(fonthx_opentype_tables_NamingRecord.UNIQUE_NAME,fnt.get_uniqueFamilyName() == null ? null : fnt.get_uniqueFamilyName());
		addRecord(fonthx_opentype_tables_NamingRecord.FULLNAME,fnt.get_fullName());
		addRecord(fonthx_opentype_tables_NamingRecord.VERSION,fnt.get_version());
		addRecord(fonthx_opentype_tables_NamingRecord.PS_NAME,fnt.get_postscriptName());
		addRecord(fonthx_opentype_tables_NamingRecord.TRADEMARK_NOTICE,fnt.get_trademark());
		addRecord(fonthx_opentype_tables_NamingRecord.MANUFACTURER,fnt.get_manufacturerURL());
		addRecord(fonthx_opentype_tables_NamingRecord.DESIGNER,fnt.get_author());
		addRecord(fonthx_opentype_tables_NamingRecord.DESCRIPTION,fnt.get_description());
		addRecord(fonthx_opentype_tables_NamingRecord.VENDOR_URL,fnt.get_vendorURL());
		addRecord(fonthx_opentype_tables_NamingRecord.DESIGNER_URL,fnt.get_URL());
		addRecord(fonthx_opentype_tables_NamingRecord.LICENSE,fnt.get_license());
		if(fnt.get_licenseURL() != null && fnt.get_licenseURL().length > 0) {
			addRecord(fonthx_opentype_tables_NamingRecord.LICENSE_URL,fnt.get_licenseURL());
		}
		addRecord(fonthx_opentype_tables_NamingRecord.SAMPLE_TEXT,fnt.get_sampleText());
		if(options.extraNamingRecords != null) {
			var id = options.extraNamingRecords.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				addRecord(id1,options.extraNamingRecords.h[id1]);
			}
		}
	}
	return table;
};
fonthx_opentype_OpenTypeBuilder.createOS2Table = function(font) {
	var table = new fonthx_opentype_tables_OS2Table();
	var halfEM = font.get_emSquare() / 2 | 0;
	table.setVersion(2).setAvgCharWidth(fonthx_opentype_OpenTypeBuilder.calculateAvgCharWidth(font)).setWeightClass(fonthx_opentype_constants_OS2Weight.NORMAL).setWidthClass(fonthx_opentype_constants_OS2Width.NORMAL).setEmbedding(fonthx_opentype_constants_OS2Embeddable.PREVIEW_AND_PRINT).setYSubscriptXSize(halfEM).setYSubscriptYSize(halfEM).setYSubscriptXOffset(0).setYSubscriptYOffset(font.get_idealDescender() / 2 | 0).setYSuperscriptXSize(halfEM).setYSuperscriptYSize(halfEM).setYSuperscriptXOffset(0).setYSuperscriptYOffset(halfEM).setStrikeoutSize(font.get_emSquare() / 20 | 0).setStrikeoutPosition(font.get_emSquare() / 5 | 0);
	var codepoints = [];
	var _g = 0;
	var _g1 = font.get_glyphs();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		codepoints.push(g.get_codepoint());
		codepoints.push(g.get_codepoint());
	}
	var os2Bits = fonthx_opentype_os2_OS2Ranges.getFunctionalRanges(codepoints);
	var _g2 = 0;
	while(_g2 < os2Bits.length) {
		var bit = os2Bits[_g2];
		++_g2;
		table.addUnicodeRange(bit);
	}
	table.setVendorID(font.get_vendorID()).setFontSelectionFlags(64).setFirstCharIndex(fonthx_opentype_OpenTypeBuilder.getFirstCharCode(font));
	var lastCharCode = fonthx_opentype_OpenTypeBuilder.getLastCharCode(font);
	table.setLastCharIndex(lastCharCode).setTypoAscender(font.get_idealAscender() | 0).setTypoDescender(font.get_idealDescender() | 0).setTypoLineGap(font.get_typoLineGap() | 0).setWinAscent(font.get_realAscender() | 0).setWinDescent(0 - font.get_realDescender() | 0);
	var sxHeight = 0;
	var x = font.getGlyphForCodepoint(120);
	if(x != null && x.getBounds() != null) {
		sxHeight = x.getBounds().height | 0;
	}
	table.setSxHeight(sxHeight);
	var capHeight = 0;
	var H = font.getGlyphForCodepoint(72);
	if(H != null && H.getBounds() != null) {
		capHeight = H.getBounds().height | 0;
	}
	table.setCapHeight(capHeight).setDefaultChar(0).setBreakChar(32);
	var os2Bits1 = fonthx_opentype_os2_OS2Codepages.getFunctionalCodepages(codepoints);
	var _g3 = 0;
	while(_g3 < os2Bits1.length) {
		var bit1 = os2Bits1[_g3];
		++_g3;
		table.addCodePage(bit1);
	}
	return table;
};
fonthx_opentype_OpenTypeBuilder.createKerningTable = function(font) {
	var table = new fonthx_opentype_tables_KerningTable();
	table.setKerningPairs(font.getKerningPairs());
	return table;
};
fonthx_opentype_OpenTypeBuilder.createGPOSTable = function(font) {
	var table = new fonthx_opentype_tables_opentype_GPOSTable();
	table.setLayout(font.get_gposLayout());
	return table;
};
fonthx_opentype_OpenTypeBuilder.createGSUBTable = function(font) {
	var table = new fonthx_opentype_tables_opentype_GSUBTable();
	table.setLayout(font.get_gsubLayout());
	return table;
};
fonthx_opentype_OpenTypeBuilder.createCFFTable = function(font,options) {
	var table = new fonthx_opentype_cff_CFF(font,options);
	return table;
};
fonthx_opentype_OpenTypeBuilder.ensureRequiredGlyphs = function(f) {
	var space = f.getGlyphForCodepoint(32);
	var autoSpace = space == null;
	var autoSpace1 = autoSpace;
};
fonthx_opentype_OpenTypeBuilder.calculateAvgCharWidth = function(font) {
	var totalWidth = 0;
	var numWidths = 0;
	var _g = 0;
	var _g1 = font.get_glyphs();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		var w = g.get_advancedWidth();
		if(w > 0) {
			totalWidth += w;
			++numWidths;
		}
	}
	var averageWidth = Math.floor(totalWidth / numWidths) | 0;
	return averageWidth;
};
fonthx_opentype_OpenTypeBuilder.getFirstCharCode = function(fnt) {
	var first = Lambda.fold(fnt.get_glyphs(),function(g,acc) {
		if(g.unmapped == false && g.get_codepoint() > 1 && g.get_codepoint() < acc) {
			return g.get_codepoint();
		} else {
			return acc;
		}
	},fonthx_utils_MathUtils.MAX_INT);
	if(first == fonthx_utils_MathUtils.MAX_INT) {
		return 0;
	} else {
		return first;
	}
};
fonthx_opentype_OpenTypeBuilder.getLastCharCode = function(fnt) {
	return Lambda.fold(fnt.get_glyphs(),function(g,acc) {
		if(g.get_codepoint() < 65535 && g.get_codepoint() > acc) {
			return g.get_codepoint();
		} else {
			return acc;
		}
	},0);
};
fonthx_opentype_OpenTypeBuilder.calculateChecksum = function(bytes) {
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var checksum = this1;
	var numBytes = bytes.length;
	var i = 0;
	while(i < numBytes) {
		var x = (bytes.b[i] << 24) + (bytes.b[i + 1] << 16) + (bytes.b[i + 2] << 8) + bytes.b[i + 3];
		var this2 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		var b = this2;
		var high = checksum.high + b.high | 0;
		var low = checksum.low + b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,checksum.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var this3 = new haxe__$Int64__$_$_$Int64(high,low);
		checksum = this3;
		i += 4;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(1,0);
	checksum = haxe__$Int64_Int64_$Impl_$.divMod(checksum,this4).modulus;
	return checksum.low;
};
var fonthx_opentype_OpenTypeFont = function(tdir) {
	this.tdir = tdir;
	this.tables = new haxe_ds_StringMap();
	var _this = this.tables;
	var key = tdir.tag;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,tdir);
	} else {
		_this.h[key] = tdir;
	}
};
fonthx_opentype_OpenTypeFont.__name__ = ["fonthx","opentype","OpenTypeFont"];
fonthx_opentype_OpenTypeFont.prototype = {
	tables: null
	,tdir: null
	,addTable: function(t) {
		var _this = this.tables;
		var key = t.tag;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,t);
		} else {
			_this.h[key] = t;
		}
		if(t.tag == fonthx_opentype_tables_Table.SFNT || t.tag == fonthx_opentype_tables_Table.TDIR) {
			return;
		}
		this.tdir.addEntry(new fonthx_opentype_tables_TableDirectoryEntry(t));
	}
	,getTable: function(tag) {
		var _this = this.tables;
		if(__map_reserved[tag] != null) {
			return _this.getReserved(tag);
		} else {
			return _this.h[tag];
		}
	}
	,getTables: function() {
		return this.tables;
	}
	,getNumTables: function() {
		var size = Lambda.count(this.tables);
		var _this = this.tables;
		var key = fonthx_opentype_tables_Table.SFNT;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			--size;
		}
		var _this1 = this.tables;
		var key1 = fonthx_opentype_tables_Table.TDIR;
		if(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1)) {
			--size;
		}
		return size;
	}
	,__class__: fonthx_opentype_OpenTypeFont
};
var fonthx_opentype_tables_Table = function(tag) {
	if(tag == null) {
		tag = "";
	}
	this.tag = tag;
	this.offset = 0;
	this.length = 0;
	this.checksum = 0;
};
fonthx_opentype_tables_Table.__name__ = ["fonthx","opentype","tables","Table"];
fonthx_opentype_tables_Table.prototype = {
	tag: null
	,offset: null
	,length: null
	,checksum: null
	,write: function(tt) {
	}
	,__class__: fonthx_opentype_tables_Table
};
var fonthx_opentype_cff_CFF = function(font,options) {
	this.options = options;
	this.font = font;
	this.strings = new fonthx_opentype_cff_Strings();
	this.sections = new haxe_ds_StringMap();
	this.charstrings = new fonthx_opentype_cff_charstrings_Charstrings();
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.CFF);
};
fonthx_opentype_cff_CFF.__name__ = ["fonthx","opentype","cff","CFF"];
fonthx_opentype_cff_CFF.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_cff_CFF.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	font: null
	,strings: null
	,sections: null
	,options: null
	,charstrings: null
	,offSize: null
	,write: function(tt) {
		this.createNameIndex();
		this.createCharstringsIndex();
		this.createGlobalSubrsIndex();
		this.createPrivateDict();
		var topDict = this.createTopDict();
		this.createStringsIndex();
		this.createCharsets();
		this.offSize = 4;
		this.length += 4;
		this.length += 64;
		if(this.length < 255) {
			this.offSize = 1;
		} else if(this.length < 65535) {
			this.offSize = 2;
		} else if(this.length < 16777215) {
			this.offSize = 3;
		}
		this.createHeader();
		var topDictBaseLength = topDict.bytes.b.length + 4;
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.HEADER;
		var baseOffset = (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).length;
		var _this1 = this.sections;
		var key1 = fonthx_opentype_cff_CFF.NAME_INDEX;
		var baseOffset1 = baseOffset + (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).length + topDictBaseLength;
		var _this2 = this.sections;
		var key2 = fonthx_opentype_cff_CFF.STRING_INDEX;
		var baseOffset2 = baseOffset1 + (__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]).length;
		var _this3 = this.sections;
		var key3 = fonthx_opentype_cff_CFF.GLOBAL_SUBR_INDEX;
		var baseOffset3 = baseOffset2 + (__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]).length;
		var topDictOffsets;
		var topDictOffsetsLength = 0;
		var lastOffsetsLength = 0;
		while(true) {
			lastOffsetsLength = topDictOffsetsLength;
			topDictOffsets = new fonthx_opentype_cff_Dictionary();
			topDictOffsets.addInt(15,baseOffset3 + topDictOffsetsLength + 1);
			var _this4 = this.sections;
			var key4 = fonthx_opentype_cff_CFF.CHARSETS;
			topDictOffsets.addInt(17,baseOffset3 + topDictOffsetsLength + (__map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4]).length + 1);
			topDictOffsetsLength = topDictOffsets.bytes.b.length;
			if(!(topDictOffsetsLength - lastOffsetsLength != 0)) {
				break;
			}
		}
		var topDictOffsetBytes = topDictOffsets.bytes.getBytes();
		var _this5 = topDict.bytes;
		var len = topDictOffsetBytes.length;
		if(len < 0 || len > topDictOffsetBytes.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this5.b;
		var b2 = topDictOffsetBytes.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			_this5.b.push(b2[i]);
		}
		var tdiw = new fonthx_opentype_writers_TrueTypeFileWriter();
		tdiw.writeByteBlockIndex([topDict.bytes.getBytes()]);
		var _this6 = this.sections;
		var key5 = fonthx_opentype_cff_CFF.TOP_DICT_INDEX;
		var value = tdiw.getBytes();
		if(__map_reserved[key5] != null) {
			_this6.setReserved(key5,value);
		} else {
			_this6.h[key5] = value;
		}
		var sectionOrder = [fonthx_opentype_cff_CFF.HEADER,fonthx_opentype_cff_CFF.NAME_INDEX,fonthx_opentype_cff_CFF.TOP_DICT_INDEX,fonthx_opentype_cff_CFF.STRING_INDEX,fonthx_opentype_cff_CFF.GLOBAL_SUBR_INDEX,fonthx_opentype_cff_CFF.CHARSETS,fonthx_opentype_cff_CFF.CHARSTRINGS_INDEX,fonthx_opentype_cff_CFF.PRIVATE_DICT];
		var _g2 = 0;
		while(_g2 < sectionOrder.length) {
			var sectionKey = sectionOrder[_g2];
			++_g2;
			var _this7 = this.sections;
			tt.writeBytes(__map_reserved[sectionKey] != null ? _this7.getReserved(sectionKey) : _this7.h[sectionKey]);
		}
	}
	,createHeader: function() {
		var tt = this.createWriter();
		tt.writeCard8(1);
		tt.writeCard8(0);
		tt.writeCard8(4);
		tt.writeByte(this.offSize);
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.HEADER;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createTopDict: function() {
		var topDict = new fonthx_opentype_cff_Dictionary();
		topDict.addInt(0,this.strings.require(Std.string(this.font.get_version())));
		if(this.font.get_description().length > 0) {
			topDict.addInt(1,this.strings.require(this.font.get_description()));
		}
		if(this.font.get_copyright().length > 0) {
			topDict.addInt(3072 | 0,this.strings.require(this.font.get_copyright()));
		}
		topDict.addInt(2,this.strings.require(this.font.get_fullName()));
		topDict.addInt(3,this.strings.require(this.font.get_uniqueFamilyName()));
		topDict.addInt(4,this.strings.require(this.font.get_style()));
		topDict.addBoolean(3072 | 1,this.font.isFixedPitch());
		topDict.addReal(3072 | 2,this.font.getItalicAngle());
		topDict.addInt(3072 | 3,this.font.getUnderlinePosition());
		topDict.addInt(3072 | 4,this.font.getUnderlineThickness());
		topDict.addInt(3072 | 6,2);
		topDict.addInt(16,0);
		topDict.addIntArray(18,[0,0]);
		this.length += topDict.bytes.b.length;
		return topDict;
	}
	,createNameIndex: function() {
		var tt = this.createWriter();
		var _this_r = new RegExp("[\\[\\]\\(\\)\\{\\}/<>%\\s]+","g".split("u").join(""));
		var name = HxOverrides.substr(this.font.get_postscriptName().replace(_this_r,""),0,126);
		tt.writeStringsIndex([name]);
		this.length += tt.getPosition();
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.NAME_INDEX;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createGlobalSubrsIndex: function() {
		var tt = this.createWriter();
		tt.writeByteBlockIndex(this.charstrings.subrs.map(function(s) {
			s.addOperation(new fonthx_opentype_cff_charstrings_IntegerOperation(11));
			return s.getBytes(false).getBytes();
		}));
		this.length += tt.getPosition();
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.GLOBAL_SUBR_INDEX;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createCharsets: function() {
		var tt = this.createWriter();
		fonthx_opentype_cff_Charsets.write(tt,this.font,this.strings);
		this.length += tt.getPosition();
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.CHARSETS;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createPrivateDict: function() {
		var tt = this.createWriter();
		this.length += tt.getPosition();
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.PRIVATE_DICT;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createCharstringsIndex: function() {
		var tt = this.createWriter();
		this.charstrings.write(tt,this.font,this.options);
		this.length += tt.getPosition();
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.CHARSTRINGS_INDEX;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createStringsIndex: function() {
		var tt = this.createWriter();
		var _g = 0;
		var _g1 = this.font.get_glyphs();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.get_codepoint() == 0) {
				continue;
			}
			this.strings.require(g.get_name());
		}
		tt.writeStringsIndex(this.strings.custom());
		this.length += tt.getPosition();
		var _this = this.sections;
		var key = fonthx_opentype_cff_CFF.STRING_INDEX;
		var value = tt.getBytes();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,createWriter: function() {
		return new fonthx_opentype_writers_TrueTypeFileWriter();
	}
	,__class__: fonthx_opentype_cff_CFF
});
var fonthx_opentype_cff_Charsets = function() { };
fonthx_opentype_cff_Charsets.__name__ = ["fonthx","opentype","cff","Charsets"];
fonthx_opentype_cff_Charsets.write = function(tt,f,strings) {
	var notdef = ".notdef";
	var ranges = [];
	var first = -1;
	var end = 0;
	var _g = 0;
	var _g1 = f.get_glyphs();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		if(g.get_name() == notdef) {
			continue;
		}
		var sid = strings.sid(g.get_name());
		if(sid != -1) {
			if(first == -1) {
				first = sid;
			} else if(sid != end + 1) {
				ranges.push(new fonthx_opentype_cff__$Charsets_SIDRange(first,end - first));
				first = sid;
			}
			end = sid;
		} else {
			console.log("SID not found for " + g.get_name());
		}
	}
	if(end > 0) {
		ranges.push(new fonthx_opentype_cff__$Charsets_SIDRange(first,end - first));
	}
	var format = 0;
	if(ranges.length < f.get_glyphs().length * 0.9) {
		format = 1;
		var maxRange = Lambda.fold(ranges,function(r,acc) {
			if(r.length() > acc) {
				acc = r.length();
			}
			return acc;
		},0);
		if(maxRange > 255) {
			format = 2;
		}
	}
	tt.writeCard8(format);
	if(format == 0) {
		var _g2 = 0;
		var _g11 = f.get_glyphs();
		while(_g2 < _g11.length) {
			var g1 = _g11[_g2];
			++_g2;
			if(g1.get_name() == notdef) {
				continue;
			}
			var sid1 = strings.sid(g1.get_name());
			if(sid1 != -1) {
				tt.writeUINT16(sid1);
			}
		}
	} else {
		var _g3 = 0;
		while(_g3 < ranges.length) {
			var r1 = ranges[_g3];
			++_g3;
			tt.writeCard16(r1.first);
			if(format == 1) {
				tt.writeCard8(r1.remaining);
			} else {
				tt.writeCard16(r1.remaining);
			}
		}
	}
};
var fonthx_opentype_cff__$Charsets_SIDRange = function(first,remaining) {
	this.first = first;
	this.remaining = remaining;
};
fonthx_opentype_cff__$Charsets_SIDRange.__name__ = ["fonthx","opentype","cff","_Charsets","SIDRange"];
fonthx_opentype_cff__$Charsets_SIDRange.prototype = {
	first: null
	,remaining: null
	,length: function() {
		return this.remaining;
	}
	,toString: function() {
		return "" + this.first + "…" + this.remaining;
	}
	,__class__: fonthx_opentype_cff__$Charsets_SIDRange
};
var fonthx_opentype_cff_Dictionary = function(bytes) {
	if(bytes == null) {
		this.bytes = new haxe_io_BytesBuffer();
	}
};
fonthx_opentype_cff_Dictionary.__name__ = ["fonthx","opentype","cff","Dictionary"];
fonthx_opentype_cff_Dictionary.prototype = {
	bytes: null
	,addInt: function(k,v) {
		fonthx_opentype_postscript_Encoder.encodeInt(this.bytes,v);
		fonthx_opentype_postscript_Encoder.encodeOperator(this.bytes,k);
	}
	,addBoolean: function(k,b) {
		this.addInt(k,b ? 1 : 0);
	}
	,addReal: function(k,f) {
		fonthx_opentype_postscript_Encoder.encodeFloat(this.bytes,f);
		fonthx_opentype_postscript_Encoder.encodeOperator(this.bytes,k);
	}
	,addIntArray: function(k,v) {
		var _g = 0;
		while(_g < v.length) {
			var i = v[_g];
			++_g;
			fonthx_opentype_postscript_Encoder.encodeInt(this.bytes,i);
		}
		fonthx_opentype_postscript_Encoder.encodeOperator(this.bytes,k);
	}
	,addByte: function(b) {
		this.bytes.b.push(b);
	}
	,addOperator: function(k) {
		fonthx_opentype_postscript_Encoder.encodeOperator(this.bytes,k);
	}
	,__class__: fonthx_opentype_cff_Dictionary
};
var fonthx_opentype_cff_Strings = function() {
	this.strings = fonthx_opentype_cff_Strings.standards.slice();
};
fonthx_opentype_cff_Strings.__name__ = ["fonthx","opentype","cff","Strings"];
fonthx_opentype_cff_Strings.prototype = {
	strings: null
	,has: function(s) {
		return this.strings.indexOf(s) != -1;
	}
	,add: function(s) {
		this.strings.push(s);
		return this.strings.length - 1;
	}
	,get: function(idx) {
		return this.strings[idx];
	}
	,sid: function(s) {
		return this.strings.indexOf(s);
	}
	,require: function(s) {
		if(s == null) {
			return -1;
		}
		if(!this.has(s)) {
			return this.add(s);
		}
		return this.strings.indexOf(s);
	}
	,custom: function() {
		return this.strings.slice(fonthx_opentype_cff_Strings.standards.length);
	}
	,toString: function() {
		return this.strings.toString();
	}
	,__class__: fonthx_opentype_cff_Strings
};
var fonthx_opentype_cff_charstrings_IOperation = function() { };
fonthx_opentype_cff_charstrings_IOperation.__name__ = ["fonthx","opentype","cff","charstrings","IOperation"];
fonthx_opentype_cff_charstrings_IOperation.prototype = {
	get_lastPoint: null
	,get_bytes: null
	,op: null
	,__class__: fonthx_opentype_cff_charstrings_IOperation
	,__properties__: {get_lastPoint:"get_lastPoint",get_bytes:"get_bytes"}
};
var fonthx_opentype_cff_charstrings_AbstractOperation = function(op,values) {
	this.op = op;
	this.values = values;
};
fonthx_opentype_cff_charstrings_AbstractOperation.__name__ = ["fonthx","opentype","cff","charstrings","AbstractOperation"];
fonthx_opentype_cff_charstrings_AbstractOperation.__interfaces__ = [fonthx_opentype_cff_charstrings_IOperation];
fonthx_opentype_cff_charstrings_AbstractOperation.prototype = {
	op: null
	,values: null
	,_bytes: null
	,get_bytes: function() {
		if(this._bytes != null) {
			return this._bytes;
		}
		var buffer = new haxe_io_BytesBuffer();
		if(this.values != null) {
			var _g = 0;
			var _g1 = this.values;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				this.encodeValue(buffer,v);
			}
		}
		fonthx_opentype_postscript_Encoder.encodeOperator(buffer,this.op);
		this._bytes = buffer.getBytes();
		return this._bytes;
	}
	,encodeValue: function(b,v) {
		fonthx_opentype_postscript_Encoder.encodeInt(b,v | 0);
	}
	,get_lastPoint: function() {
		if(this.values.length > 1) {
			return [this.values[this.values.length - 2],this.values[this.values.length - 1]];
		} else {
			return null;
		}
	}
	,__class__: fonthx_opentype_cff_charstrings_AbstractOperation
	,__properties__: {get_lastPoint:"get_lastPoint",get_bytes:"get_bytes"}
};
var fonthx_opentype_cff_charstrings_Charstring = function(width,useFixed) {
	if(useFixed == null) {
		useFixed = false;
	}
	this.width = width;
	this.useFixed = useFixed;
	this.subpaths = [];
};
fonthx_opentype_cff_charstrings_Charstring.__name__ = ["fonthx","opentype","cff","charstrings","Charstring"];
fonthx_opentype_cff_charstrings_Charstring.__interfaces__ = [fonthx_model_font_IContourConsumer];
fonthx_opentype_cff_charstrings_Charstring.__super__ = fonthx_model_font_AbstractContourConsumer;
fonthx_opentype_cff_charstrings_Charstring.prototype = $extend(fonthx_model_font_AbstractContourConsumer.prototype,{
	subpaths: null
	,subpath: null
	,useFixed: null
	,width: null
	,pen: null
	,start: function() {
		this.pen = null;
	}
	,startPath: function(props) {
		this.subpath = new fonthx_opentype_cff_charstrings_Subpath();
	}
	,endPath: function() {
		this.subpaths.push(this.subpath);
	}
	,moveTo: function(x,y) {
		if(!this.useFixed) {
			x = Math.round(x);
			y = Math.round(y);
		}
		if(this.pen != null) {
			var dx = x - this.pen.x;
			var dy = y - this.pen.y;
			var tmp = this.pen.x == x && this.pen.y == y;
			if(this.pen.x == x) {
				this.subpath.addOperation(this.createOperation(4,[dy]));
			} else if(this.pen.y == y) {
				this.subpath.addOperation(this.createOperation(22,[dx]));
			} else {
				this.subpath.addOperation(this.createOperation(21,[dx,dy]));
			}
		} else {
			this.subpath.addOperation(this.createOperation(21,[x,y]));
		}
		this.pen = new fonthx_model_geom_Point(x,y);
	}
	,lineTo: function(x,y) {
		if(!this.useFixed) {
			x = Math.round(x);
			y = Math.round(y);
		}
		if(this.pen != null) {
			var dx = x - this.pen.x;
			var dy = y - this.pen.y;
			if(!(this.pen.x == x && this.pen.y == y)) {
				if(this.pen.x == x) {
					this.subpath.addOperation(this.createOperation(7,[dy]));
				} else if(this.pen.y == y) {
					this.subpath.addOperation(this.createOperation(6,[dx]));
				} else {
					this.subpath.addOperation(this.createOperation(5,[dx,dy]));
				}
			}
		} else {
			this.subpath.addOperation(this.createOperation(5,[x,y]));
		}
		this.pen = new fonthx_model_geom_Point(x,y);
	}
	,cubicTo: function(x1,y1,x2,y2,x3,y3) {
		if(!this.useFixed) {
			x1 = Math.round(x1);
			y1 = Math.round(y1);
			x2 = Math.round(x2);
			y2 = Math.round(y2);
			x3 = Math.round(x3);
			y3 = Math.round(y3);
		}
		var x0 = this.pen.x;
		var y0 = this.pen.y;
		this.subpath.addOperation(this.createOperation(8,[x1 - x0,y1 - y0,x2 - x1,y2 - y1,x3 - x2,y3 - y2]));
		this.pen = new fonthx_model_geom_Point(x3,y3);
	}
	,quadTo: function(x1,y1,x2,y2) {
		if(!this.useFixed) {
			x1 = Math.round(x1);
			y1 = Math.round(y1);
			x2 = Math.round(x2);
			y2 = Math.round(y2);
		}
		var x0 = this.pen.x;
		var y0 = this.pen.y;
		this.cubicTo(x0 + 0.66666666666666663 * (x1 - x0),y0 + 0.66666666666666663 * (y1 - y0),x2 + 0.66666666666666663 * (x1 - x2),y2 + 0.66666666666666663 * (y1 - y2),x2,y2);
		this.pen = new fonthx_model_geom_Point(x2,y2);
	}
	,createOperation: function(op,values) {
		if(this.useFixed) {
			return new fonthx_opentype_cff_charstrings_FixedOperation(op,values);
		} else {
			return new fonthx_opentype_cff_charstrings_IntegerOperation(op,values);
		}
	}
	,get_bytes: function() {
		var buffer = new haxe_io_BytesBuffer();
		fonthx_opentype_postscript_Encoder.encodeInt(buffer,this.width | 0);
		var _g = 0;
		var _g1 = this.subpaths;
		while(_g < _g1.length) {
			var subpath = _g1[_g];
			++_g;
			var bytes = subpath.get_bytes();
			var len = bytes.length;
			if(len < 0 || len > bytes.length) {
				throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
			}
			var b1 = buffer.b;
			var b2 = bytes.b;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var i = _g11++;
				buffer.b.push(b2[i]);
			}
		}
		var endOp = this.createOperation(14,[]).get_bytes();
		var len1 = endOp.length;
		if(len1 < 0 || len1 > endOp.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b11 = buffer.b;
		var b21 = endOp.b;
		var _g12 = 0;
		var _g3 = len1;
		while(_g12 < _g3) {
			var i1 = _g12++;
			buffer.b.push(b21[i1]);
		}
		return buffer.getBytes();
	}
	,__class__: fonthx_opentype_cff_charstrings_Charstring
	,__properties__: {get_bytes:"get_bytes"}
});
var fonthx_opentype_cff_charstrings_Charstrings = function() {
	this.charstrings = [];
	this.subrs = [];
	this.subrLookup = new haxe_ds_StringMap();
};
fonthx_opentype_cff_charstrings_Charstrings.__name__ = ["fonthx","opentype","cff","charstrings","Charstrings"];
fonthx_opentype_cff_charstrings_Charstrings.prototype = {
	subrs: null
	,subrLookup: null
	,charstrings: null
	,current: null
	,write: function(tt,f,options) {
		var _g = 0;
		var _g1 = f.get_glyphs();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var charstring = new fonthx_opentype_cff_charstrings_Charstring(g.get_advancedWidth(),options.useFixedCoordinatesInCFF);
			g.walkContours(charstring);
			this.charstrings.push(charstring);
		}
		if(options.useSubroutinesInCFF) {
			var subpathCounts = new haxe_ds_StringMap();
			var _g2 = 0;
			var _g11 = this.charstrings;
			while(_g2 < _g11.length) {
				var charstring1 = _g11[_g2];
				++_g2;
				var _g21 = 0;
				var _g3 = charstring1.subpaths;
				while(_g21 < _g3.length) {
					var subpath = _g3[_g21];
					++_g21;
					var hash = subpath.getHash();
					var tmp;
					if(__map_reserved[hash] != null ? subpathCounts.existsReserved(hash) : subpathCounts.h.hasOwnProperty(hash)) {
						var _this = this.subrLookup;
						tmp = !(__map_reserved[hash] != null ? _this.existsReserved(hash) : _this.h.hasOwnProperty(hash));
					} else {
						tmp = false;
					}
					if(tmp) {
						var _this1 = this.subrLookup;
						var value = this.subrs.length;
						if(__map_reserved[hash] != null) {
							_this1.setReserved(hash,value);
						} else {
							_this1.h[hash] = value;
						}
						this.subrs.push(subpath.clone());
					} else if(__map_reserved[hash] != null) {
						subpathCounts.setReserved(hash,1);
					} else {
						subpathCounts.h[hash] = 1;
					}
				}
			}
			var bias = 32768;
			if(this.subrs.length < 33900) {
				bias = 1131;
			}
			if(this.subrs.length < 1240) {
				bias = 107;
			}
			var subCount = 0;
			var _g4 = 0;
			var _g12 = this.charstrings;
			while(_g4 < _g12.length) {
				var charstring2 = _g12[_g4];
				++_g4;
				var _g22 = 0;
				var _g31 = charstring2.subpaths;
				while(_g22 < _g31.length) {
					var subpath1 = _g31[_g22];
					++_g22;
					var hash1 = subpath1.getHash();
					var _this2 = this.subrLookup;
					if(__map_reserved[hash1] != null ? _this2.existsReserved(hash1) : _this2.h.hasOwnProperty(hash1)) {
						++subCount;
						var _this3 = this.subrLookup;
						subpath1.replaceWithGlobalSubroutine((__map_reserved[hash1] != null ? _this3.getReserved(hash1) : _this3.h[hash1]) - bias);
					}
				}
			}
			console.log("" + subCount + " subroutine calls");
		}
		var charstringBlocks = [];
		var _g5 = 0;
		var _g13 = this.charstrings;
		while(_g5 < _g13.length) {
			var charstring3 = _g13[_g5];
			++_g5;
			charstringBlocks.push(charstring3.get_bytes());
		}
		tt.writeByteBlockIndex(charstringBlocks);
	}
	,__class__: fonthx_opentype_cff_charstrings_Charstrings
};
var fonthx_opentype_cff_charstrings_FixedOperation = function(op,values) {
	fonthx_opentype_cff_charstrings_AbstractOperation.call(this,op,values);
};
fonthx_opentype_cff_charstrings_FixedOperation.__name__ = ["fonthx","opentype","cff","charstrings","FixedOperation"];
fonthx_opentype_cff_charstrings_FixedOperation.__super__ = fonthx_opentype_cff_charstrings_AbstractOperation;
fonthx_opentype_cff_charstrings_FixedOperation.prototype = $extend(fonthx_opentype_cff_charstrings_AbstractOperation.prototype,{
	encodeValue: function(buffer,v) {
		var b = fonthx_opentype_types_Fixed.toFixed(v);
		buffer.b.push(255);
		buffer.b.push(b >>> 24 & 255);
		buffer.b.push(b >>> 16 & 255);
		buffer.b.push(b >>> 8 & 255);
		buffer.b.push(b & 255);
	}
	,__class__: fonthx_opentype_cff_charstrings_FixedOperation
});
var fonthx_opentype_cff_charstrings_IntegerOperation = function(op,values) {
	fonthx_opentype_cff_charstrings_AbstractOperation.call(this,op,values);
};
fonthx_opentype_cff_charstrings_IntegerOperation.__name__ = ["fonthx","opentype","cff","charstrings","IntegerOperation"];
fonthx_opentype_cff_charstrings_IntegerOperation.__super__ = fonthx_opentype_cff_charstrings_AbstractOperation;
fonthx_opentype_cff_charstrings_IntegerOperation.prototype = $extend(fonthx_opentype_cff_charstrings_AbstractOperation.prototype,{
	__class__: fonthx_opentype_cff_charstrings_IntegerOperation
});
var fonthx_opentype_cff_charstrings_Subpath = function() {
	this.ops = [];
};
fonthx_opentype_cff_charstrings_Subpath.__name__ = ["fonthx","opentype","cff","charstrings","Subpath"];
fonthx_opentype_cff_charstrings_Subpath.prototype = {
	ops: null
	,addOperation: function(op) {
		this.ops.push(op);
		this._bytes = null;
	}
	,_hash: null
	,getHash: function(forceRehash) {
		if(forceRehash == null) {
			forceRehash = false;
		}
		if(this._hash == null || forceRehash) {
			this._hash = haxe_crypto_Md5.encode(this.getBytes(false).getBytes().toString()).toString();
		}
		return this._hash;
	}
	,replaceWithGlobalSubroutine: function(subrIdx) {
		var moveTo = this.ops[0];
		this.ops = [];
		this.addOperation(moveTo);
		this.addOperation(new fonthx_opentype_cff_charstrings_IntegerOperation(29,[subrIdx]));
	}
	,_bytes: null
	,get_bytes: function() {
		if(this._bytes == null) {
			this._bytes = this.getBytes().getBytes();
		}
		return this._bytes;
	}
	,clone: function() {
		var s = new fonthx_opentype_cff_charstrings_Subpath();
		var _g = 0;
		var _g1 = this.ops;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			s.addOperation(op);
		}
		return s;
	}
	,getBytes: function(withMoveTo) {
		if(withMoveTo == null) {
			withMoveTo = true;
		}
		var idx = 0;
		return Lambda.fold(this.ops,function(op,b) {
			if(idx != 0 || withMoveTo) {
				var src = op.get_bytes();
				var len = op.get_bytes().length;
				if(len < 0 || len > src.length) {
					throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
				}
				var b1 = b.b;
				var b2 = src.b;
				var _g1 = 0;
				var _g = len;
				while(_g1 < _g) {
					var i = _g1++;
					b.b.push(b2[i]);
				}
			}
			idx += 1;
			return b;
		},new haxe_io_BytesBuffer());
	}
	,__class__: fonthx_opentype_cff_charstrings_Subpath
	,__properties__: {get_bytes:"get_bytes"}
};
var fonthx_opentype_constants_MacStyle = function() { };
fonthx_opentype_constants_MacStyle.__name__ = ["fonthx","opentype","constants","MacStyle"];
var fonthx_opentype_constants_MacintoshEncoding = function() { };
fonthx_opentype_constants_MacintoshEncoding.__name__ = ["fonthx","opentype","constants","MacintoshEncoding"];
var fonthx_opentype_constants_MacintoshLanguages = function() { };
fonthx_opentype_constants_MacintoshLanguages.__name__ = ["fonthx","opentype","constants","MacintoshLanguages"];
var fonthx_opentype_constants_MicrosoftEncoding = function() { };
fonthx_opentype_constants_MicrosoftEncoding.__name__ = ["fonthx","opentype","constants","MicrosoftEncoding"];
var fonthx_opentype_constants_MicrosoftLanguages = function() { };
fonthx_opentype_constants_MicrosoftLanguages.__name__ = ["fonthx","opentype","constants","MicrosoftLanguages"];
var fonthx_opentype_constants_OS2Embeddable = function() { };
fonthx_opentype_constants_OS2Embeddable.__name__ = ["fonthx","opentype","constants","OS2Embeddable"];
var fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$ = {};
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.__name__ = ["fonthx","opentype","constants","_OS2FontSelectionFlags","OS2FontSelectionFlags_Impl_"];
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.toInt = function(this1) {
	return js_Boot.__cast(this1 , Int);
};
var fonthx_opentype_constants_OS2Weight = function() { };
fonthx_opentype_constants_OS2Weight.__name__ = ["fonthx","opentype","constants","OS2Weight"];
var fonthx_opentype_constants_OS2Width = function() { };
fonthx_opentype_constants_OS2Width.__name__ = ["fonthx","opentype","constants","OS2Width"];
var fonthx_opentype_constants_Platform = function() { };
fonthx_opentype_constants_Platform.__name__ = ["fonthx","opentype","constants","Platform"];
var fonthx_opentype_constants_UnicodeEncoding = function() { };
fonthx_opentype_constants_UnicodeEncoding.__name__ = ["fonthx","opentype","constants","UnicodeEncoding"];
var fonthx_opentype_glyph_ContourPoint = function(x,y,flags) {
	if(flags == null) {
		flags = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.flags = flags;
	this.previous = null;
	this.next = null;
};
fonthx_opentype_glyph_ContourPoint.__name__ = ["fonthx","opentype","glyph","ContourPoint"];
fonthx_opentype_glyph_ContourPoint.copy = function(other) {
	var cpy = new fonthx_opentype_glyph_ContourPoint(other.x,other.y,other.flags);
	cpy.previous = other.previous;
	cpy.next = other.next;
	return cpy;
};
fonthx_opentype_glyph_ContourPoint.prototype = {
	x: null
	,y: null
	,flags: null
	,previous: null
	,next: null
	,getHead: function() {
		var p = this;
		while(p.previous != null) p = p.previous;
		return p;
	}
	,isShortY: function() {
		return (this.flags & fonthx_opentype_glyph_ContourPoint.Y_SHORT) == 1;
	}
	,isSameY: function() {
		if((this.flags & fonthx_opentype_glyph_ContourPoint.Y_SAME_OR_SIGN) == 1) {
			return !this.isShortY();
		} else {
			return false;
		}
	}
	,isShortX: function() {
		return (this.flags & fonthx_opentype_glyph_ContourPoint.X_SHORT) == 1;
	}
	,isSameX: function() {
		if((this.flags & fonthx_opentype_glyph_ContourPoint.X_SAME_OR_SIGN) == 1) {
			return !this.isShortX();
		} else {
			return false;
		}
	}
	,isNegatedX: function() {
		if((this.flags & fonthx_opentype_glyph_ContourPoint.X_SAME_OR_SIGN) == 0) {
			return this.isShortX();
		} else {
			return false;
		}
	}
	,isNegatedY: function() {
		if((this.flags & fonthx_opentype_glyph_ContourPoint.Y_SAME_OR_SIGN) == 0) {
			return this.isShortY();
		} else {
			return false;
		}
	}
	,isEnd: function() {
		return this.next == null;
	}
	,equals: function(other) {
		if(this.x == other.x && this.y == other.y) {
			return this.flags == other.flags;
		} else {
			return false;
		}
	}
	,toString: function() {
		return this.x + "," + this.y + " " + (this.isEnd() ? "end" : "");
	}
	,__class__: fonthx_opentype_glyph_ContourPoint
};
var fonthx_opentype_glyph_GlyphDescriptionContourConsumer = function(gDesc) {
	this.gDesc = gDesc;
};
fonthx_opentype_glyph_GlyphDescriptionContourConsumer.__name__ = ["fonthx","opentype","glyph","GlyphDescriptionContourConsumer"];
fonthx_opentype_glyph_GlyphDescriptionContourConsumer.__super__ = fonthx_model_font_AbstractContourConsumer;
fonthx_opentype_glyph_GlyphDescriptionContourConsumer.prototype = $extend(fonthx_model_font_AbstractContourConsumer.prototype,{
	gDesc: null
	,moveTo: function(x,y) {
		this.gDesc.startContour();
		this.gDesc.addPoint(x | 0,y | 0,true);
	}
	,lineTo: function(x,y) {
		this.gDesc.addPoint(x | 0,y | 0,true);
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.gDesc.addPoint(x1 | 0,y1 | 0,false);
		this.gDesc.addPoint(x2 | 0,y2 | 0,true);
	}
	,cubicTo: function(x1,y1,x2,y2,x3,y3) {
		var p0 = new fonthx_model_geom_Point(this.gDesc.lastPoint.x,this.gDesc.lastPoint.y);
		var p1 = new fonthx_model_geom_Point(x1,y1);
		var p2 = new fonthx_model_geom_Point(x2,y2);
		var p3 = new fonthx_model_geom_Point(x3,y3);
		var b = new fonthx_model_geom_CubicBezier(p0,p1,p2,p3);
		var quadPoints = b.toQuadratics();
		var i = 0;
		while(i < quadPoints.length) {
			this.quadTo(quadPoints[i].x,quadPoints[i].y,quadPoints[i + 1].x,quadPoints[i + 1].y);
			i += 2;
		}
	}
	,endPath: function() {
	}
	,__class__: fonthx_opentype_glyph_GlyphDescriptionContourConsumer
});
var fonthx_opentype_glyph_SimpleGlyphDescription = function() {
	this.simpleFlags = true;
	this.points = [];
	this.numContours = 0;
	this.lastPoint = null;
};
fonthx_opentype_glyph_SimpleGlyphDescription.__name__ = ["fonthx","opentype","glyph","SimpleGlyphDescription"];
fonthx_opentype_glyph_SimpleGlyphDescription.prototype = {
	points: null
	,bounds: null
	,numContours: null
	,lastPoint: null
	,simpleFlags: null
	,startContour: function() {
		this.lastPoint = null;
	}
	,closeContour: function() {
		if(this.lastPoint != null) {
			var start = fonthx_opentype_glyph_ContourPoint.copy(this.lastPoint.getHead());
			if(start != this.lastPoint) {
				start.previous = this.lastPoint;
				start.next = null;
			}
			this.points.push(start);
		}
	}
	,addPoint: function(x,y,onCurve) {
		var p = new fonthx_opentype_glyph_ContourPoint(x,y,onCurve ? fonthx_opentype_glyph_ContourPoint.ON_CURVE : fonthx_opentype_glyph_ContourPoint.OFF_CURVE);
		if(this.lastPoint != null && this.lastPoint.equals(p)) {
			return;
		}
		p.previous = this.lastPoint;
		if(!this.simpleFlags) {
			if(p.x > -256 && p.x < 256) {
				p.flags |= fonthx_opentype_glyph_ContourPoint.X_SHORT;
				if(p.x >= 0) {
					p.flags |= fonthx_opentype_glyph_ContourPoint.X_SAME_OR_SIGN;
				}
			} else if(p.previous != null && p.x == p.previous.x) {
				p.flags |= fonthx_opentype_glyph_ContourPoint.X_SAME_OR_SIGN;
			}
			if(p.y > -256 && p.y < 256) {
				p.flags |= fonthx_opentype_glyph_ContourPoint.Y_SHORT;
				if(p.y >= 0) {
					p.flags |= fonthx_opentype_glyph_ContourPoint.Y_SAME_OR_SIGN;
				}
			} else if(p.previous != null && p.y == p.previous.y) {
				p.flags |= fonthx_opentype_glyph_ContourPoint.Y_SAME_OR_SIGN;
			}
		}
		this.points.push(p);
		if(this.lastPoint == null) {
			this.numContours++;
		} else {
			this.lastPoint.next = p;
		}
		this.lastPoint = p;
	}
	,prepareFlags: function() {
		var flags = [];
		var p;
		var currentFlag = -1;
		var repeatCount = 0;
		var lastPoint = null;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			if(lastPoint == null || lastPoint.flags != p1.flags) {
				if(currentFlag != -1 && repeatCount > 0) {
					currentFlag |= fonthx_opentype_glyph_ContourPoint.REPEAT;
				}
				currentFlag = p1.flags;
				flags.push(currentFlag);
				if(repeatCount > 0) {
					flags.push(repeatCount);
					repeatCount = 0;
				}
			}
			if(lastPoint != null && lastPoint.flags == p1.flags) {
				++repeatCount;
			}
			lastPoint = p1;
		}
		if(currentFlag != -1 && repeatCount > 0) {
			currentFlag |= fonthx_opentype_glyph_ContourPoint.REPEAT;
			flags.push(repeatCount);
		}
		return flags;
	}
	,write: function(tt) {
		if(this.numContours == 0) {
			return;
		}
		tt.markPosition();
		var endPtsOfContours = [];
		this.bounds = null;
		var count = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(this.bounds == null) {
				this.bounds = new fonthx_model_geom_Rectangle(p.x,p.y,0,0);
			} else {
				this.bounds.add(p.x,p.y);
			}
			if(p.isEnd()) {
				endPtsOfContours.push(count);
			}
			++count;
		}
		if(this.bounds == null) {
			this.bounds = new fonthx_model_geom_Rectangle();
		}
		tt.writeSHORT(this.numContours).writeSHORT(this.bounds.get_left() | 0).writeSHORT(this.bounds.get_top() | 0).writeSHORT(this.bounds.get_right() | 0).writeSHORT(this.bounds.get_bottom() | 0);
		var _g2 = 0;
		while(_g2 < endPtsOfContours.length) {
			var endPt = endPtsOfContours[_g2];
			++_g2;
			tt.writeUSHORT(endPt);
		}
		tt.writeSHORT(0);
		if(this.simpleFlags) {
			var _g3 = 0;
			var _g11 = this.points;
			while(_g3 < _g11.length) {
				var p1 = _g11[_g3];
				++_g3;
				tt.writeByte(p1.flags);
			}
		} else {
			var flags = this.prepareFlags();
			var _g4 = 0;
			while(_g4 < flags.length) {
				var flag = flags[_g4];
				++_g4;
				tt.writeByte(flag);
			}
		}
		var x = 0;
		var last = null;
		var _g5 = 0;
		var _g12 = this.points;
		while(_g5 < _g12.length) {
			var p2 = _g12[_g5];
			++_g5;
			x = p2.x - (last == null ? 0 : last.x);
			if(p2.isShortX()) {
				if(p2.isNegatedX()) {
					tt.writeByte(0 - x);
				} else {
					tt.writeByte(x);
				}
			} else if(!p2.isSameX()) {
				tt.writeSHORT(x);
			}
			last = p2;
		}
		var y = 0;
		last = null;
		var _g6 = 0;
		var _g13 = this.points;
		while(_g6 < _g13.length) {
			var p3 = _g13[_g6];
			++_g6;
			y = p3.y - (last == null ? 0 : last.y);
			if(p3.isShortY()) {
				if(p3.isNegatedY()) {
					tt.writeByte(0 - y);
				} else {
					tt.writeByte(y);
				}
			} else if(!p3.isSameY()) {
				tt.writeSHORT(y);
			}
			last = p3;
		}
		tt.pad(true);
	}
	,getNumContours: function() {
		return this.numContours;
	}
	,getPoints: function() {
		return this.points;
	}
	,__class__: fonthx_opentype_glyph_SimpleGlyphDescription
};
var fonthx_opentype_io_IByteWriter = function() { };
fonthx_opentype_io_IByteWriter.__name__ = ["fonthx","opentype","io","IByteWriter"];
fonthx_opentype_io_IByteWriter.prototype = {
	writeByte: null
	,writeBytes: null
	,closeAndFlush: null
	,close: null
	,flush: null
	,getBytes: null
	,__class__: fonthx_opentype_io_IByteWriter
};
var fonthx_opentype_io_ByteWriter = function(src) {
	this.buffer = new haxe_io_BytesBuffer();
	if(src != null) {
		var _this = this.buffer;
		var b1 = _this.b;
		var b2 = src.b;
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
	}
	this.cursor = this.buffer.b.length;
};
fonthx_opentype_io_ByteWriter.__name__ = ["fonthx","opentype","io","ByteWriter"];
fonthx_opentype_io_ByteWriter.__interfaces__ = [fonthx_opentype_io_IByteWriter];
fonthx_opentype_io_ByteWriter.prototype = {
	buffer: null
	,cursor: null
	,getBytes: function() {
		return this.buffer.getBytes();
	}
	,writeByte: function(c) {
		this.buffer.b.push(c);
		this.cursor++;
	}
	,writeBytes: function(s) {
		var _this = this.buffer;
		var b1 = _this.b;
		var b2 = s.b;
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		this.cursor += s.length;
		return this.cursor;
	}
	,close: function() {
	}
	,flush: function() {
	}
	,closeAndFlush: function() {
	}
	,__class__: fonthx_opentype_io_ByteWriter
};
var fonthx_opentype_options_OptionMapTools = function() { };
fonthx_opentype_options_OptionMapTools.__name__ = ["fonthx","opentype","options","OptionMapTools"];
fonthx_opentype_options_OptionMapTools.getBool = function(options,k,def) {
	if(def == null) {
		def = false;
	}
	if(!(__map_reserved[k] != null ? options.existsReserved(k) : options.h.hasOwnProperty(k))) {
		return def;
	}
	var v = __map_reserved[k] != null ? options.getReserved(k) : options.h[k];
	if(v != "1") {
		return v == "true";
	} else {
		return true;
	}
};
fonthx_opentype_options_OptionMapTools.getInt = function(options,k,def) {
	if(def == null) {
		def = -1;
	}
	if(!(__map_reserved[k] != null ? options.existsReserved(k) : options.h.hasOwnProperty(k))) {
		return def;
	}
	return Std.parseInt(__map_reserved[k] != null ? options.getReserved(k) : options.h[k]);
};
fonthx_opentype_options_OptionMapTools.getFloat = function(options,k,def) {
	if(def == null) {
		def = -1;
	}
	if(!(__map_reserved[k] != null ? options.existsReserved(k) : options.h.hasOwnProperty(k))) {
		return def;
	}
	return parseFloat(__map_reserved[k] != null ? options.getReserved(k) : options.h[k]);
};
fonthx_opentype_options_OptionMapTools.getString = function(options,k,def) {
	if(!(__map_reserved[k] != null ? options.existsReserved(k) : options.h.hasOwnProperty(k))) {
		return def;
	}
	return __map_reserved[k] != null ? options.getReserved(k) : options.h[k];
};
fonthx_opentype_options_OptionMapTools.merge = function(defaults,options) {
	var merged = new haxe_ds_StringMap();
	var key = defaults.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var value = __map_reserved[key1] != null ? defaults.getReserved(key1) : defaults.h[key1];
		if(__map_reserved[key1] != null) {
			merged.setReserved(key1,value);
		} else {
			merged.h[key1] = value;
		}
	}
	if(options != null) {
		var key2 = options.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			var value1 = __map_reserved[key3] != null ? options.getReserved(key3) : options.h[key3];
			if(__map_reserved[key3] != null) {
				merged.setReserved(key3,value1);
			} else {
				merged.h[key3] = value1;
			}
		}
	}
	return merged;
};
var fonthx_opentype_os2_OS2Codepage = function(bit,numCodepoints,ranges) {
	this.bit = bit;
	this.numCodepoints = numCodepoints;
	this.ranges = ranges;
};
fonthx_opentype_os2_OS2Codepage.__name__ = ["fonthx","opentype","os2","OS2Codepage"];
fonthx_opentype_os2_OS2Codepage.prototype = {
	bit: null
	,ranges: null
	,numCodepoints: null
	,getCoverage: function(codepoints) {
		var count = 0;
		var _g = 0;
		while(_g < codepoints.length) {
			var cp = codepoints[_g];
			++_g;
			var found = false;
			var i = 0;
			while(i < this.ranges.length) {
				if(cp >= this.ranges[i] && cp <= this.ranges[i + 1]) {
					found = true;
					break;
				}
				i += 2;
			}
			if(found) {
				++count;
			}
		}
		return count / this.numCodepoints;
	}
	,__class__: fonthx_opentype_os2_OS2Codepage
};
var fonthx_opentype_os2_OS2Codepages = function() { };
fonthx_opentype_os2_OS2Codepages.__name__ = ["fonthx","opentype","os2","OS2Codepages"];
fonthx_opentype_os2_OS2Codepages.getFunctionalCodepages = function(codepoints,threshold) {
	if(threshold == null) {
		threshold = 0.5;
	}
	if(fonthx_opentype_os2_OS2Codepages.codepages.length == 0) {
		fonthx_opentype_os2_OS2CompiledCodepages.init();
	}
	var functionalBits = [];
	var _g = 0;
	var _g1 = fonthx_opentype_os2_OS2Codepages.codepages;
	while(_g < _g1.length) {
		var page = _g1[_g];
		++_g;
		if(codepoints.length / page.numCodepoints < threshold) {
			continue;
		}
		if(page.getCoverage(codepoints) > threshold) {
			functionalBits.push(page.bit);
		}
	}
	return functionalBits;
};
var fonthx_opentype_os2_OS2CompiledCodepages = function() { };
fonthx_opentype_os2_OS2CompiledCodepages.__name__ = ["fonthx","opentype","os2","OS2CompiledCodepages"];
fonthx_opentype_os2_OS2CompiledCodepages.init = function() {
	fonthx_opentype_os2_OS2CompiledCodepages.add1252();
	fonthx_opentype_os2_OS2CompiledCodepages.add1250();
	fonthx_opentype_os2_OS2CompiledCodepages.add1251();
	fonthx_opentype_os2_OS2CompiledCodepages.add1253();
	fonthx_opentype_os2_OS2CompiledCodepages.add1254();
	fonthx_opentype_os2_OS2CompiledCodepages.add1255();
	fonthx_opentype_os2_OS2CompiledCodepages.add1256();
	fonthx_opentype_os2_OS2CompiledCodepages.add1257();
	fonthx_opentype_os2_OS2CompiledCodepages.add1258();
	fonthx_opentype_os2_OS2CompiledCodepages.add874();
	fonthx_opentype_os2_OS2CompiledCodepages.add932();
	fonthx_opentype_os2_OS2CompiledCodepages.add936();
	fonthx_opentype_os2_OS2CompiledCodepages.add949();
	fonthx_opentype_os2_OS2CompiledCodepages.add950();
	fonthx_opentype_os2_OS2CompiledCodepages.add1361();
	fonthx_opentype_os2_OS2CompiledCodepages.addMACROMAN();
	fonthx_opentype_os2_OS2CompiledCodepages.add869();
	fonthx_opentype_os2_OS2CompiledCodepages.add866();
	fonthx_opentype_os2_OS2CompiledCodepages.add865();
	fonthx_opentype_os2_OS2CompiledCodepages.add864();
	fonthx_opentype_os2_OS2CompiledCodepages.add863();
	fonthx_opentype_os2_OS2CompiledCodepages.add862();
	fonthx_opentype_os2_OS2CompiledCodepages.add861();
	fonthx_opentype_os2_OS2CompiledCodepages.add860();
	fonthx_opentype_os2_OS2CompiledCodepages.add857();
	fonthx_opentype_os2_OS2CompiledCodepages.add852();
	fonthx_opentype_os2_OS2CompiledCodepages.add775();
	fonthx_opentype_os2_OS2CompiledCodepages.add850();
	fonthx_opentype_os2_OS2CompiledCodepages.add437();
};
fonthx_opentype_os2_OS2CompiledCodepages.add1252 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(0,219,[32,127,160,255,338,339,352,353,376,376,381,382,402,402,710,710,732,732,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1250 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(1,219,[32,127,160,160,164,164,166,169,171,174,176,177,180,184,187,187,193,194,196,196,199,199,201,201,203,203,205,206,211,212,214,215,218,218,220,221,223,223,225,226,228,228,231,231,233,233,235,235,237,238,243,244,246,247,250,250,252,253,258,263,268,273,280,283,313,314,317,318,321,324,327,328,336,337,340,341,344,347,350,357,366,369,377,382,711,711,728,729,731,731,733,733,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1251 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(2,223,[32,127,160,160,164,164,166,167,169,169,171,174,176,177,181,183,187,187,1025,1036,1038,1103,1105,1116,1118,1119,1168,1169,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8470,8470,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1253 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(3,207,[32,127,160,160,163,169,171,174,176,179,181,183,187,187,189,189,402,402,900,902,904,906,908,908,910,929,931,974,8211,8213,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1254 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(4,217,[32,127,160,207,209,220,223,239,241,252,255,255,286,287,304,305,338,339,350,353,376,376,402,402,710,710,732,732,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1255 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(5,201,[32,127,160,163,165,169,171,185,187,191,215,215,247,247,402,402,710,710,732,732,1456,1465,1467,1475,1488,1514,1520,1524,8206,8207,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8362,8362,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1256 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(6,224,[32,127,160,160,162,169,171,185,187,190,215,215,224,224,226,226,231,235,238,239,244,244,247,247,249,249,251,252,338,339,402,402,710,710,1548,1548,1563,1563,1567,1567,1569,1594,1600,1618,1657,1657,1662,1662,1670,1670,1672,1672,1681,1681,1688,1688,1705,1705,1711,1711,1722,1722,1726,1726,1729,1729,1746,1746,8204,8207,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1257 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(7,212,[32,127,160,160,162,164,166,169,171,185,187,190,196,198,201,201,211,211,213,216,220,220,223,223,228,230,233,233,243,243,245,248,252,252,256,257,260,263,268,269,274,275,278,281,290,291,298,299,302,303,310,311,315,316,321,326,332,333,342,343,346,347,352,353,362,363,370,371,377,382,711,711,729,729,731,731,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8364,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1258 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(8,215,[32,127,160,194,196,203,205,207,209,209,211,212,214,220,223,226,228,235,237,239,241,241,243,244,246,252,255,255,258,259,272,273,338,339,376,376,402,402,416,417,431,432,710,710,732,732,768,769,771,771,777,777,803,803,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8363,8364,8482,8482]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add874 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(16,193,[32,127,160,160,3585,3642,3647,3675,8211,8212,8216,8217,8220,8221,8226,8226,8230,8230,8364,8364]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add932 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(17,7883,[32,127,167,168,176,177,180,180,182,182,215,215,247,247,913,929,931,937,945,961,963,969,1025,1025,1040,1103,1105,1105,8208,8208,8213,8213,8216,8217,8220,8221,8224,8225,8229,8230,8240,8240,8242,8243,8251,8251,8451,8451,8470,8470,8470,8470,8481,8481,8481,8481,8491,8491,8544,8544,8544,8545,8545,8546,8546,8547,8547,8548,8548,8549,8549,8550,8550,8551,8551,8552,8552,8553,8553,8553,8560,8560,8560,8561,8561,8562,8562,8563,8563,8564,8564,8565,8565,8566,8566,8567,8567,8568,8568,8569,8569,8569,8592,8595,8658,8658,8660,8660,8704,8704,8706,8707,8711,8712,8715,8715,8721,8721,8730,8730,8730,8730,8733,8736,8736,8736,8741,8741,8743,8745,8745,8746,8746,8747,8747,8748,8750,8750,8756,8757,8757,8757,8757,8757,8765,8765,8786,8786,8786,8786,8800,8801,8801,8801,8806,8807,8810,8811,8834,8835,8838,8839,8869,8869,8869,8869,8895,8895,8978,8978,9312,9331,9472,9475,9484,9484,9487,9488,9491,9492,9495,9496,9499,9501,9504,9504,9507,9509,9512,9512,9515,9516,9519,9520,9523,9524,9527,9528,9531,9532,9535,9535,9538,9538,9547,9547,9632,9633,9650,9651,9660,9661,9670,9671,9675,9675,9678,9679,9711,9711,9733,9734,9792,9792,9794,9794,9834,9834,9837,9837,9839,9839,12288,12291,12293,12309,12317,12317,12319,12319,12353,12435,12443,12446,12449,12534,12539,12542,12849,12849,12849,12850,12857,12857,12964,12968,13059,13059,13069,13069,13076,13076,13080,13080,13090,13091,13094,13095,13099,13099,13110,13110,13115,13115,13129,13130,13133,13133,13137,13137,13143,13143,13179,13182,13198,13199,13212,13214,13217,13217,13252,13252,13261,13261,19968,19969,19971,19971,19975,19979,19981,19982,19984,19985,19988,19993,19998,19998,20001,20001,20006,20006,20008,20008,20008,20008,20010,20010,20013,20013,20017,20018,20022,20022,20024,20025,20027,20028,20031,20031,20034,20035,20037,20037,20043,20043,20045,20047,20053,20057,20061,20063,20066,20066,20081,20081,20083,20083,20094,20094,20096,20096,20098,20098,20101,20102,20104,20108,20110,20110,20113,20114,20116,20117,20120,20121,20123,20124,20126,20130,20132,20134,20136,20136,20139,20142,20144,20144,20147,20147,20150,20150,20154,20154,20160,20162,20164,20164,20166,20167,20170,20171,20173,20175,20180,20185,20189,20191,20193,20193,20193,20193,20195,20197,20205,20206,20208,20208,20210,20210,20214,20215,20219,20220,20220,20220,20224,20224,20224,20225,20227,20227,20227,20227,20233,20234,20237,20241,20250,20250,20252,20253,20271,20272,20276,20276,20278,20278,20280,20281,20281,20282,20284,20285,20291,20291,20294,20295,20301,20305,20307,20307,20309,20310,20310,20311,20313,20318,20329,20329,20335,20336,20339,20339,20341,20342,20347,20348,20351,20351,20355,20355,20358,20358,20360,20360,20362,20362,20362,20363,20365,20365,20367,20367,20369,20370,20370,20370,20372,20372,20372,20372,20374,20374,20376,20376,20378,20378,20378,20379,20381,20381,20384,20385,20395,20395,20397,20399,20405,20406,20415,20415,20418,20420,20425,20425,20425,20426,20429,20429,20429,20430,20432,20433,20436,20436,20439,20440,20442,20443,20445,20445,20447,20447,20449,20449,20451,20453,20462,20463,20467,20467,20469,20470,20472,20472,20474,20474,20478,20479,20479,20479,20485,20486,20489,20489,20491,20491,20493,20493,20495,20495,20497,20498,20500,20500,20502,20502,20505,20506,20510,20510,20510,20511,20513,20514,20514,20518,20520,20525,20534,20534,20537,20537,20544,20544,20544,20544,20546,20546,20546,20547,20550,20550,20550,20553,20559,20560,20565,20566,20570,20570,20572,20572,20581,20581,20588,20588,20592,20592,20592,20592,20594,20594,20596,20598,20600,20600,20605,20605,20608,20608,20613,20613,20621,20621,20625,20625,20628,20628,20628,20628,20632,20634,20652,20653,20658,20661,20663,20663,20670,20670,20674,20674,20677,20677,20681,20682,20685,20685,20687,20687,20689,20689,20693,20694,20696,20696,20696,20696,20698,20698,20702,20702,20707,20707,20709,20709,20711,20711,20717,20718,20724,20724,20724,20725,20729,20729,20731,20731,20736,20738,20740,20740,20745,20745,20754,20754,20756,20758,20760,20760,20762,20762,20767,20767,20769,20769,20778,20778,20786,20786,20791,20791,20794,20796,20799,20801,20803,20810,20810,20814,20816,20816,20818,20818,20820,20820,20826,20826,20828,20828,20834,20834,20836,20836,20836,20837,20840,20846,20849,20849,20853,20856,20860,20860,20864,20864,20866,20866,20869,20870,20873,20874,20876,20877,20879,20883,20885,20887,20889,20889,20893,20893,20893,20893,20896,20896,20898,20898,20900,20902,20904,20908,20912,20919,20925,20926,20926,20926,20932,20934,20937,20937,20939,20941,20950,20950,20955,20957,20960,20961,20966,20967,20969,20970,20972,20972,20972,20973,20976,20977,20981,20982,20984,20986,20989,20990,20992,20992,20995,20996,20998,21000,21002,21003,21006,21006,21009,21009,21012,21013,21013,21013,21015,21015,21021,21021,21028,21029,21031,21031,21033,21034,21038,21038,21040,21040,21043,21043,21046,21051,21059,21060,21063,21063,21066,21069,21071,21071,21076,21076,21078,21078,21083,21083,21086,21086,21091,21093,21097,21098,21103,21109,21117,21117,21119,21119,21123,21123,21127,21129,21133,21133,21137,21138,21140,21140,21147,21148,21148,21148,21151,21152,21155,21155,21158,21158,21158,21158,21161,21165,21167,21167,21167,21167,21169,21169,21172,21173,21177,21177,21180,21180,21182,21182,21184,21184,21184,21185,21187,21187,21189,21189,21191,21191,21193,21193,21197,21197,21202,21202,21205,21205,21207,21209,21211,21211,21211,21211,21213,21216,21218,21220,21222,21223,21234,21235,21237,21237,21240,21242,21246,21248,21248,21250,21253,21255,21255,21256,21261,21261,21263,21264,21269,21271,21273,21274,21277,21277,21280,21281,21283,21284,21284,21284,21290,21290,21295,21295,21297,21297,21299,21299,21304,21307,21311,21313,21315,21315,21317,21322,21325,21325,21329,21332,21335,21336,21338,21338,21340,21340,21342,21342,21344,21344,21350,21350,21353,21353,21358,21362,21362,21365,21367,21368,21371,21371,21375,21375,21378,21378,21380,21380,21395,21395,21395,21395,21398,21398,21400,21400,21402,21402,21407,21408,21413,21414,21416,21417,21421,21422,21424,21424,21426,21426,21426,21427,21430,21430,21435,21435,21442,21443,21448,21454,21460,21460,21462,21463,21465,21465,21467,21467,21469,21469,21469,21469,21471,21471,21473,21477,21480,21491,21494,21496,21498,21498,21505,21505,21507,21508,21512,21521,21531,21531,21533,21533,21535,21536,21542,21542,21545,21545,21547,21550,21558,21558,21560,21561,21563,21566,21568,21568,21570,21570,21574,21574,21576,21578,21582,21582,21585,21585,21599,21599,21608,21608,21610,21610,21616,21617,21619,21619,21621,21623,21627,21629,21632,21632,21636,21636,21638,21638,21642,21642,21642,21644,21646,21648,21650,21650,21660,21660,21660,21660,21666,21666,21668,21669,21672,21673,21673,21673,21675,21676,21679,21679,21682,21683,21688,21688,21692,21694,21696,21698,21700,21700,21703,21705,21720,21720,21729,21730,21733,21734,21736,21737,21741,21742,21746,21746,21754,21754,21757,21757,21759,21759,21759,21759,21764,21764,21766,21767,21775,21776,21780,21780,21782,21782,21806,21807,21809,21809,21811,21811,21816,21817,21822,21822,21824,21824,21828,21830,21836,21836,21839,21839,21843,21843,21846,21847,21852,21853,21859,21859,21883,21884,21886,21886,21888,21888,21891,21892,21894,21894,21894,21895,21897,21899,21912,21914,21916,21919,21927,21932,21934,21934,21936,21936,21942,21942,21956,21957,21959,21959,21972,21972,21978,21978,21980,21980,21983,21983,21987,21988,22007,22007,22009,22009,22013,22014,22022,22022,22025,22025,22036,22036,22038,22040,22043,22043,22057,22057,22063,22063,22065,22066,22068,22068,22070,22070,22072,22072,22082,22082,22092,22092,22094,22094,22096,22096,22107,22107,22116,22116,22120,22120,22122,22124,22132,22132,22136,22136,22138,22138,22144,22144,22150,22151,22154,22154,22159,22159,22164,22164,22176,22176,22178,22178,22181,22181,22190,22190,22196,22196,22198,22198,22204,22204,22208,22211,22216,22216,22222,22222,22225,22225,22227,22227,22231,22232,22234,22235,22238,22238,22240,22240,22243,22243,22254,22254,22256,22256,22258,22259,22265,22266,22269,22269,22271,22272,22275,22276,22280,22281,22283,22283,22285,22285,22287,22287,22290,22291,22294,22294,22296,22296,22300,22300,22303,22303,22310,22312,22317,22317,22320,22320,22327,22328,22331,22331,22336,22336,22338,22338,22343,22343,22346,22346,22350,22353,22361,22361,22361,22361,22369,22369,22372,22373,22373,22374,22377,22378,22399,22399,22402,22402,22408,22409,22411,22411,22419,22419,22432,22432,22434,22436,22442,22442,22444,22444,22444,22444,22448,22448,22451,22451,22464,22464,22467,22467,22470,22471,22471,22472,22472,22472,22475,22475,22478,22478,22482,22484,22486,22486,22492,22492,22495,22496,22499,22499,22516,22516,22519,22519,22521,22522,22524,22524,22528,22528,22530,22530,22533,22534,22538,22539,22549,22549,22553,22553,22557,22557,22561,22561,22564,22564,22570,22570,22575,22577,22580,22581,22586,22586,22589,22589,22592,22593,22602,22603,22609,22610,22612,22612,22615,22618,22622,22622,22626,22626,22633,22633,22635,22635,22640,22640,22642,22642,22645,22645,22649,22649,22654,22654,22659,22659,22661,22661,22675,22675,22679,22679,22684,22684,22686,22686,22686,22687,22696,22696,22699,22699,22702,22702,22706,22706,22706,22707,22712,22715,22718,22718,22721,22721,22725,22725,22727,22727,22730,22730,22732,22732,22737,22737,22739,22739,22741,22741,22743,22745,22748,22748,22750,22751,22756,22757,22763,22764,22766,22770,22775,22775,22777,22781,22786,22786,22793,22795,22795,22795,22799,22800,22805,22806,22808,22812,22818,22818,22821,22821,22823,22823,22825,22830,22833,22834,22839,22840,22846,22846,22852,22852,22855,22857,22862,22865,22867,22867,22867,22869,22871,22872,22874,22875,22875,22875,22877,22877,22877,22877,22880,22880,22882,22883,22883,22883,22885,22885,22887,22890,22892,22892,22894,22894,22899,22900,22904,22904,22909,22909,22913,22916,22922,22922,22925,22925,22931,22931,22934,22934,22937,22937,22939,22939,22941,22941,22947,22948,22948,22949,22952,22952,22956,22956,22962,22962,22969,22970,22970,22971,22974,22974,22982,22982,22985,22985,22987,22987,22992,22993,22995,22996,23001,23002,23004,23004,23013,23014,23016,23016,23018,23019,23030,23030,23035,23035,23039,23039,23041,23041,23043,23043,23049,23049,23057,23057,23064,23064,23066,23066,23068,23068,23071,23072,23077,23077,23081,23081,23087,23087,23093,23094,23100,23100,23104,23105,23110,23110,23113,23113,23130,23130,23138,23138,23142,23142,23146,23146,23148,23148,23167,23167,23186,23186,23194,23195,23228,23230,23233,23234,23241,23241,23243,23244,23248,23248,23254,23255,23265,23265,23267,23267,23270,23270,23273,23273,23290,23291,23305,23305,23307,23308,23318,23318,23330,23330,23338,23338,23340,23340,23344,23344,23346,23346,23350,23350,23358,23358,23360,23360,23363,23363,23365,23365,23376,23377,23380,23382,23382,23384,23386,23389,23391,23391,23395,23398,23401,23401,23403,23403,23408,23409,23411,23411,23413,23413,23416,23416,23418,23418,23424,23424,23427,23427,23429,23429,23431,23433,23435,23437,23439,23439,23445,23445,23447,23453,23455,23455,23458,23462,23470,23470,23472,23472,23475,23478,23480,23481,23487,23488,23488,23488,23490,23495,23497,23497,23500,23500,23504,23504,23506,23508,23512,23512,23512,23512,23515,23515,23517,23519,23521,23522,23524,23529,23531,23532,23532,23532,23534,23534,23536,23536,23539,23539,23541,23542,23544,23544,23546,23546,23550,23551,23553,23554,23556,23563,23565,23567,23569,23569,23571,23571,23574,23574,23578,23578,23582,23582,23582,23582,23584,23584,23586,23586,23588,23588,23592,23592,23597,23597,23601,23601,23608,23617,23621,23622,23624,23624,23626,23627,23629,23633,23635,23635,23637,23637,23646,23646,23648,23649,23652,23653,23660,23660,23662,23663,23665,23665,23670,23670,23673,23673,23692,23692,23696,23697,23700,23700,23713,23713,23718,23718,23718,23718,23720,23721,23723,23724,23729,23729,23731,23731,23734,23736,23738,23738,23738,23740,23742,23742,23749,23749,23751,23751,23769,23769,23776,23777,23784,23786,23789,23789,23791,23792,23797,23797,23797,23798,23802,23803,23805,23805,23815,23815,23819,23819,23822,23822,23825,23825,23828,23835,23839,23839,23842,23842,23847,23847,23847,23847,23849,23849,23874,23874,23874,23874,23883,23884,23886,23886,23888,23888,23890,23891,23891,23891,23900,23900,23913,23913,23916,23917,23917,23917,23919,23919,23923,23923,23926,23926,23938,23938,23940,23940,23943,23943,23947,23948,23952,23952,23965,23965,23970,23970,23980,23980,23982,23982,23991,23992,23992,23993,23993,23994,23996,23997,24009,24009,24012,24013,24016,24016,24016,24016,24018,24019,24022,24022,24027,24027,24029,24030,24033,24033,24035,24035,24037,24040,24043,24043,24046,24046,24049,24053,24055,24055,24059,24059,24061,24062,24066,24067,24070,24070,24075,24076,24081,24081,24086,24086,24089,24091,24093,24093,24101,24101,24107,24107,24109,24109,24111,24112,24115,24115,24118,24120,24125,24125,24128,24128,24131,24133,24135,24135,24140,24140,24142,24142,24148,24149,24151,24151,24159,24159,24161,24164,24178,24182,24184,24191,24193,24193,24195,24196,24199,24199,24202,24202,24207,24207,24213,24215,24218,24218,24220,24220,24224,24224,24230,24231,24235,24235,24237,24237,24245,24248,24257,24259,24264,24266,24271,24272,24275,24275,24278,24278,24282,24283,24285,24285,24287,24291,24296,24297,24300,24300,24304,24305,24307,24308,24310,24312,24314,24316,24318,24319,24321,24321,24323,24324,24329,24333,24335,24337,24339,24344,24347,24347,24351,24351,24353,24353,24353,24353,24357,24359,24361,24361,24365,24365,24367,24367,24369,24369,24372,24372,24372,24373,24375,24376,24380,24380,24382,24382,24385,24385,24389,24389,24389,24389,24392,24392,24394,24394,24396,24396,24398,24398,24401,24401,24403,24403,24406,24407,24409,24409,24412,24413,24417,24418,24422,24423,24423,24423,24425,24429,24432,24433,24435,24435,24439,24439,24441,24441,24444,24444,24447,24453,24455,24456,24458,24460,24464,24467,24471,24473,24478,24478,24480,24481,24488,24490,24493,24494,24499,24500,24503,24503,24503,24503,24505,24505,24508,24509,24515,24515,24517,24517,24524,24525,24534,24537,24540,24542,24542,24542,24544,24544,24548,24548,24555,24555,24560,24561,24565,24565,24568,24568,24571,24571,24573,24573,24575,24575,24590,24592,24594,24594,24597,24598,24601,24601,24603,24605,24608,24609,24613,24619,24623,24623,24625,24625,24634,24634,24641,24643,24646,24646,24650,24651,24653,24653,24656,24656,24658,24658,24661,24661,24665,24666,24669,24669,24669,24669,24671,24672,24674,24677,24680,24685,24687,24688,24693,24693,24695,24695,24705,24705,24707,24709,24709,24709,24713,24714,24714,24717,24722,24722,24724,24724,24726,24727,24730,24731,24735,24736,24739,24739,24742,24743,24745,24746,24754,24758,24760,24760,24764,24765,24773,24775,24785,24785,24787,24787,24789,24789,24789,24789,24792,24792,24794,24794,24796,24796,24798,24798,24798,24801,24803,24803,24807,24808,24816,24818,24818,24820,24822,24823,24825,24827,24832,24833,24835,24835,24838,24838,24840,24841,24845,24847,24849,24849,24849,24849,24853,24853,24858,24859,24863,24864,24864,24865,24871,24872,24876,24876,24880,24880,24880,24880,24884,24884,24887,24887,24887,24887,24892,24895,24898,24898,24900,24900,24903,24904,24906,24910,24915,24915,24917,24917,24920,24922,24925,24925,24927,24927,24930,24931,24933,24933,24935,24936,24939,24939,24942,24945,24947,24951,24958,24958,24962,24962,24967,24967,24970,24970,24974,24974,24976,24977,24980,24980,24982,24982,24984,24984,24984,24986,24996,24996,24999,24999,25001,25001,25003,25004,25006,25006,25010,25010,25014,25014,25018,25018,25022,25022,25027,25027,25030,25037,25040,25040,25059,25059,25062,25062,25074,25074,25076,25076,25078,25080,25082,25082,25084,25088,25096,25098,25100,25102,25104,25107,25107,25108,25110,25110,25114,25115,25117,25119,25121,25121,25126,25126,25130,25130,25134,25136,25138,25140,25144,25144,25147,25147,25151,25153,25159,25161,25163,25163,25165,25166,25171,25171,25173,25173,25176,25176,25179,25179,25182,25182,25184,25184,25187,25187,25192,25192,25198,25198,25201,25201,25206,25206,25209,25209,25212,25212,25214,25216,25218,25220,25225,25226,25233,25240,25243,25244,25246,25246,25254,25254,25254,25254,25259,25260,25265,25265,25269,25269,25273,25273,25275,25277,25282,25282,25285,25290,25292,25293,25295,25300,25303,25305,25307,25309,25312,25313,25324,25327,25329,25329,25331,25331,25333,25335,25342,25343,25345,25346,25351,25353,25356,25356,25361,25361,25369,25369,25375,25375,25383,25384,25387,25387,25391,25391,25402,25402,25405,25407,25417,25417,25420,25421,25423,25424,25429,25429,25431,25431,25436,25436,25447,25449,25451,25451,25454,25454,25458,25458,25462,25463,25466,25467,25472,25472,25475,25475,25480,25481,25484,25484,25486,25487,25490,25490,25494,25494,25496,25496,25499,25499,25503,25507,25509,25509,25511,25516,25522,25522,25524,25525,25531,25531,25534,25534,25536,25536,25539,25540,25542,25542,25545,25545,25551,25552,25554,25554,25558,25558,25562,25563,25569,25569,25571,25571,25577,25577,25582,25582,25588,25589,25589,25590,25594,25594,25606,25606,25613,25613,25615,25615,25619,25619,25622,25623,25628,25628,25638,25638,25640,25640,25644,25645,25652,25652,25654,25654,25658,25658,25662,25662,25666,25666,25678,25678,25688,25688,25696,25696,25696,25696,25703,25703,25705,25705,25711,25711,25718,25718,25720,25720,25722,25722,25731,25731,25736,25736,25746,25747,25749,25749,25754,25754,25757,25757,25757,25758,25764,25765,25769,25769,25771,25771,25773,25774,25776,25776,25778,25778,25785,25785,25787,25788,25793,25794,25797,25797,25799,25799,25805,25806,25806,25806,25810,25810,25812,25812,25816,25816,25818,25818,25824,25827,25830,25831,25836,25836,25839,25839,25841,25842,25844,25844,25846,25846,25850,25850,25853,25854,25856,25856,25861,25861,25880,25880,25884,25885,25891,25892,25898,25900,25903,25903,25908,25913,25915,25915,25918,25919,25925,25925,25928,25928,25933,25934,25934,25935,25937,25937,25941,25945,25949,25950,25954,25955,25958,25958,25964,25964,25968,25968,25970,25970,25972,25973,25975,25976,25986,25987,25991,25993,25996,25996,25998,25998,26000,26001,26007,26007,26009,26009,26011,26012,26015,26015,26017,26017,26020,26021,26023,26023,26027,26029,26031,26032,26039,26039,26041,26041,26044,26045,26049,26049,26051,26054,26059,26060,26063,26063,26066,26066,26071,26071,26073,26073,26075,26075,26080,26082,26085,26089,26092,26093,26097,26097,26106,26107,26112,26112,26112,26112,26114,26115,26118,26119,26121,26121,26121,26122,26124,26124,26126,26127,26131,26133,26133,26133,26140,26140,26142,26142,26142,26144,26148,26148,26148,26149,26151,26152,26157,26158,26158,26159,26161,26161,26161,26161,26164,26166,26171,26171,26171,26172,26175,26175,26177,26180,26185,26185,26187,26187,26191,26191,26194,26194,26199,26199,26199,26199,26201,26201,26201,26201,26205,26207,26210,26210,26212,26213,26213,26217,26222,26224,26227,26227,26227,26228,26230,26230,26234,26234,26241,26241,26243,26244,26247,26249,26254,26254,26257,26257,26262,26265,26265,26265,26269,26269,26272,26272,26272,26272,26274,26274,26278,26278,26283,26283,26286,26286,26290,26290,26290,26290,26292,26292,26296,26297,26300,26300,26302,26303,26303,26303,26305,26305,26308,26308,26311,26311,26313,26313,26326,26326,26329,26330,26332,26333,26336,26336,26342,26342,26345,26345,26352,26352,26354,26357,26359,26362,26362,26363,26363,26368,26371,26371,26376,26377,26379,26379,26381,26382,26382,26383,26388,26391,26395,26395,26397,26399,26406,26408,26410,26414,26417,26417,26420,26420,26422,26424,26426,26426,26429,26429,26431,26431,26433,26433,26438,26438,26441,26441,26446,26449,26451,26451,26454,26454,26457,26457,26460,26460,26462,26470,26470,26470,26474,26474,26477,26477,26479,26483,26485,26485,26487,26487,26492,26492,26494,26495,26501,26501,26503,26503,26505,26505,26507,26508,26512,26512,26517,26517,26519,26519,26522,26522,26524,26525,26528,26530,26534,26534,26537,26537,26543,26543,26547,26548,26550,26553,26555,26555,26555,26555,26560,26560,26560,26561,26564,26564,26566,26566,26570,26570,26574,26577,26579,26580,26584,26584,26586,26586,26589,26590,26594,26594,26596,26596,26599,26599,26601,26601,26604,26604,26606,26607,26609,26609,26611,26613,26619,26619,26622,26623,26625,26625,26625,26628,26643,26643,26646,26647,26654,26654,26657,26658,26665,26667,26674,26674,26676,26676,26680,26681,26684,26685,26688,26692,26692,26692,26694,26694,26696,26696,26701,26702,26704,26706,26706,26708,26713,26713,26716,26717,26719,26719,26723,26723,26727,26727,26740,26740,26742,26743,26750,26751,26753,26753,26755,26755,26757,26757,26765,26765,26767,26767,26771,26772,26775,26775,26779,26779,26781,26781,26783,26784,26786,26786,26790,26792,26797,26797,26799,26801,26803,26803,26805,26806,26809,26810,26812,26812,26820,26820,26822,26822,26824,26824,26824,26827,26829,26829,26831,26831,26831,26831,26834,26834,26836,26837,26839,26840,26842,26842,26847,26849,26851,26851,26855,26855,26862,26863,26866,26866,26873,26874,26880,26881,26884,26885,26888,26888,26891,26895,26898,26898,26905,26908,26913,26915,26917,26918,26920,26920,26922,26922,26928,26928,26932,26932,26934,26934,26937,26937,26941,26941,26943,26943,26954,26954,26963,26965,26969,26970,26972,26974,26976,26978,26984,26984,26984,26984,26986,26987,26989,26991,26995,26997,26999,27001,27004,27006,27009,27010,27018,27018,27022,27022,27025,27025,27028,27029,27032,27032,27032,27032,27035,27036,27040,27040,27047,27047,27054,27054,27057,27058,27060,27060,27067,27067,27070,27071,27073,27073,27075,27075,27079,27079,27082,27086,27088,27088,27091,27091,27096,27097,27101,27102,27106,27106,27106,27106,27111,27112,27115,27115,27117,27117,27122,27122,27129,27129,27131,27131,27133,27133,27135,27135,27138,27138,27141,27141,27146,27148,27154,27156,27159,27159,27161,27161,27163,27163,27166,27167,27169,27171,27177,27179,27182,27182,27184,27184,27184,27184,27189,27190,27192,27194,27197,27197,27204,27204,27206,27206,27206,27208,27211,27211,27224,27225,27231,27231,27233,27234,27238,27238,27243,27243,27243,27243,27250,27251,27251,27251,27256,27256,27262,27262,27262,27264,27268,27268,27277,27278,27280,27280,27287,27287,27292,27292,27296,27296,27298,27299,27306,27306,27308,27308,27310,27310,27315,27315,27320,27320,27323,27323,27329,27331,27345,27345,27347,27347,27354,27355,27358,27359,27362,27362,27362,27362,27364,27364,27364,27364,27368,27368,27370,27370,27386,27387,27396,27397,27402,27402,27410,27410,27414,27414,27421,27421,27423,27425,27427,27427,27431,27431,27442,27442,27447,27450,27453,27454,27459,27459,27463,27463,27465,27465,27468,27468,27470,27470,27472,27472,27475,27476,27481,27481,27483,27483,27487,27487,27489,27492,27494,27494,27497,27498,27503,27503,27507,27508,27512,27513,27515,27515,27519,27520,27523,27524,27526,27526,27529,27531,27533,27533,27541,27542,27544,27544,27550,27550,27556,27556,27562,27563,27567,27567,27569,27573,27575,27575,27578,27580,27583,27584,27589,27590,27595,27595,27597,27598,27602,27604,27606,27606,27606,27606,27608,27608,27611,27611,27615,27615,27627,27628,27631,27631,27635,27635,27656,27656,27663,27663,27665,27665,27667,27668,27671,27671,27675,27675,27683,27684,27700,27700,27703,27704,27710,27711,27711,27714,27726,27726,27728,27728,27733,27733,27735,27735,27738,27738,27740,27740,27740,27744,27746,27746,27752,27752,27754,27754,27759,27759,27759,27760,27762,27763,27770,27770,27773,27774,27777,27779,27782,27782,27782,27782,27784,27784,27788,27789,27792,27792,27794,27795,27798,27798,27801,27803,27809,27810,27819,27819,27822,27822,27825,27825,27827,27827,27832,27839,27841,27841,27844,27845,27849,27850,27852,27852,27859,27859,27861,27861,27863,27863,27865,27866,27866,27867,27869,27869,27873,27875,27877,27877,27880,27880,27882,27882,27887,27889,27891,27891,27908,27908,27908,27908,27915,27916,27922,27922,27927,27927,27929,27929,27931,27931,27934,27935,27941,27941,27945,27947,27954,27955,27957,27958,27960,27960,27963,27963,27965,27966,27969,27969,27972,27973,27993,27994,27996,27996,28003,28004,28006,28006,28009,28010,28012,28012,28014,28015,28015,28015,28020,28020,28023,28025,28037,28037,28039,28039,28039,28040,28044,28044,28046,28046,28051,28051,28053,28054,28054,28054,28057,28057,28059,28060,28076,28076,28076,28076,28079,28079,28082,28082,28085,28085,28088,28088,28092,28092,28096,28096,28101,28103,28107,28108,28111,28111,28111,28111,28113,28114,28117,28117,28120,28121,28126,28126,28129,28129,28132,28132,28134,28134,28136,28136,28138,28140,28142,28142,28145,28146,28146,28147,28149,28149,28151,28152,28152,28156,28156,28156,28165,28165,28167,28171,28179,28179,28181,28181,28185,28187,28189,28189,28191,28193,28195,28199,28199,28199,28201,28201,28203,28207,28216,28217,28217,28218,28220,28220,28220,28220,28222,28222,28227,28227,28234,28234,28237,28238,28246,28246,28248,28248,28251,28252,28252,28252,28255,28255,28263,28263,28267,28267,28270,28271,28274,28274,28278,28278,28286,28288,28290,28290,28300,28300,28303,28304,28310,28310,28312,28312,28316,28317,28319,28319,28322,28322,28325,28325,28330,28330,28335,28335,28338,28338,28342,28343,28346,28346,28349,28349,28351,28351,28351,28351,28354,28354,28356,28357,28361,28361,28363,28364,28369,28369,28371,28373,28381,28382,28396,28396,28399,28399,28402,28402,28404,28404,28407,28408,28414,28415,28417,28418,28422,28422,28425,28425,28431,28431,28433,28433,28435,28437,28448,28448,28450,28451,28459,28460,28465,28466,28472,28472,28478,28479,28481,28481,28485,28485,28500,28500,28504,28504,28507,28508,28511,28511,28516,28516,28518,28518,28525,28528,28532,28532,28536,28536,28538,28538,28540,28540,28544,28546,28548,28548,28550,28550,28552,28552,28552,28552,28558,28558,28561,28561,28567,28567,28577,28577,28579,28580,28586,28586,28593,28593,28595,28595,28597,28597,28597,28597,28601,28601,28608,28611,28614,28614,28628,28629,28632,28632,28635,28635,28639,28641,28644,28644,28651,28652,28654,28655,28657,28657,28659,28659,28661,28661,28661,28662,28666,28666,28670,28670,28673,28673,28677,28677,28677,28677,28679,28679,28679,28679,28681,28681,28683,28683,28687,28687,28689,28689,28693,28693,28696,28696,28698,28699,28701,28703,28710,28712,28712,28712,28716,28716,28720,28720,28722,28722,28734,28734,28748,28748,28753,28753,28760,28760,28771,28771,28779,28779,28783,28784,28792,28792,28796,28797,28805,28805,28805,28805,28809,28810,28814,28814,28818,28818,28825,28825,28843,28843,28843,28847,28851,28851,28856,28859,28859,28859,28872,28872,28875,28875,28879,28879,28889,28889,28893,28893,28895,28895,28913,28913,28921,28921,28925,28925,28932,28932,28932,28932,28937,28937,28943,28943,28943,28943,28948,28948,28953,28954,28956,28956,28961,28961,28966,28966,28982,28982,28988,28988,28998,28998,28998,28999,28999,28999,29001,29001,29004,29004,29006,29006,29013,29014,29017,29017,29020,29020,29020,29020,29026,29026,29028,29031,29033,29033,29036,29036,29038,29038,29053,29053,29060,29060,29064,29064,29066,29066,29071,29071,29076,29077,29081,29081,29087,29087,29096,29096,29100,29100,29105,29105,29113,29113,29118,29118,29121,29121,29121,29121,29123,29123,29128,29129,29134,29134,29136,29136,29138,29138,29140,29141,29143,29143,29151,29152,29157,29159,29164,29166,29173,29173,29177,29177,29179,29180,29182,29182,29182,29183,29190,29190,29197,29197,29200,29200,29211,29211,29224,29224,29226,29226,29228,29229,29232,29232,29234,29234,29237,29238,29242,29248,29254,29256,29259,29260,29266,29266,29272,29273,29275,29275,29277,29277,29279,29279,29281,29282,29287,29287,29289,29289,29298,29298,29300,29300,29305,29305,29309,29310,29312,29314,29319,29319,29330,29330,29334,29334,29344,29344,29346,29346,29351,29351,29356,29356,29359,29359,29361,29361,29361,29362,29366,29366,29369,29369,29374,29374,29374,29374,29378,29380,29382,29382,29390,29390,29392,29392,29394,29394,29399,29399,29401,29401,29403,29403,29408,29410,29417,29417,29420,29421,29431,29433,29436,29437,29450,29450,29462,29463,29467,29469,29471,29471,29476,29476,29476,29477,29481,29483,29486,29487,29492,29492,29494,29495,29502,29503,29508,29509,29518,29519,29527,29527,29539,29539,29544,29544,29546,29546,29552,29552,29554,29554,29557,29557,29559,29559,29559,29560,29562,29563,29572,29572,29575,29575,29577,29577,29579,29579,29590,29590,29609,29609,29618,29619,29627,29627,29629,29629,29629,29629,29632,29632,29634,29634,29640,29641,29641,29642,29645,29646,29650,29650,29650,29650,29654,29654,29654,29654,29662,29662,29664,29664,29667,29667,29667,29667,29669,29669,29674,29674,29677,29678,29681,29681,29685,29685,29685,29685,29688,29688,29694,29694,29699,29699,29701,29703,29703,29703,29705,29705,29730,29730,29733,29734,29734,29734,29737,29737,29737,29738,29738,29738,29742,29742,29742,29742,29746,29750,29754,29754,29759,29759,29761,29761,29781,29781,29785,29788,29790,29792,29794,29794,29794,29796,29801,29802,29807,29808,29811,29811,29814,29814,29822,29822,29827,29827,29833,29833,29833,29833,29835,29835,29854,29855,29855,29855,29858,29858,29863,29863,29872,29872,29885,29885,29898,29898,29903,29903,29908,29908,29916,29916,29920,29920,29922,29923,29926,29927,29929,29929,29934,29934,29936,29938,29942,29944,29953,29953,29953,29953,29955,29957,29964,29966,29969,29969,29971,29971,29973,29973,29976,29976,29978,29978,29980,29980,29982,29983,29987,29987,29989,29990,29992,29992,29995,29996,29999,29999,29999,30003,30007,30008,30010,30012,30020,30020,30022,30022,30025,30029,30031,30031,30033,30033,30036,30036,30041,30045,30048,30048,30050,30050,30052,30055,30057,30059,30061,30061,30063,30063,30063,30064,30067,30068,30070,30072,30079,30079,30082,30082,30086,30087,30089,30091,30094,30095,30097,30097,30100,30100,30106,30106,30109,30109,30115,30115,30117,30117,30123,30123,30129,30131,30133,30133,30136,30137,30140,30142,30146,30147,30149,30149,30151,30151,30154,30154,30157,30157,30162,30162,30164,30165,30168,30169,30171,30171,30174,30174,30178,30179,30185,30185,30192,30192,30194,30196,30202,30202,30204,30204,30206,30207,30209,30209,30217,30217,30219,30219,30221,30221,30239,30242,30244,30244,30247,30247,30256,30256,30260,30260,30267,30267,30274,30274,30278,30280,30284,30284,30290,30290,30294,30294,30296,30296,30300,30300,30305,30306,30311,30314,30316,30316,30320,30320,30322,30322,30326,30326,30328,30328,30330,30334,30336,30336,30338,30338,30338,30340,30342,30344,30347,30347,30350,30350,30352,30352,30355,30355,30358,30358,30361,30363,30363,30364,30364,30364,30366,30366,30366,30366,30374,30374,30374,30374,30382,30382,30384,30384,30388,30388,30391,30394,30399,30399,30402,30403,30406,30406,30408,30408,30410,30410,30413,30413,30418,30418,30422,30423,30427,30428,30430,30431,30433,30433,30435,30437,30439,30439,30442,30442,30446,30446,30450,30450,30452,30452,30456,30456,30459,30459,30462,30462,30465,30465,30468,30468,30471,30473,30475,30476,30491,30491,30494,30496,30500,30502,30505,30505,30519,30520,30522,30522,30524,30524,30528,30528,30534,30534,30534,30535,30554,30555,30561,30561,30563,30563,30565,30566,30568,30568,30571,30571,30585,30585,30590,30591,30603,30603,30606,30606,30609,30609,30622,30622,30624,30624,30629,30629,30636,30637,30640,30640,30643,30643,30646,30646,30649,30649,30651,30653,30655,30655,30663,30663,30669,30669,30679,30679,30682,30684,30690,30691,30693,30693,30695,30695,30697,30697,30701,30703,30707,30707,30716,30716,30722,30722,30732,30732,30738,30738,30740,30741,30752,30753,30753,30753,30757,30759,30770,30770,30772,30772,30778,30778,30783,30783,30789,30789,30798,30798,30798,30798,30813,30813,30820,30820,30820,30820,30827,30828,30831,30831,30834,30834,30836,30836,30842,30842,30842,30842,30844,30844,30849,30849,30854,30855,30860,30862,30865,30865,30867,30867,30869,30869,30871,30871,30874,30874,30883,30883,30887,30887,30889,30890,30895,30895,30901,30901,30906,30906,30908,30908,30910,30910,30913,30913,30917,30918,30922,30923,30928,30929,30932,30932,30938,30938,30951,30952,30956,30956,30959,30959,30964,30964,30973,30973,30977,30977,30983,30983,30990,30990,30993,30994,31001,31001,31014,31014,31018,31020,31024,31024,31024,31024,31034,31034,31036,31036,31038,31038,31040,31041,31047,31049,31056,31056,31059,31059,31061,31063,31066,31066,31069,31072,31074,31074,31077,31077,31080,31080,31085,31085,31095,31095,31098,31098,31103,31105,31108,31109,31114,31114,31117,31119,31124,31124,31124,31124,31131,31131,31131,31131,31133,31133,31142,31143,31146,31146,31150,31150,31152,31152,31155,31155,31161,31162,31165,31169,31177,31177,31179,31179,31185,31186,31189,31189,31192,31192,31199,31199,31201,31201,31203,31204,31206,31207,31209,31209,31212,31212,31216,31216,31227,31227,31232,31232,31240,31240,31243,31243,31245,31246,31252,31252,31255,31258,31260,31260,31263,31264,31278,31278,31281,31282,31287,31287,31291,31296,31298,31299,31302,31302,31305,31305,31309,31312,31319,31319,31329,31331,31337,31337,31339,31339,31344,31344,31348,31348,31350,31350,31353,31354,31357,31357,31359,31359,31361,31361,31363,31364,31368,31368,31378,31379,31381,31384,31391,31391,31401,31402,31406,31408,31414,31414,31418,31418,31423,31423,31427,31429,31431,31432,31434,31435,31437,31437,31439,31439,31441,31441,31441,31443,31445,31445,31449,31450,31452,31453,31455,31459,31461,31463,31463,31463,31466,31467,31467,31467,31469,31469,31471,31472,31478,31478,31480,31482,31487,31487,31490,31490,31492,31492,31494,31494,31496,31496,31498,31499,31503,31503,31505,31505,31512,31513,31515,31515,31518,31518,31520,31520,31525,31526,31528,31528,31532,31532,31539,31539,31541,31542,31545,31545,31557,31558,31560,31561,31563,31565,31567,31570,31572,31572,31574,31574,31581,31581,31589,31589,31591,31591,31596,31596,31598,31598,31600,31601,31604,31605,31610,31610,31622,31623,31627,31627,31629,31629,31631,31631,31634,31634,31636,31637,31639,31642,31644,31646,31646,31647,31649,31649,31658,31658,31661,31661,31665,31665,31668,31668,31672,31672,31680,31681,31684,31684,31686,31687,31689,31689,31691,31692,31695,31695,31709,31709,31712,31712,31716,31718,31721,31721,31725,31725,31731,31731,31734,31735,31744,31744,31751,31751,31757,31757,31761,31764,31767,31767,31775,31775,31777,31777,31779,31779,31783,31783,31786,31787,31799,31800,31805,31808,31811,31811,31820,31821,31823,31824,31828,31828,31830,31830,31832,31832,31839,31840,31844,31845,31852,31852,31859,31859,31861,31861,31870,31870,31873,31875,31881,31881,31883,31883,31885,31885,31888,31888,31890,31890,31893,31893,31895,31896,31899,31899,31903,31903,31905,31906,31908,31909,31911,31912,31915,31915,31917,31918,31921,31923,31929,31929,31933,31934,31936,31936,31938,31938,31941,31941,31946,31946,31950,31950,31954,31954,31958,31958,31960,31960,31964,31964,31966,31968,31970,31970,31975,31975,31983,31983,31986,31986,31988,31988,31990,31990,31992,31992,31994,31995,31998,31998,32000,32000,32002,32002,32004,32006,32010,32011,32013,32013,32016,32016,32020,32021,32023,32028,32032,32034,32043,32044,32046,32048,32050,32051,32053,32053,32057,32058,32063,32063,32066,32070,32072,32072,32072,32072,32075,32076,32078,32080,32086,32086,32091,32092,32092,32092,32094,32094,32097,32099,32102,32102,32104,32104,32110,32110,32113,32115,32117,32118,32121,32121,32125,32125,32137,32137,32143,32143,32147,32147,32153,32156,32159,32160,32160,32160,32162,32163,32171,32178,32180,32181,32183,32183,32183,32184,32186,32187,32189,32191,32199,32199,32202,32203,32207,32207,32209,32210,32213,32214,32214,32214,32216,32216,32218,32218,32220,32222,32224,32225,32228,32228,32232,32233,32236,32236,32239,32239,32242,32242,32244,32244,32251,32251,32257,32257,32260,32261,32265,32267,32274,32274,32283,32283,32286,32287,32289,32291,32294,32294,32299,32299,32302,32302,32305,32306,32309,32309,32311,32311,32313,32315,32317,32318,32321,32321,32323,32323,32326,32326,32330,32331,32333,32333,32338,32338,32338,32338,32340,32342,32345,32346,32349,32350,32358,32359,32361,32362,32365,32365,32368,32368,32377,32377,32379,32381,32383,32383,32386,32387,32392,32394,32394,32394,32396,32396,32398,32400,32402,32404,32406,32406,32411,32412,32566,32566,32568,32568,32570,32570,32581,32581,32583,32583,32583,32583,32588,32590,32592,32593,32596,32597,32600,32600,32607,32608,32615,32619,32622,32622,32624,32624,32626,32626,32629,32629,32631,32633,32642,32643,32645,32648,32650,32650,32652,32652,32654,32654,32660,32660,32666,32666,32669,32670,32673,32673,32673,32673,32675,32676,32680,32681,32686,32687,32690,32690,32694,32694,32696,32697,32701,32701,32705,32705,32709,32710,32714,32714,32716,32716,32722,32722,32724,32725,32736,32737,32742,32742,32745,32745,32747,32747,32752,32752,32755,32755,32761,32761,32763,32764,32768,32769,32771,32774,32779,32780,32784,32784,32786,32786,32789,32789,32791,32793,32796,32796,32801,32801,32808,32808,32819,32819,32822,32822,32827,32827,32829,32829,32831,32831,32838,32838,32842,32842,32850,32850,32854,32854,32856,32856,32858,32858,32862,32863,32865,32866,32872,32872,32879,32880,32882,32884,32886,32887,32889,32889,32893,32895,32900,32903,32905,32905,32907,32908,32915,32915,32918,32918,32920,32920,32922,32923,32925,32925,32929,32930,32933,32933,32937,32938,32940,32941,32943,32943,32945,32946,32948,32948,32954,32954,32963,32964,32966,32966,32972,32972,32974,32974,32982,32982,32985,32987,32989,32990,32993,32993,32996,32997,33007,33007,33009,33009,33012,33012,33016,33016,33020,33021,33026,33026,33029,33034,33050,33051,33059,33059,33065,33065,33071,33071,33073,33073,33075,33075,33081,33081,33086,33086,33094,33094,33099,33099,33102,33102,33104,33105,33107,33109,33119,33119,33125,33126,33131,33131,33134,33134,33136,33137,33140,33140,33144,33146,33151,33152,33154,33155,33160,33160,33162,33162,33167,33167,33171,33171,33173,33173,33178,33178,33180,33181,33184,33184,33187,33188,33192,33193,33200,33200,33203,33203,33205,33205,33208,33208,33210,33210,33213,33216,33218,33218,33222,33222,33224,33225,33229,33229,33233,33233,33235,33235,33240,33242,33247,33248,33251,33251,33253,33253,33255,33256,33258,33258,33261,33261,33267,33268,33274,33276,33278,33278,33281,33282,33285,33285,33287,33290,33292,33294,33296,33296,33298,33298,33302,33304,33307,33308,33310,33311,33321,33324,33326,33326,33331,33331,33333,33337,33344,33344,33351,33351,33368,33370,33373,33373,33375,33375,33378,33378,33380,33380,33382,33382,33384,33384,33386,33387,33390,33391,33393,33394,33398,33400,33406,33406,33419,33419,33421,33421,33426,33426,33433,33433,33437,33437,33439,33439,33445,33446,33451,33453,33455,33455,33457,33457,33459,33459,33464,33465,33467,33467,33469,33469,33477,33477,33489,33492,33495,33495,33497,33497,33499,33500,33502,33503,33505,33505,33507,33507,33509,33511,33515,33515,33521,33521,33523,33524,33529,33531,33537,33537,33537,33542,33545,33545,33550,33550,33558,33560,33564,33564,33571,33571,33576,33576,33579,33579,33583,33583,33585,33586,33588,33590,33592,33593,33600,33600,33605,33605,33609,33610,33615,33616,33618,33618,33624,33624,33634,33634,33634,33634,33651,33651,33653,33653,33655,33655,33659,33660,33663,33663,33663,33663,33669,33669,33671,33671,33673,33674,33678,33678,33683,33683,33686,33686,33690,33690,33694,33696,33698,33698,33704,33704,33706,33707,33713,33713,33717,33717,33725,33725,33729,33729,33733,33733,33735,33735,33735,33735,33738,33738,33740,33740,33742,33742,33747,33747,33750,33750,33752,33752,33756,33756,33759,33760,33769,33769,33771,33771,33775,33778,33780,33780,33782,33782,33782,33783,33787,33787,33789,33789,33795,33796,33799,33799,33803,33806,33811,33811,33824,33824,33826,33826,33833,33834,33836,33836,33841,33841,33845,33845,33848,33848,33852,33853,33862,33862,33864,33864,33864,33865,33870,33870,33879,33879,33883,33883,33889,33891,33894,33894,33897,33897,33899,33903,33905,33905,33909,33909,33911,33911,33913,33914,33922,33922,33924,33924,33931,33931,33936,33936,33940,33940,33945,33945,33948,33948,33951,33951,33953,33953,33965,33965,33970,33970,33972,33972,33972,33972,33976,33977,33979,33980,33983,33983,33985,33985,33988,33988,33990,33990,33993,33995,33997,33997,34000,34001,34006,34006,34009,34010,34012,34012,34012,34012,34028,34028,34030,34030,34036,34036,34044,34044,34047,34048,34054,34054,34065,34065,34067,34069,34071,34072,34074,34074,34079,34079,34081,34081,34086,34086,34092,34093,34101,34101,34109,34109,34112,34113,34115,34115,34120,34123,34126,34126,34131,34131,34131,34131,34133,34133,34135,34137,34137,34138,34147,34147,34152,34155,34155,34155,34157,34157,34167,34167,34174,34174,34176,34176,34180,34180,34183,34184,34186,34186,34192,34193,34196,34196,34199,34199,34201,34201,34203,34204,34212,34212,34214,34214,34216,34220,34222,34224,34224,34224,34233,34234,34241,34241,34249,34249,34253,34253,34255,34256,34261,34261,34268,34269,34276,34277,34281,34282,34295,34295,34297,34299,34302,34302,34306,34306,34310,34311,34314,34315,34323,34323,34326,34327,34330,34330,34338,34338,34349,34349,34351,34352,34367,34367,34381,34382,34384,34384,34388,34389,34394,34394,34396,34396,34398,34399,34407,34407,34411,34411,34417,34417,34425,34425,34427,34427,34442,34444,34451,34451,34453,34453,34467,34468,34473,34475,34479,34480,34486,34486,34500,34500,34502,34503,34505,34505,34507,34507,34509,34510,34516,34516,34521,34521,34523,34523,34526,34527,34532,34532,34537,34537,34540,34543,34552,34553,34555,34555,34558,34558,34560,34560,34562,34563,34566,34566,34568,34570,34573,34573,34577,34578,34584,34584,34586,34586,34588,34588,34597,34597,34601,34601,34612,34612,34615,34615,34619,34619,34623,34623,34633,34633,34635,34636,34638,34638,34643,34643,34645,34645,34647,34647,34649,34649,34655,34656,34659,34659,34662,34662,34664,34664,34666,34666,34670,34670,34676,34676,34678,34678,34680,34680,34687,34687,34690,34690,34701,34701,34719,34719,34722,34722,34731,34731,34735,34735,34739,34739,34746,34747,34749,34749,34752,34752,34756,34756,34758,34759,34763,34763,34768,34768,34770,34770,34784,34784,34799,34799,34802,34802,34806,34807,34809,34809,34811,34811,34814,34814,34821,34821,34823,34823,34823,34823,34829,34831,34833,34833,34837,34838,34849,34851,34855,34855,34865,34865,34870,34870,34873,34873,34875,34875,34880,34880,34882,34882,34884,34884,34886,34886,34892,34893,34898,34899,34903,34903,34905,34905,34907,34907,34909,34910,34913,34915,34920,34920,34923,34923,34928,34928,34930,34930,34933,34933,34935,34935,34941,34943,34945,34946,34952,34952,34955,34955,34957,34957,34962,34962,34966,34967,34969,34969,34974,34974,34978,34978,34980,34980,34987,34987,34990,34990,34992,34993,34996,34997,34999,34999,35007,35007,35009,35013,35023,35023,35028,35029,35032,35033,35036,35037,35039,35039,35041,35041,35048,35048,35058,35061,35061,35061,35064,35065,35068,35070,35074,35074,35076,35076,35079,35079,35082,35082,35084,35084,35088,35088,35090,35091,35100,35100,35100,35102,35109,35109,35114,35115,35126,35126,35128,35128,35131,35131,35137,35137,35139,35140,35148,35149,35158,35158,35166,35168,35172,35172,35174,35174,35178,35178,35181,35181,35183,35183,35186,35186,35188,35188,35191,35191,35198,35199,35201,35201,35203,35203,35206,35208,35210,35211,35215,35215,35219,35219,35222,35224,35226,35226,35233,35233,35238,35239,35241,35242,35244,35244,35247,35247,35250,35251,35258,35258,35261,35261,35263,35264,35282,35282,35290,35290,35292,35293,35299,35299,35302,35303,35316,35316,35320,35320,35328,35328,35330,35331,35336,35336,35338,35338,35340,35340,35342,35342,35344,35344,35346,35346,35346,35347,35350,35352,35355,35355,35357,35357,35359,35359,35363,35363,35365,35365,35370,35370,35373,35373,35377,35377,35379,35380,35382,35383,35383,35383,35386,35388,35393,35393,35398,35398,35400,35400,35408,35410,35412,35413,35419,35419,35422,35422,35424,35424,35426,35427,35430,35430,35433,35433,35435,35438,35440,35443,35449,35449,35449,35449,35452,35452,35458,35458,35460,35461,35463,35463,35465,35465,35468,35469,35473,35473,35475,35475,35477,35477,35480,35480,35482,35482,35486,35486,35488,35489,35491,35495,35495,35496,35500,35501,35504,35504,35506,35506,35513,35513,35516,35516,35518,35518,35518,35519,35522,35522,35524,35524,35527,35527,35531,35533,35535,35535,35538,35538,35542,35542,35546,35548,35550,35551,35551,35554,35556,35556,35558,35559,35563,35563,35565,35566,35569,35569,35571,35571,35574,35574,35574,35576,35578,35578,35582,35582,35584,35586,35588,35588,35591,35591,35596,35596,35598,35598,35600,35600,35604,35604,35606,35607,35609,35611,35613,35613,35616,35617,35622,35622,35624,35624,35627,35628,35635,35635,35641,35641,35646,35646,35649,35649,35657,35657,35660,35660,35662,35663,35667,35667,35667,35667,35670,35670,35672,35672,35674,35676,35679,35679,35686,35686,35691,35692,35695,35698,35700,35700,35703,35703,35709,35709,35711,35711,35711,35712,35715,35715,35722,35722,35724,35724,35726,35726,35728,35728,35730,35731,35734,35734,35737,35738,35895,35895,35898,35898,35903,35903,35905,35905,35910,35910,35912,35912,35914,35914,35916,35916,35918,35918,35920,35920,35925,35925,35930,35930,35937,35938,35946,35948,35960,35962,35964,35964,35970,35970,35973,35973,35977,35978,35980,35982,35988,35988,35992,35992,35997,35998,36000,36002,36007,36016,36018,36020,36022,36024,36027,36029,36031,36036,36039,36040,36042,36042,36045,36046,36049,36049,36051,36051,36058,36060,36062,36062,36064,36064,36066,36068,36070,36070,36074,36074,36077,36077,36080,36080,36080,36080,36084,36084,36084,36084,36090,36093,36100,36101,36103,36104,36106,36107,36109,36109,36111,36112,36114,36114,36114,36116,36118,36118,36196,36196,36198,36199,36203,36203,36205,36205,36208,36209,36211,36212,36214,36214,36214,36215,36225,36225,36229,36229,36234,36234,36249,36249,36259,36259,36264,36264,36275,36275,36282,36282,36286,36286,36290,36290,36299,36300,36303,36303,36310,36310,36314,36315,36317,36317,36319,36319,36321,36321,36323,36323,36328,36328,36330,36331,36335,36335,36339,36339,36341,36341,36348,36348,36351,36351,36360,36362,36367,36368,36381,36383,36394,36394,36400,36400,36404,36405,36418,36418,36420,36420,36423,36426,36428,36428,36432,36432,36437,36437,36441,36441,36447,36448,36451,36452,36466,36466,36468,36468,36470,36470,36476,36476,36481,36481,36484,36485,36487,36487,36490,36491,36493,36493,36497,36497,36499,36500,36505,36505,36513,36513,36522,36524,36527,36529,36542,36542,36549,36550,36552,36552,36554,36557,36559,36559,36559,36559,36562,36562,36571,36571,36575,36575,36578,36579,36587,36587,36600,36600,36603,36606,36611,36611,36613,36613,36617,36618,36620,36620,36626,36629,36633,36633,36635,36637,36639,36639,36646,36646,36649,36650,36655,36655,36659,36659,36664,36665,36667,36667,36670,36671,36674,36674,36676,36678,36681,36681,36684,36686,36695,36695,36700,36700,36703,36703,36705,36708,36763,36764,36766,36767,36771,36771,36775,36776,36781,36786,36791,36791,36794,36796,36799,36799,36802,36802,36804,36805,36814,36814,36817,36817,36820,36820,36826,36826,36834,36834,36837,36838,36841,36843,36845,36845,36847,36848,36852,36852,36855,36858,36861,36861,36864,36865,36867,36867,36869,36870,36875,36875,36877,36881,36883,36887,36889,36890,36893,36899,36903,36903,36910,36910,36913,36914,36917,36918,36920,36921,36924,36924,36926,36926,36929,36930,36933,36933,36935,36935,36937,36939,36941,36950,36952,36953,36956,36956,36958,36958,36960,36961,36963,36963,36965,36965,36967,36967,36967,36969,36973,36975,36978,36978,36981,36984,36986,36986,36988,36989,36991,36996,36999,36999,37001,37002,37007,37007,37009,37009,37027,37027,37030,37030,37032,37032,37034,37034,37039,37039,37041,37041,37045,37045,37048,37048,37057,37057,37066,37066,37070,37070,37083,37083,37086,37086,37086,37086,37089,37090,37092,37092,37096,37096,37101,37101,37109,37109,37111,37111,37117,37117,37122,37122,37138,37138,37141,37141,37141,37141,37145,37145,37159,37159,37159,37159,37165,37165,37168,37168,37170,37170,37193,37198,37202,37202,37204,37204,37206,37206,37208,37208,37218,37219,37221,37221,37225,37226,37228,37228,37234,37235,37237,37237,37239,37240,37250,37250,37255,37255,37257,37257,37259,37259,37261,37261,37264,37264,37266,37266,37271,37271,37276,37276,37282,37282,37284,37284,37290,37291,37295,37295,37300,37301,37304,37304,37306,37306,37312,37313,37318,37321,37323,37329,37334,37335,37335,37336,37338,37338,37338,37342,37342,37343,37345,37345,37347,37348,37348,37349,37349,37351,37357,37357,37357,37358,37358,37358,37365,37366,37372,37372,37375,37375,37382,37382,37382,37382,37386,37386,37386,37386,37389,37390,37392,37392,37392,37393,37396,37397,37406,37406,37417,37417,37420,37420,37428,37428,37431,37431,37433,37433,37433,37434,37434,37434,37436,37436,37436,37436,37439,37440,37440,37440,37444,37445,37448,37449,37451,37451,37454,37454,37454,37454,37456,37457,37457,37457,37463,37463,37465,37465,37465,37467,37470,37470,37474,37474,37476,37476,37478,37479,37479,37479,37489,37489,37495,37495,37495,37496,37496,37496,37502,37502,37504,37504,37507,37507,37509,37509,37512,37512,37512,37512,37521,37521,37523,37523,37525,37526,37528,37528,37530,37532,37543,37543,37543,37543,37549,37549,37559,37559,37561,37561,37583,37584,37584,37584,37586,37587,37587,37587,37589,37589,37589,37589,37591,37591,37591,37591,37593,37593,37593,37593,37600,37600,37600,37600,37604,37604,37607,37607,37607,37607,37609,37610,37613,37613,37618,37619,37624,37625,37625,37627,37627,37628,37631,37631,37631,37631,37634,37634,37634,37634,37638,37638,37647,37648,37656,37658,37661,37661,37661,37662,37662,37662,37664,37665,37665,37667,37669,37669,37669,37670,37672,37672,37675,37676,37678,37679,37682,37682,37685,37685,37690,37691,37700,37700,37704,37704,37704,37704,37707,37707,37709,37709,37716,37716,37718,37719,37719,37719,37723,37724,37728,37728,37740,37740,37742,37742,37744,37744,37744,37744,37749,37749,37756,37756,37758,37758,37772,37772,37780,37780,37782,37783,37786,37786,37796,37796,37796,37796,37799,37799,37804,37806,37808,37808,37817,37817,37827,37827,37830,37830,37830,37830,37832,37832,37840,37841,37846,37848,37853,37854,37854,37854,37857,37857,37860,37861,37864,37864,37880,37880,37880,37880,37891,37891,37895,37895,37904,37904,37907,37908,37912,37914,37921,37921,37931,37931,37937,37937,37937,37937,37941,37942,37944,37944,37946,37946,37953,37953,37956,37957,37957,37957,37960,37960,37960,37960,37969,37971,37978,37979,37982,37982,37984,37984,37986,37986,37994,37994,38000,38000,38005,38005,38007,38007,38012,38015,38017,38017,38263,38263,38272,38272,38274,38275,38279,38279,38281,38283,38287,38287,38289,38290,38290,38292,38294,38294,38296,38297,38304,38304,38306,38309,38311,38312,38317,38317,38322,38322,38329,38329,38331,38332,38334,38334,38339,38339,38343,38343,38346,38346,38348,38349,38356,38358,38360,38360,38364,38364,38369,38370,38373,38373,38428,38428,38433,38433,38440,38440,38442,38442,38446,38447,38450,38450,38459,38459,38463,38464,38466,38466,38468,38468,38475,38477,38479,38480,38491,38495,38498,38502,38506,38506,38508,38508,38512,38512,38514,38515,38517,38520,38522,38522,38525,38525,38533,38534,38536,38536,38538,38539,38541,38543,38548,38549,38551,38553,38555,38557,38557,38557,38560,38560,38563,38563,38567,38568,38570,38570,38575,38575,38575,38578,38580,38580,38582,38585,38587,38588,38592,38593,38596,38599,38601,38601,38603,38606,38609,38609,38613,38614,38617,38617,38619,38620,38626,38627,38632,38632,38634,38635,38640,38640,38642,38642,38646,38647,38649,38649,38651,38651,38656,38656,38660,38660,38662,38664,38666,38666,38669,38671,38673,38673,38675,38675,38678,38678,38681,38681,38684,38684,38686,38686,38692,38692,38695,38695,38698,38698,38704,38704,38706,38707,38707,38707,38712,38713,38715,38715,38715,38715,38717,38718,38722,38723,38723,38724,38726,38726,38728,38729,38733,38733,38733,38733,38735,38735,38735,38735,38737,38737,38737,38738,38741,38741,38741,38742,38745,38745,38748,38748,38750,38750,38752,38754,38756,38756,38758,38758,38760,38761,38763,38763,38765,38765,38769,38769,38772,38772,38777,38778,38780,38780,38785,38785,38788,38790,38795,38795,38797,38797,38799,38800,38808,38808,38812,38812,38816,38816,38819,38819,38822,38822,38824,38824,38827,38827,38829,38829,38835,38836,38851,38851,38854,38854,38856,38856,38859,38859,38867,38867,38876,38876,38893,38894,38898,38899,38901,38902,38907,38907,38911,38911,38913,38915,38917,38918,38920,38920,38924,38924,38927,38931,38935,38936,38938,38938,38945,38945,38948,38948,38956,38957,38964,38964,38967,38968,38971,38973,38982,38982,38987,38991,38996,38997,38999,38999,38999,39000,39003,39003,39006,39006,39013,39013,39013,39013,39015,39015,39019,39019,39023,39025,39027,39028,39080,39080,39082,39082,39087,39087,39089,39089,39094,39094,39107,39108,39110,39110,39131,39132,39135,39135,39138,39138,39145,39145,39147,39147,39149,39151,39154,39154,39156,39156,39164,39166,39171,39171,39173,39173,39177,39178,39180,39180,39184,39184,39186,39188,39192,39192,39197,39198,39200,39201,39204,39204,39207,39207,39207,39208,39212,39212,39214,39214,39229,39230,39234,39234,39237,39237,39241,39241,39243,39244,39248,39250,39253,39253,39255,39255,39318,39321,39326,39326,39326,39326,39333,39333,39336,39336,39340,39342,39347,39348,39356,39356,39361,39361,39364,39366,39368,39368,39376,39378,39381,39381,39384,39384,39387,39387,39389,39389,39391,39391,39394,39394,39405,39406,39409,39410,39416,39416,39419,39419,39423,39423,39425,39425,39429,39429,39438,39439,39442,39443,39449,39449,39464,39464,39467,39467,39472,39472,39479,39479,39486,39486,39488,39488,39490,39491,39493,39493,39501,39502,39502,39502,39509,39509,39511,39511,39514,39515,39519,39519,39522,39522,39524,39525,39529,39531,39592,39592,39597,39597,39600,39600,39608,39608,39612,39612,39616,39616,39620,39620,39631,39631,39633,39633,39635,39636,39640,39641,39641,39641,39644,39644,39644,39644,39646,39647,39650,39651,39654,39654,39658,39659,39661,39663,39665,39665,39668,39668,39671,39671,39675,39675,39686,39686,39704,39704,39706,39706,39711,39711,39714,39715,39717,39717,39719,39722,39726,39727,39729,39730,39739,39740,39745,39749,39757,39759,39761,39761,39764,39764,39768,39768,39770,39770,39791,39791,39794,39794,39794,39794,39796,39797,39797,39797,39811,39811,39822,39823,39823,39823,39825,39827,39830,39831,39839,39840,39848,39848,39850,39851,39853,39854,39857,39857,39857,39857,39860,39860,39865,39865,39867,39867,39867,39867,39872,39872,39878,39878,39881,39882,39887,39887,39889,39890,39892,39892,39894,39894,39899,39899,39905,39908,39912,39912,39920,39922,39925,39925,39936,39936,39936,39936,39940,39940,39942,39942,39944,39946,39948,39949,39952,39952,39954,39957,39963,39963,39969,39969,39972,39973,39981,39984,39986,39986,39993,39995,39998,39998,40006,40008,40018,40018,40023,40023,40026,40026,40032,40032,40039,40039,40054,40054,40056,40056,40165,40165,40167,40167,40169,40169,40171,40172,40176,40176,40179,40180,40182,40182,40195,40195,40198,40201,40206,40206,40210,40210,40213,40213,40219,40219,40223,40223,40227,40227,40230,40230,40232,40232,40234,40236,40251,40251,40254,40255,40257,40257,40260,40260,40262,40262,40264,40264,40272,40273,40281,40281,40284,40286,40288,40289,40292,40292,40299,40299,40299,40300,40303,40304,40304,40304,40306,40306,40314,40314,40327,40327,40329,40329,40335,40335,40346,40346,40356,40356,40361,40361,40363,40363,40367,40367,40370,40370,40372,40372,40376,40376,40378,40379,40385,40386,40388,40388,40390,40390,40399,40399,40403,40403,40409,40409,40422,40422,40429,40429,40431,40431,40434,40434,40440,40442,40445,40445,40473,40473,40473,40475,40478,40478,40565,40565,40568,40569,40573,40573,40575,40575,40577,40577,40584,40584,40587,40588,40593,40595,40597,40597,40599,40599,40605,40605,40607,40607,40613,40614,40617,40618,40621,40621,40632,40636,40638,40639,40644,40644,40652,40657,40657,40658,40660,40660,40664,40665,40667,40670,40672,40672,40677,40677,40680,40680,40687,40687,40692,40692,40694,40695,40697,40697,40699,40701,40711,40712,40718,40718,40723,40723,40725,40725,40736,40737,40748,40748,40763,40763,40766,40766,40778,40779,40782,40783,40786,40786,40788,40788,40799,40803,40806,40807,40810,40810,40812,40812,40818,40818,40822,40823,40845,40845,40853,40853,40860,40861,40864,40864,63785,63785,63785,63785,63964,63964,63964,63964,64014,64014,64014,64015,64015,64016,64016,64017,64017,64018,64018,64019,64019,64020,64020,64021,64021,64022,64022,64023,64023,64024,64024,64025,64025,64026,64026,64027,64027,64028,64028,64029,64029,64030,64030,64031,64031,64032,64032,64033,64033,64034,64034,64035,64035,64036,64036,64037,64037,64038,64038,64039,64039,64040,64040,64041,64041,64042,64042,64043,64043,64044,64044,64045,64045,64045,65281,65282,65282,65287,65287,65374,65377,65439,65504,65506,65506,65506,65506,65508,65508,65509]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add936 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(18,21888,[32,127,164,164,167,168,176,177,183,183,215,215,224,225,232,234,236,237,242,243,247,247,249,250,252,252,257,257,275,275,283,283,299,299,324,324,328,328,333,333,363,363,462,462,464,464,466,466,468,468,470,470,472,472,474,474,476,476,593,593,609,609,711,711,713,715,729,729,913,929,931,937,945,961,963,969,1025,1025,1040,1103,1105,1105,8208,8208,8211,8214,8216,8217,8220,8221,8229,8230,8240,8240,8242,8243,8245,8245,8251,8251,8364,8364,8451,8451,8453,8453,8457,8457,8470,8470,8481,8481,8544,8555,8560,8569,8592,8595,8598,8601,8712,8712,8719,8719,8721,8721,8725,8725,8730,8730,8733,8736,8739,8739,8741,8741,8743,8747,8750,8750,8756,8759,8765,8765,8776,8776,8780,8780,8786,8786,8800,8801,8804,8807,8814,8815,8853,8853,8857,8857,8869,8869,8895,8895,8978,8978,9312,9321,9332,9371,9472,9547,9552,9587,9601,9615,9619,9621,9632,9633,9650,9651,9660,9661,9670,9671,9675,9675,9678,9679,9698,9701,9733,9734,9737,9737,9792,9792,9794,9794,12288,12291,12293,12311,12317,12318,12321,12329,12353,12435,12443,12446,12449,12534,12540,12542,12549,12585,12832,12841,12849,12849,12963,12963,13198,13199,13212,13214,13217,13217,13252,13252,13262,13262,13265,13266,13269,13269,19968,40869,63788,63788,63865,63865,63893,63893,63975,63975,63985,63985,64012,64015,64017,64017,64019,64020,64024,64024,64031,64033,64035,64036,64039,64041,65072,65073,65075,65092,65097,65106,65108,65111,65113,65126,65128,65131,65281,65374,65504,65509]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add949 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(19,17144,[32,127,161,161,164,164,167,168,170,170,173,174,176,180,182,186,188,191,198,198,208,208,215,216,222,223,230,230,240,240,247,248,254,254,273,273,294,295,305,307,312,312,319,322,329,331,338,339,358,359,711,711,720,720,728,731,733,733,913,929,931,937,945,961,963,969,1025,1025,1040,1103,1105,1105,8213,8213,8216,8217,8220,8221,8224,8225,8229,8230,8240,8240,8242,8243,8251,8251,8308,8308,8319,8319,8321,8324,8364,8364,8451,8451,8457,8457,8467,8467,8470,8470,8481,8482,8486,8486,8491,8491,8531,8532,8539,8542,8544,8553,8560,8569,8592,8601,8658,8658,8660,8660,8704,8704,8706,8707,8711,8712,8715,8715,8719,8719,8721,8721,8730,8730,8733,8734,8736,8736,8741,8741,8743,8748,8750,8750,8756,8757,8764,8765,8786,8786,8800,8801,8804,8805,8810,8811,8834,8835,8838,8839,8857,8857,8869,8869,8978,8978,9312,9326,9332,9346,9372,9397,9424,9449,9472,9475,9484,9547,9618,9618,9632,9633,9635,9641,9650,9651,9654,9655,9660,9661,9664,9665,9670,9672,9675,9675,9678,9681,9733,9734,9742,9743,9756,9756,9758,9758,9792,9792,9794,9794,9824,9825,9827,9829,9831,9834,9836,9837,12288,12291,12296,12305,12307,12309,12353,12435,12449,12534,12593,12686,12800,12828,12896,12923,12927,12927,13184,13188,13192,13258,13263,13264,13267,13267,13270,13270,13272,13272,13275,13277,19968,19969,19971,19971,19975,19979,19981,19981,19985,19985,19988,19990,19992,19993,19998,19998,20013,20013,20018,20018,20024,20025,20027,20027,20034,20035,20037,20037,20043,20043,20045,20047,20054,20054,20056,20057,20061,20063,20075,20075,20077,20077,20083,20083,20086,20087,20094,20094,20098,20098,20102,20102,20104,20104,20107,20108,20110,20110,20112,20114,20116,20117,20120,20120,20123,20123,20126,20126,20129,20130,20132,20134,20136,20136,20139,20142,20150,20150,20154,20154,20160,20161,20164,20164,20167,20167,20170,20171,20173,20173,20180,20185,20189,20189,20191,20191,20195,20197,20208,20208,20210,20210,20214,20215,20219,20219,20225,20225,20233,20235,20237,20241,20271,20271,20276,20276,20278,20278,20280,20280,20282,20282,20284,20285,20291,20291,20294,20296,20301,20305,20309,20309,20313,20316,20329,20329,20335,20336,20339,20339,20342,20342,20346,20346,20350,20351,20353,20353,20355,20356,20358,20358,20360,20360,20362,20363,20365,20365,20367,20367,20369,20369,20374,20374,20376,20376,20379,20379,20381,20381,20398,20399,20405,20406,20415,20415,20418,20420,20425,20426,20430,20430,20433,20433,20435,20436,20439,20439,20442,20442,20445,20445,20447,20449,20462,20463,20465,20465,20467,20467,20469,20469,20472,20472,20474,20474,20482,20482,20486,20486,20489,20489,20491,20491,20493,20493,20497,20498,20502,20502,20505,20506,20508,20508,20510,20511,20513,20513,20515,20516,20518,20520,20522,20525,20539,20539,20547,20547,20551,20553,20559,20559,20565,20565,20570,20570,20572,20572,20581,20581,20596,20598,20600,20600,20608,20608,20613,20613,20621,20621,20625,20625,20632,20633,20652,20653,20658,20659,20661,20661,20663,20663,20670,20670,20677,20677,20681,20682,20687,20687,20689,20689,20693,20694,20698,20698,20702,20702,20709,20709,20711,20711,20717,20717,20729,20729,20731,20731,20735,20737,20740,20740,20742,20742,20745,20745,20754,20754,20767,20767,20769,20769,20778,20778,20786,20786,20791,20791,20794,20794,20796,20796,20800,20801,20803,20809,20811,20814,20818,20818,20828,20828,20834,20834,20837,20837,20839,20846,20849,20849,20853,20856,20860,20860,20864,20864,20870,20870,20874,20874,20877,20877,20882,20882,20885,20885,20887,20887,20896,20896,20901,20901,20906,20906,20908,20908,20918,20919,20925,20925,20932,20932,20934,20934,20937,20937,20939,20941,20956,20958,20961,20961,20976,20977,20982,20982,20984,20986,20989,20989,20992,20992,20995,20995,20998,21000,21002,21002,21006,21006,21009,21009,21015,21015,21021,21021,21028,21029,21033,21034,21038,21038,21040,21040,21046,21051,21059,21059,21063,21063,21066,21069,21076,21076,21078,21078,21083,21083,21085,21085,21089,21089,21097,21098,21103,21103,21106,21106,21109,21109,21117,21117,21119,21119,21123,21123,21127,21129,21133,21133,21137,21138,21147,21147,21151,21152,21155,21156,21161,21163,21182,21182,21185,21185,21187,21187,21189,21189,21191,21191,21193,21193,21197,21197,21202,21202,21205,21206,21208,21209,21211,21211,21213,21215,21218,21220,21235,21235,21237,21237,21240,21240,21242,21243,21246,21247,21253,21253,21256,21256,21261,21261,21263,21264,21269,21271,21273,21273,21280,21281,21283,21283,21290,21290,21295,21295,21305,21305,21311,21313,21315,21316,21319,21322,21325,21325,21329,21332,21335,21335,21338,21338,21340,21340,21342,21342,21344,21344,21350,21350,21352,21352,21359,21361,21364,21365,21367,21367,21373,21373,21375,21375,21380,21380,21395,21395,21400,21400,21402,21402,21407,21408,21413,21414,21421,21421,21435,21435,21443,21443,21448,21451,21453,21453,21460,21460,21462,21463,21467,21467,21473,21477,21481,21485,21487,21491,21496,21496,21507,21508,21512,21514,21516,21521,21531,21531,21533,21533,21535,21536,21542,21542,21545,21545,21547,21547,21555,21555,21560,21561,21563,21564,21566,21566,21570,21570,21576,21576,21578,21578,21585,21585,21608,21608,21610,21610,21617,21617,21619,21619,21621,21621,21627,21629,21632,21632,21638,21638,21644,21644,21646,21646,21648,21648,21668,21668,21672,21672,21675,21676,21683,21683,21688,21688,21693,21693,21696,21697,21700,21700,21704,21705,21729,21729,21733,21733,21736,21736,21741,21742,21746,21746,21754,21754,21764,21764,21766,21767,21774,21774,21776,21776,21788,21788,21807,21807,21809,21809,21813,21813,21822,21822,21828,21828,21830,21830,21839,21839,21843,21843,21846,21846,21854,21854,21859,21859,21884,21884,21888,21888,21892,21892,21894,21895,21897,21898,21912,21914,21916,21917,21927,21927,21929,21932,21934,21934,21957,21957,21959,21959,21972,21972,21978,21978,21980,21980,21983,21983,21987,21988,22013,22014,22022,22022,22025,22025,22036,22036,22039,22039,22063,22063,22066,22066,22068,22068,22070,22070,22099,22099,22120,22120,22123,22123,22132,22132,22150,22150,22181,22181,22188,22188,22190,22190,22196,22196,22204,22204,22218,22218,22221,22221,22225,22225,22234,22235,22238,22238,22240,22240,22256,22256,22265,22266,22275,22276,22280,22280,22283,22283,22285,22285,22290,22291,22294,22294,22296,22296,22303,22303,22312,22312,22317,22317,22320,22320,22331,22331,22336,22336,22338,22338,22343,22343,22346,22346,22349,22350,22352,22353,22369,22369,22372,22372,22374,22374,22378,22378,22382,22382,22384,22384,22389,22389,22396,22396,22402,22402,22408,22408,22411,22411,22419,22419,22432,22432,22434,22435,22467,22467,22471,22472,22475,22475,22478,22478,22495,22496,22512,22512,22516,22516,22519,22519,22521,22522,22524,22524,22528,22528,22530,22530,22533,22534,22536,22538,22558,22558,22561,22561,22564,22564,22567,22567,22570,22570,22575,22577,22580,22581,22586,22586,22602,22603,22607,22607,22609,22609,22612,22612,22615,22616,22618,22618,22622,22622,22625,22626,22628,22628,22645,22645,22649,22649,22652,22652,22654,22654,22659,22659,22661,22661,22665,22665,22675,22675,22684,22684,22686,22687,22696,22697,22702,22702,22707,22707,22714,22715,22718,22718,22721,22721,22725,22725,22727,22727,22734,22734,22737,22737,22739,22739,22741,22741,22744,22745,22750,22751,22756,22756,22763,22764,22767,22767,22777,22779,22781,22781,22799,22799,22804,22806,22809,22810,22812,22812,22818,22818,22823,22823,22825,22827,22829,22830,22833,22833,22839,22839,22846,22846,22852,22852,22855,22857,22862,22865,22868,22869,22871,22871,22874,22874,22880,22880,22882,22882,22887,22887,22890,22894,22899,22900,22904,22904,22909,22909,22914,22916,22922,22922,22931,22931,22934,22935,22937,22937,22949,22949,22952,22952,22956,22956,22969,22969,22971,22971,22974,22974,22979,22979,22982,22982,22985,22985,22987,22987,22992,22993,22995,22996,23001,23002,23004,23005,23014,23014,23016,23016,23018,23018,23020,23020,23022,23022,23032,23032,23035,23035,23039,23039,23041,23041,23043,23043,23057,23057,23064,23064,23067,23068,23071,23072,23077,23077,23081,23081,23094,23094,23100,23100,23105,23105,23110,23110,23113,23113,23130,23130,23138,23138,23142,23142,23186,23186,23194,23195,23204,23204,23233,23234,23236,23236,23241,23241,23244,23244,23265,23265,23270,23270,23273,23273,23301,23301,23305,23305,23307,23308,23318,23318,23338,23338,23360,23360,23363,23363,23376,23377,23380,23381,23383,23384,23386,23386,23388,23389,23391,23391,23395,23396,23401,23401,23403,23403,23408,23409,23413,23413,23416,23416,23418,23418,23420,23420,23429,23429,23431,23433,23435,23436,23439,23439,23443,23443,23445,23452,23458,23462,23468,23468,23470,23470,23472,23472,23475,23478,23480,23481,23487,23488,23490,23495,23500,23500,23504,23504,23506,23508,23511,23511,23518,23519,23521,23522,23524,23529,23531,23532,23534,23535,23541,23542,23544,23544,23546,23546,23553,23553,23556,23556,23559,23563,23565,23567,23569,23569,23574,23574,23577,23577,23588,23588,23592,23592,23601,23601,23608,23612,23614,23616,23621,23622,23624,23624,23627,23627,23629,23630,23633,23633,23637,23637,23643,23643,23648,23648,23650,23650,23652,23653,23660,23660,23663,23663,23665,23665,23673,23673,23696,23697,23713,23713,23721,23721,23723,23724,23729,23729,23731,23731,23733,23733,23735,23736,23738,23738,23742,23742,23744,23744,23769,23769,23776,23776,23784,23784,23791,23792,23796,23796,23798,23798,23803,23803,23805,23805,23815,23815,23821,23822,23825,23825,23828,23828,23830,23831,23833,23833,23847,23847,23849,23849,23883,23884,23888,23888,23913,23913,23916,23916,23919,23919,23943,23943,23947,23947,23965,23965,23968,23968,23970,23970,23978,23978,23992,23992,23994,23994,23996,23997,24013,24013,24018,24018,24022,24022,24029,24030,24033,24034,24037,24040,24043,24043,24046,24046,24049,24052,24055,24055,24061,24062,24066,24067,24070,24070,24076,24076,24081,24081,24086,24086,24089,24089,24091,24091,24093,24093,24101,24101,24107,24107,24109,24109,24115,24115,24118,24118,24120,24120,24125,24125,24127,24128,24132,24133,24135,24135,24140,24140,24149,24149,24159,24159,24161,24163,24178,24180,24183,24185,24187,24190,24196,24196,24199,24199,24202,24202,24207,24207,24213,24213,24215,24215,24218,24218,24220,24220,24224,24224,24230,24231,24235,24235,24237,24237,24245,24248,24254,24254,24258,24258,24264,24266,24272,24272,24275,24275,24278,24278,24282,24283,24287,24288,24290,24291,24300,24300,24307,24307,24310,24311,24314,24315,24321,24321,24324,24324,24330,24330,24335,24335,24337,24337,24339,24341,24343,24344,24347,24347,24351,24351,24358,24359,24361,24361,24369,24369,24373,24373,24378,24378,24380,24380,24392,24392,24394,24394,24396,24396,24398,24398,24406,24407,24409,24409,24411,24411,24418,24418,24422,24423,24425,24429,24432,24433,24439,24439,24441,24441,24444,24444,24447,24449,24453,24453,24455,24455,24458,24460,24464,24466,24471,24473,24478,24478,24480,24481,24488,24490,24494,24494,24501,24501,24503,24503,24505,24505,24509,24509,24515,24515,24517,24517,24524,24525,24534,24537,24544,24544,24555,24555,24565,24565,24573,24573,24575,24575,24591,24591,24594,24594,24598,24598,24604,24605,24608,24609,24613,24613,24615,24616,24618,24618,24623,24623,24641,24643,24653,24653,24656,24656,24658,24658,24661,24661,24665,24665,24669,24669,24674,24677,24680,24682,24684,24685,24687,24688,24709,24709,24713,24713,24716,24717,24724,24724,24726,24726,24730,24731,24735,24736,24739,24740,24743,24743,24752,24752,24754,24756,24758,24758,24760,24760,24764,24765,24773,24773,24775,24775,24785,24785,24794,24794,24796,24796,24799,24801,24816,24817,24819,24819,24822,24822,24825,24827,24833,24833,24838,24838,24840,24841,24845,24847,24853,24853,24858,24859,24863,24863,24871,24871,24880,24880,24884,24884,24887,24887,24892,24892,24894,24895,24898,24898,24900,24900,24903,24904,24906,24908,24915,24915,24917,24917,24920,24921,24925,24925,24927,24927,24930,24932,24935,24936,24939,24939,24942,24942,24944,24944,24950,24951,24957,24958,24961,24962,24970,24970,24974,24974,24976,24977,24980,24980,24984,24986,24996,24996,24999,24999,25001,25001,25003,25004,25006,25006,25010,25010,25014,25014,25018,25018,25022,25022,25027,25027,25031,25035,25062,25062,25074,25074,25078,25080,25082,25082,25084,25084,25087,25088,25095,25096,25098,25098,25100,25102,25104,25106,25110,25110,25114,25114,25119,25119,25121,25121,25130,25130,25134,25134,25136,25137,25140,25140,25142,25142,25150,25153,25159,25161,25163,25163,25165,25165,25171,25171,25176,25176,25198,25198,25201,25201,25206,25206,25209,25209,25212,25212,25215,25216,25220,25220,25225,25226,25233,25234,25237,25237,25239,25240,25243,25243,25259,25259,25265,25265,25269,25269,25273,25273,25276,25277,25282,25282,25287,25289,25292,25293,25295,25296,25298,25300,25302,25305,25307,25308,25324,25327,25329,25329,25331,25331,25335,25335,25342,25343,25345,25345,25351,25351,25353,25353,25361,25361,25387,25387,25391,25391,25402,25403,25405,25406,25417,25417,25420,25420,25423,25424,25429,25429,25447,25448,25454,25454,25458,25458,25463,25463,25466,25467,25471,25471,25475,25475,25480,25481,25484,25484,25490,25490,25494,25494,25496,25496,25499,25499,25504,25506,25509,25509,25511,25514,25536,25536,25540,25540,25542,25542,25551,25552,25558,25558,25562,25563,25569,25569,25581,25582,25588,25588,25590,25591,25613,25613,25615,25615,25620,25620,25622,25623,25628,25628,25634,25634,25644,25645,25658,25658,25662,25662,25688,25688,25696,25696,25705,25705,25711,25711,25720,25722,25736,25736,25745,25747,25754,25754,25758,25758,25764,25765,25771,25771,25773,25774,25776,25776,25778,25778,25787,25787,25793,25793,25796,25797,25799,25799,25802,25802,25805,25806,25810,25810,25812,25812,25816,25816,25818,25818,25825,25826,25829,25831,25836,25836,25842,25842,25844,25844,25850,25850,25854,25854,25856,25856,25860,25860,25880,25880,25885,25885,25891,25891,25898,25900,25903,25903,25910,25913,25915,25915,25918,25919,25925,25925,25928,25928,25933,25935,25937,25937,25942,25943,25950,25950,25954,25955,25958,25958,25964,25965,25970,25970,25972,25973,25975,25976,25982,25982,25986,25987,25989,25989,25991,25991,25996,25996,26000,26001,26007,26007,26009,26009,26011,26012,26015,26015,26017,26017,26020,26021,26023,26023,26027,26028,26031,26032,26039,26039,26041,26041,26044,26045,26049,26049,26053,26053,26059,26060,26063,26063,26066,26066,26071,26071,26080,26080,26083,26083,26085,26086,26088,26089,26092,26093,26097,26097,26100,26100,26106,26109,26111,26111,26118,26119,26121,26122,26124,26124,26126,26129,26131,26133,26142,26144,26149,26149,26151,26152,26157,26157,26159,26161,26164,26164,26166,26166,26170,26171,26177,26180,26185,26185,26187,26187,26191,26191,26201,26201,26203,26203,26205,26207,26212,26217,26219,26219,26222,26223,26227,26228,26230,26232,26234,26234,26244,26244,26247,26249,26254,26254,26256,26257,26262,26264,26269,26269,26272,26272,26274,26274,26283,26283,26286,26286,26290,26292,26297,26297,26299,26299,26302,26302,26308,26308,26310,26311,26313,26313,26326,26326,26329,26329,26332,26333,26336,26336,26342,26342,26352,26352,26354,26356,26359,26362,26364,26364,26366,26368,26371,26371,26376,26377,26379,26379,26381,26381,26388,26389,26391,26391,26395,26395,26397,26399,26406,26408,26410,26414,26417,26417,26420,26420,26422,26422,26426,26426,26429,26429,26438,26438,26441,26441,26446,26449,26451,26451,26454,26454,26460,26460,26462,26463,26477,26477,26479,26481,26483,26483,26485,26485,26487,26487,26491,26491,26494,26495,26503,26503,26505,26505,26507,26507,26511,26512,26515,26515,26517,26517,26519,26519,26522,26522,26524,26525,26543,26544,26547,26547,26550,26552,26558,26558,26564,26564,26575,26580,26586,26586,26589,26589,26601,26601,26604,26604,26607,26609,26611,26614,26619,26619,26622,26622,26642,26643,26646,26647,26657,26658,26666,26666,26671,26671,26680,26681,26684,26685,26688,26691,26696,26696,26702,26702,26704,26705,26707,26708,26733,26733,26742,26742,26751,26751,26753,26753,26757,26757,26767,26767,26771,26772,26775,26775,26781,26781,26783,26783,26785,26786,26791,26792,26797,26797,26799,26801,26803,26803,26805,26806,26820,26821,26825,26825,26827,26827,26829,26829,26834,26834,26837,26837,26839,26840,26842,26842,26847,26848,26855,26856,26862,26862,26866,26866,26873,26874,26880,26880,26885,26885,26893,26894,26898,26898,26919,26919,26928,26928,26941,26941,26943,26943,26954,26954,26963,26965,26967,26967,26969,26970,26974,26974,26976,26979,26984,26984,26987,26987,26989,26991,26997,26997,26999,27001,27029,27029,27035,27036,27045,27045,27047,27047,27054,27054,27060,27060,27067,27067,27073,27073,27075,27075,27083,27085,27088,27088,27112,27112,27114,27114,27131,27131,27133,27133,27135,27135,27138,27138,27146,27146,27153,27153,27155,27155,27159,27159,27161,27161,27166,27167,27169,27169,27171,27171,27189,27189,27192,27194,27197,27197,27204,27204,27208,27208,27211,27211,27218,27219,27224,27225,27231,27231,27233,27233,27243,27243,27264,27264,27268,27268,27273,27273,27277,27278,27287,27287,27292,27292,27298,27299,27315,27315,27323,27323,27330,27331,27347,27347,27354,27355,27382,27382,27387,27387,27396,27396,27402,27402,27404,27404,27410,27410,27414,27414,27424,27425,27427,27427,27442,27442,27450,27450,27453,27454,27462,27463,27468,27468,27470,27470,27472,27472,27487,27487,27489,27494,27498,27498,27506,27506,27511,27512,27515,27515,27519,27519,27523,27524,27526,27526,27529,27530,27542,27542,27544,27544,27550,27550,27566,27567,27570,27570,27573,27573,27575,27575,27578,27578,27580,27580,27583,27583,27585,27585,27589,27590,27595,27595,27597,27597,27599,27599,27602,27604,27606,27608,27611,27611,27627,27628,27656,27656,27663,27663,27665,27665,27667,27667,27683,27683,27700,27700,27703,27704,27710,27710,27712,27714,27726,27726,27728,27728,27733,27733,27735,27735,27738,27738,27741,27744,27752,27752,27754,27754,27757,27757,27760,27760,27762,27762,27766,27766,27770,27770,27773,27774,27777,27779,27781,27784,27788,27788,27792,27792,27794,27798,27801,27803,27819,27819,27822,27822,27827,27827,27832,27833,27835,27839,27841,27842,27844,27844,27849,27850,27852,27852,27859,27859,27861,27861,27863,27863,27867,27867,27873,27875,27877,27877,27880,27880,27883,27883,27886,27888,27891,27891,27915,27916,27921,27921,27927,27927,27929,27929,27931,27931,27934,27934,27941,27941,27943,27943,27945,27946,27954,27954,27957,27958,27960,27961,27963,27963,27965,27966,27969,27969,27993,27994,27996,27996,28003,28003,28006,28006,28009,28010,28012,28012,28014,28014,28020,28020,28023,28025,28031,28031,28037,28037,28039,28041,28044,28046,28049,28049,28051,28051,28053,28053,28079,28079,28082,28082,28085,28085,28096,28096,28099,28103,28107,28107,28111,28111,28113,28113,28120,28122,28126,28126,28129,28129,28136,28136,28138,28139,28142,28142,28145,28145,28147,28147,28149,28149,28151,28155,28183,28183,28185,28187,28191,28193,28195,28198,28203,28205,28207,28207,28210,28210,28212,28212,28214,28214,28216,28216,28218,28218,28220,28222,28227,28228,28234,28234,28237,28237,28246,28246,28248,28248,28251,28252,28254,28255,28263,28263,28267,28267,28270,28271,28274,28275,28282,28282,28304,28304,28310,28310,28316,28317,28319,28319,28322,28322,28325,28325,28330,28331,28335,28335,28337,28337,28342,28342,28346,28346,28354,28354,28356,28357,28361,28361,28363,28364,28366,28366,28369,28369,28371,28372,28399,28399,28404,28404,28408,28408,28414,28415,28417,28418,28422,28422,28431,28431,28433,28433,28436,28437,28448,28448,28450,28451,28459,28460,28465,28466,28472,28472,28479,28479,28481,28481,28497,28497,28500,28500,28503,28504,28506,28507,28510,28511,28514,28514,28516,28516,28525,28526,28528,28528,28538,28538,28540,28542,28545,28545,28548,28548,28552,28552,28557,28558,28560,28560,28564,28564,28567,28567,28579,28580,28583,28583,28590,28591,28593,28593,28595,28595,28601,28601,28606,28606,28608,28611,28618,28618,28629,28629,28634,28634,28639,28641,28644,28644,28649,28649,28651,28652,28655,28655,28657,28657,28670,28670,28673,28673,28677,28678,28681,28681,28683,28683,28687,28687,28689,28689,28693,28693,28696,28696,28698,28703,28707,28707,28711,28712,28719,28719,28727,28727,28734,28734,28748,28748,28752,28753,28760,28760,28765,28765,28771,28771,28779,28779,28784,28784,28792,28792,28796,28797,28805,28805,28810,28810,28814,28814,28818,28818,28824,28826,28833,28833,28836,28836,28843,28845,28847,28847,28851,28851,28855,28857,28872,28872,28875,28875,28879,28879,28888,28889,28893,28893,28895,28895,28913,28913,28921,28921,28925,28925,28932,28932,28937,28937,28940,28940,28953,28954,28958,28958,28961,28961,28966,28966,28976,28976,28982,28982,28999,28999,29001,29002,29004,29004,29006,29006,29008,29008,29014,29014,29017,29017,29020,29020,29022,29022,29028,29031,29033,29033,29036,29036,29038,29038,29053,29053,29060,29060,29065,29066,29071,29071,29074,29074,29076,29076,29081,29081,29087,29087,29090,29090,29100,29100,29105,29105,29113,29114,29118,29118,29121,29121,29123,29123,29128,29129,29134,29134,29136,29136,29138,29138,29140,29141,29151,29151,29157,29159,29165,29166,29179,29180,29182,29184,29190,29190,29200,29200,29211,29211,29226,29226,29228,29229,29232,29232,29234,29234,29237,29238,29242,29243,29245,29246,29248,29248,29254,29256,29260,29260,29266,29266,29272,29273,29275,29275,29277,29277,29279,29279,29281,29282,29287,29287,29289,29289,29298,29298,29305,29305,29309,29309,29312,29313,29346,29346,29351,29351,29356,29356,29359,29359,29376,29376,29378,29378,29380,29380,29390,29390,29392,29392,29399,29399,29401,29401,29409,29409,29417,29417,29432,29433,29436,29437,29450,29450,29462,29462,29467,29469,29477,29477,29481,29483,29494,29495,29502,29503,29508,29509,29520,29520,29522,29522,29527,29527,29544,29544,29546,29546,29552,29552,29554,29554,29557,29557,29560,29560,29562,29563,29572,29572,29574,29575,29577,29577,29579,29579,29582,29582,29588,29588,29590,29592,29599,29599,29607,29607,29609,29609,29613,29613,29618,29619,29625,29625,29632,29632,29634,29634,29641,29642,29644,29645,29647,29647,29654,29654,29657,29657,29661,29662,29664,29664,29667,29670,29673,29674,29677,29677,29687,29687,29689,29689,29693,29694,29697,29697,29699,29699,29701,29703,29705,29705,29715,29715,29723,29723,29728,29730,29733,29734,29736,29736,29738,29740,29742,29744,29747,29750,29752,29752,29754,29754,29759,29761,29763,29764,29771,29771,29781,29781,29783,29783,29785,29788,29790,29792,29794,29794,29796,29797,29800,29802,29807,29807,29822,29822,29826,29827,29831,29831,29833,29833,29835,29835,29848,29848,29852,29852,29854,29855,29857,29857,29859,29859,29861,29861,29863,29864,29866,29866,29872,29872,29874,29874,29877,29877,29881,29881,29885,29885,29887,29887,29894,29894,29898,29898,29903,29903,29908,29908,29912,29912,29914,29914,29916,29916,29920,29920,29922,29923,29926,29926,29934,29934,29943,29943,29953,29953,29956,29956,29969,29969,29973,29973,29976,29976,29978,29979,29983,29983,29987,29987,29989,29990,29992,29992,29995,29996,30000,30003,30007,30008,30010,30010,30023,30023,30028,30028,30031,30031,30033,30033,30035,30036,30041,30041,30043,30045,30050,30050,30053,30054,30058,30058,30063,30064,30069,30070,30072,30072,30074,30074,30079,30079,30086,30087,30090,30091,30094,30095,30097,30097,30109,30109,30117,30117,30123,30123,30129,30131,30133,30133,30136,30137,30140,30142,30146,30146,30149,30149,30151,30151,30157,30157,30162,30162,30164,30165,30168,30169,30171,30171,30178,30178,30192,30192,30194,30194,30196,30196,30202,30202,30204,30204,30208,30208,30221,30221,30233,30233,30239,30242,30244,30244,30246,30246,30267,30267,30274,30274,30284,30284,30286,30286,30290,30290,30294,30294,30305,30305,30308,30308,30313,30313,30316,30316,30320,30320,30322,30322,30328,30328,30331,30334,30340,30340,30342,30343,30350,30350,30352,30352,30355,30355,30382,30382,30394,30394,30399,30399,30402,30403,30406,30406,30408,30408,30410,30410,30418,30418,30422,30422,30427,30428,30430,30431,30433,30433,30435,30436,30439,30439,30446,30446,30450,30450,30452,30452,30456,30456,30460,30460,30462,30462,30465,30465,30468,30468,30472,30473,30475,30475,30494,30494,30496,30496,30505,30505,30519,30520,30522,30522,30524,30524,30528,30528,30541,30541,30555,30555,30561,30561,30563,30563,30566,30566,30571,30571,30585,30585,30590,30591,30603,30603,30609,30609,30622,30622,30629,30629,30636,30637,30640,30640,30643,30643,30651,30652,30655,30655,30679,30679,30683,30684,30690,30691,30693,30693,30697,30697,30701,30703,30707,30707,30722,30722,30738,30738,30757,30759,30764,30764,30770,30770,30772,30772,30789,30789,30799,30799,30813,30813,30827,30828,30831,30831,30844,30844,30849,30849,30855,30855,30860,30862,30865,30865,30871,30871,30883,30883,30887,30887,30889,30889,30906,30908,30913,30913,30917,30917,30922,30923,30926,30926,30928,30928,30952,30952,30956,30956,30959,30959,30965,30965,30971,30971,30977,30977,30990,30990,30998,30998,31018,31020,31034,31034,31038,31038,31040,31041,31047,31049,31056,31056,31062,31063,31066,31070,31072,31072,31077,31077,31080,31080,31085,31085,31098,31098,31103,31103,31105,31105,31117,31119,31121,31121,31142,31143,31146,31146,31150,31150,31153,31153,31155,31155,31161,31161,31165,31169,31177,31179,31185,31186,31189,31189,31192,31192,31199,31199,31204,31204,31206,31207,31209,31209,31227,31227,31232,31232,31237,31237,31240,31240,31243,31243,31245,31245,31252,31252,31255,31255,31257,31258,31260,31260,31263,31264,31278,31278,31281,31281,31286,31287,31291,31293,31295,31296,31302,31302,31305,31305,31309,31310,31319,31319,31329,31330,31337,31337,31339,31339,31344,31344,31348,31348,31350,31350,31353,31354,31357,31357,31359,31359,31361,31361,31364,31364,31368,31368,31378,31379,31381,31381,31384,31384,31391,31391,31401,31402,31406,31407,31418,31418,31428,31429,31431,31431,31434,31435,31447,31447,31449,31449,31453,31453,31455,31456,31459,31459,31461,31461,31466,31466,31469,31469,31471,31471,31478,31478,31481,31482,31487,31487,31503,31503,31505,31505,31513,31513,31515,31515,31518,31518,31520,31520,31526,31526,31532,31533,31545,31545,31558,31558,31561,31561,31563,31565,31567,31570,31572,31572,31574,31574,31584,31584,31596,31596,31598,31598,31605,31605,31613,31613,31623,31623,31627,31627,31631,31631,31636,31637,31639,31639,31642,31642,31645,31645,31649,31649,31661,31661,31665,31665,31668,31668,31672,31672,31680,31681,31684,31684,31686,31687,31689,31689,31698,31698,31712,31712,31716,31716,31721,31721,31751,31751,31762,31762,31774,31774,31777,31777,31783,31783,31786,31787,31805,31807,31811,31811,31820,31821,31840,31840,31844,31844,31852,31852,31859,31859,31875,31875,31881,31881,31890,31890,31893,31893,31895,31896,31903,31903,31909,31909,31911,31911,31918,31918,31921,31923,31929,31929,31934,31934,31946,31946,31958,31958,31966,31968,31975,31975,31995,31995,31998,31998,32000,32000,32002,32002,32004,32008,32010,32011,32013,32013,32016,32016,32020,32020,32023,32027,32032,32034,32043,32044,32046,32048,32051,32051,32053,32053,32057,32058,32066,32070,32080,32080,32094,32094,32097,32098,32102,32102,32104,32104,32106,32106,32110,32110,32113,32115,32118,32118,32121,32121,32127,32127,32142,32143,32147,32147,32156,32156,32160,32160,32162,32162,32172,32173,32177,32178,32180,32181,32184,32184,32186,32187,32189,32191,32199,32199,32202,32203,32214,32214,32216,32216,32218,32218,32221,32222,32224,32225,32227,32227,32232,32233,32236,32236,32239,32239,32244,32244,32251,32251,32265,32266,32277,32277,32283,32283,32285,32287,32289,32289,32291,32291,32299,32299,32302,32303,32305,32305,32311,32311,32317,32318,32321,32321,32323,32323,32326,32327,32338,32338,32340,32341,32350,32350,32353,32353,32361,32363,32365,32365,32368,32368,32377,32377,32380,32380,32386,32386,32396,32396,32399,32399,32403,32403,32406,32406,32408,32408,32411,32412,32566,32566,32568,32568,32570,32570,32588,32588,32592,32592,32596,32597,32618,32619,32622,32622,32624,32624,32626,32626,32629,32629,32631,32631,32633,32633,32645,32645,32648,32648,32650,32650,32652,32652,32654,32654,32660,32660,32666,32666,32670,32670,32676,32676,32680,32681,32690,32690,32696,32697,32701,32701,32705,32705,32709,32709,32714,32714,32716,32716,32718,32718,32722,32722,32724,32725,32735,32737,32745,32745,32747,32747,32752,32752,32761,32761,32764,32764,32768,32769,32771,32771,32773,32774,32777,32777,32780,32780,32784,32784,32789,32789,32791,32792,32813,32813,32819,32819,32822,32822,32829,32829,32831,32831,32835,32835,32838,32838,32842,32842,32854,32854,32856,32856,32858,32858,32862,32862,32879,32880,32882,32883,32887,32887,32893,32895,32900,32903,32905,32905,32907,32908,32918,32918,32923,32923,32925,32925,32929,32930,32933,32933,32937,32938,32943,32943,32945,32946,32948,32948,32954,32954,32963,32964,32972,32972,32974,32974,32986,32987,32990,32990,32993,32993,32996,32997,33009,33009,33012,33012,33016,33016,33021,33021,33026,33026,33029,33032,33034,33034,33048,33048,33050,33051,33059,33059,33065,33065,33067,33067,33071,33071,33081,33081,33086,33086,33099,33099,33102,33102,33104,33105,33108,33109,33125,33126,33131,33131,33136,33137,33144,33146,33151,33152,33160,33160,33162,33162,33167,33167,33178,33178,33180,33181,33184,33184,33187,33187,33192,33192,33203,33203,33205,33205,33210,33210,33213,33216,33218,33218,33222,33222,33229,33229,33240,33240,33247,33247,33251,33251,33253,33253,33255,33256,33258,33258,33261,33261,33267,33268,33274,33276,33278,33278,33285,33285,33287,33288,33290,33290,33292,33293,33298,33298,33307,33308,33310,33311,33313,33313,33322,33324,33333,33335,33337,33337,33344,33344,33349,33349,33351,33351,33369,33369,33380,33380,33382,33382,33390,33391,33393,33394,33398,33398,33400,33400,33406,33406,33419,33419,33421,33422,33426,33426,33433,33434,33437,33437,33439,33439,33445,33446,33449,33449,33452,33455,33457,33457,33459,33459,33463,33465,33467,33469,33471,33471,33489,33490,33492,33493,33495,33495,33499,33499,33502,33503,33505,33505,33509,33511,33521,33521,33533,33534,33537,33541,33545,33545,33559,33559,33576,33576,33579,33579,33583,33583,33585,33585,33588,33590,33592,33593,33600,33600,33607,33607,33609,33610,33615,33615,33617,33618,33651,33651,33655,33655,33659,33659,33673,33674,33678,33678,33686,33686,33688,33688,33694,33694,33698,33698,33705,33707,33725,33725,33729,33729,33733,33733,33737,33738,33740,33740,33747,33747,33750,33750,33756,33756,33769,33769,33771,33771,33775,33778,33780,33780,33785,33785,33789,33789,33795,33796,33802,33802,33804,33806,33833,33833,33836,33836,33841,33841,33848,33848,33853,33853,33865,33865,33879,33879,33883,33883,33889,33889,33891,33891,33894,33894,33899,33900,33903,33903,33909,33909,33914,33914,33936,33936,33940,33940,33945,33945,33948,33948,33953,33953,33970,33970,33976,33976,33979,33980,33983,33984,33986,33986,33988,33988,33990,33990,33993,33993,33995,33995,33997,33997,34001,34001,34010,34010,34028,34028,34030,34030,34036,34036,34044,34044,34065,34065,34067,34068,34071,34072,34074,34074,34078,34078,34081,34081,34083,34083,34085,34085,34092,34093,34095,34095,34109,34109,34111,34111,34113,34113,34115,34115,34121,34121,34126,34126,34131,34131,34137,34137,34147,34147,34152,34154,34157,34157,34180,34180,34183,34183,34191,34191,34193,34193,34196,34196,34203,34203,34214,34214,34216,34218,34223,34224,34234,34234,34241,34241,34249,34249,34253,34255,34261,34261,34268,34269,34276,34277,34281,34282,34295,34295,34298,34299,34303,34303,34306,34306,34310,34311,34314,34314,34326,34327,34330,34330,34349,34349,34367,34367,34382,34382,34384,34384,34388,34389,34395,34396,34398,34399,34407,34407,34425,34425,34442,34442,34444,34444,34451,34451,34467,34468,34473,34473,34503,34503,34507,34507,34516,34516,34521,34521,34523,34523,34527,34527,34532,34532,34541,34541,34558,34558,34560,34560,34562,34563,34568,34568,34584,34584,34586,34586,34588,34588,34638,34638,34645,34645,34647,34647,34655,34655,34662,34662,34664,34664,34676,34676,34678,34678,34680,34680,34690,34690,34701,34701,34719,34719,34722,34722,34739,34739,34746,34746,34756,34756,34784,34784,34796,34796,34799,34799,34802,34802,34809,34809,34811,34811,34814,34814,34821,34821,34847,34847,34850,34851,34865,34865,34870,34870,34875,34875,34880,34880,34886,34886,34892,34893,34898,34899,34903,34903,34905,34905,34907,34907,34909,34909,34913,34915,34920,34920,34923,34923,34928,34928,34930,34930,34935,34935,34942,34943,34945,34946,34952,34952,34955,34955,34957,34957,34962,34962,34966,34967,34974,34974,34987,34987,34996,34996,35009,35010,35023,35023,35028,35029,35033,35033,35036,35037,35039,35039,35041,35041,35048,35048,35059,35061,35064,35064,35069,35069,35079,35079,35088,35088,35090,35091,35096,35097,35109,35109,35114,35114,35126,35126,35128,35128,35131,35131,35137,35137,35140,35140,35167,35167,35172,35172,35178,35178,35186,35186,35199,35199,35201,35201,35203,35203,35206,35207,35211,35211,35215,35215,35219,35219,35222,35222,35233,35233,35241,35242,35250,35250,35258,35258,35261,35261,35264,35264,35282,35282,35299,35299,35316,35316,35320,35320,35328,35328,35330,35331,35336,35336,35338,35338,35340,35340,35342,35342,35347,35347,35350,35352,35355,35355,35357,35357,35359,35359,35363,35363,35365,35365,35370,35370,35373,35373,35377,35377,35380,35380,35382,35382,35386,35387,35408,35408,35412,35413,35419,35419,35422,35422,35424,35424,35426,35427,35430,35430,35433,35433,35437,35438,35440,35443,35445,35445,35449,35449,35461,35461,35463,35463,35468,35469,35475,35475,35477,35477,35480,35480,35486,35486,35488,35489,35491,35494,35496,35496,35498,35498,35504,35504,35506,35506,35513,35513,35516,35516,35518,35519,35522,35522,35524,35524,35527,35527,35531,35531,35533,35533,35535,35535,35538,35538,35542,35542,35547,35548,35553,35553,35558,35559,35562,35563,35565,35566,35569,35569,35574,35576,35578,35578,35582,35582,35584,35586,35588,35588,35598,35598,35600,35600,35604,35604,35606,35607,35609,35611,35613,35613,35616,35616,35624,35624,35627,35628,35635,35635,35641,35641,35649,35649,35657,35657,35662,35663,35672,35672,35674,35674,35676,35676,35686,35686,35692,35692,35695,35696,35700,35700,35703,35703,35709,35709,35712,35712,35722,35722,35728,35728,35730,35731,35734,35734,35738,35738,35895,35895,35903,35903,35905,35905,35910,35910,35912,35912,35914,35914,35916,35916,35925,35925,35930,35930,35937,35937,35946,35947,35961,35962,35970,35970,35978,35978,35980,35980,35997,35998,36000,36002,36007,36012,36015,36016,36019,36020,36022,36024,36027,36029,36031,36036,36039,36040,36042,36042,36049,36049,36051,36051,36058,36058,36060,36060,36062,36062,36064,36064,36066,36068,36070,36070,36074,36074,36077,36077,36084,36084,36091,36093,36100,36101,36103,36104,36106,36106,36109,36109,36115,36115,36118,36118,36196,36196,36198,36198,36203,36203,36208,36208,36211,36212,36215,36215,36229,36229,36234,36234,36249,36249,36259,36259,36264,36264,36275,36275,36282,36282,36286,36286,36294,36294,36299,36300,36303,36303,36315,36315,36317,36317,36321,36321,36323,36323,36328,36328,36335,36335,36339,36339,36362,36362,36367,36368,36382,36382,36394,36394,36400,36400,36405,36405,36418,36418,36420,36420,36423,36426,36441,36441,36447,36448,36468,36468,36470,36470,36481,36481,36487,36487,36490,36490,36493,36493,36522,36524,36544,36544,36554,36557,36562,36562,36575,36575,36587,36587,36600,36600,36603,36603,36606,36606,36611,36611,36613,36613,36617,36617,36626,36629,36635,36639,36646,36647,36649,36650,36655,36655,36659,36659,36664,36665,36667,36667,36670,36671,36676,36677,36681,36681,36685,36686,36701,36701,36703,36703,36706,36706,36763,36764,36771,36771,36774,36774,36776,36776,36781,36781,36783,36786,36802,36802,36805,36805,36814,36814,36817,36817,36820,36820,36838,36838,36842,36843,36845,36845,36848,36848,36850,36850,36855,36855,36857,36857,36861,36861,36864,36867,36869,36870,36872,36872,36875,36875,36877,36877,36879,36881,36884,36885,36887,36887,36889,36890,36893,36899,36910,36910,36913,36914,36917,36917,36920,36920,36924,36924,36926,36926,36929,36930,36935,36935,36938,36939,36941,36942,36944,36945,36947,36949,36953,36953,36956,36958,36960,36961,36963,36963,36969,36969,36973,36975,36978,36978,36981,36981,36983,36984,36986,36986,36988,36989,36991,36996,36999,37000,37002,37002,37007,37007,37009,37009,37013,37013,37017,37017,37026,37027,37030,37030,37032,37032,37034,37034,37039,37041,37045,37045,37048,37048,37057,37057,37066,37066,37086,37086,37089,37089,37096,37096,37101,37101,37109,37109,37117,37117,37122,37122,37138,37138,37141,37141,37145,37145,37159,37159,37165,37165,37170,37170,37193,37198,37202,37202,37218,37218,37225,37226,37228,37228,37237,37237,37239,37240,37255,37255,37257,37257,37259,37259,37261,37261,37266,37266,37276,37276,37291,37292,37294,37295,37297,37297,37300,37301,37312,37312,37319,37319,37321,37321,37323,37329,37335,37336,37340,37341,37347,37347,37351,37351,37354,37354,37365,37365,37389,37389,37392,37394,37399,37399,37406,37406,37428,37428,37434,37434,37439,37440,37445,37445,37449,37449,37463,37463,37467,37467,37470,37470,37474,37474,37476,37478,37504,37504,37507,37507,37509,37509,37521,37521,37523,37523,37526,37526,37528,37528,37532,37532,37555,37555,37558,37559,37561,37561,37580,37580,37583,37583,37586,37586,37604,37604,37610,37610,37624,37624,37628,37628,37636,37636,37648,37648,37656,37656,37658,37658,37662,37666,37668,37668,37670,37670,37672,37672,37675,37675,37678,37679,37704,37704,37706,37707,37709,37709,37716,37716,37723,37723,37742,37742,37749,37749,37756,37756,37758,37758,37772,37772,37780,37780,37782,37782,37786,37786,37795,37795,37799,37799,37804,37805,37808,37808,37827,37827,37841,37841,37854,37854,37857,37857,37860,37860,37878,37878,37892,37892,37912,37912,37925,37925,37931,37931,37941,37941,37944,37944,37956,37956,37969,37970,37979,37979,38013,38013,38015,38015,38263,38263,38272,38272,38275,38275,38281,38281,38283,38283,38287,38287,38289,38292,38296,38296,38307,38309,38312,38312,38317,38317,38321,38321,38331,38332,38343,38343,38346,38346,38356,38358,38364,38364,38369,38370,38428,38428,38433,38433,38442,38442,38446,38446,38450,38450,38459,38459,38463,38464,38466,38466,38468,38468,38475,38477,38480,38480,38491,38495,38498,38500,38506,38506,38512,38512,38515,38515,38517,38520,38525,38525,38533,38534,38538,38539,38541,38542,38548,38549,38552,38553,38555,38556,38563,38563,38567,38568,38570,38570,38577,38577,38583,38583,38587,38587,38592,38593,38596,38599,38601,38601,38603,38606,38613,38614,38617,38617,38619,38620,38626,38627,38632,38634,38639,38640,38642,38642,38646,38647,38649,38649,38651,38651,38656,38656,38662,38663,38673,38673,38675,38675,38678,38678,38681,38681,38684,38684,38686,38686,38695,38695,38704,38704,38706,38706,38713,38713,38717,38717,38722,38722,38724,38724,38728,38728,38737,38737,38742,38742,38748,38748,38750,38750,38753,38754,38761,38761,38765,38765,38772,38772,38775,38775,38778,38778,38795,38795,38797,38797,38799,38799,38816,38816,38824,38824,38827,38827,38829,38829,38854,38854,38859,38859,38867,38867,38876,38876,38899,38899,38902,38902,38907,38907,38911,38915,38917,38918,38920,38920,38922,38922,38924,38924,38928,38931,38935,38936,38957,38957,38960,38960,38968,38969,38971,38971,38982,38982,38988,38990,38996,38996,39000,39000,39002,39002,39006,39006,39013,39013,39015,39015,39019,39019,39023,39023,39080,39080,39087,39087,39089,39089,39108,39108,39111,39111,39131,39132,39135,39135,39137,39138,39149,39151,39156,39156,39164,39166,39171,39171,39177,39178,39180,39180,39184,39184,39187,39187,39192,39192,39198,39198,39200,39200,39208,39208,39237,39237,39241,39241,39243,39245,39249,39250,39252,39252,39255,39255,39318,39318,39321,39321,39325,39325,39333,39333,39336,39336,39340,39342,39345,39345,39347,39348,39353,39353,39361,39361,39376,39378,39381,39381,39385,39385,39389,39389,39391,39391,39405,39405,39409,39409,39423,39423,39425,39425,39432,39432,39438,39439,39449,39449,39467,39467,39472,39472,39478,39479,39488,39488,39491,39491,39493,39493,39501,39501,39509,39509,39511,39511,39514,39515,39519,39519,39522,39522,39525,39525,39529,39530,39592,39592,39608,39608,39635,39636,39640,39640,39653,39653,39662,39662,39706,39706,39719,39719,39722,39722,39729,39729,39740,39740,39745,39749,39759,39759,39764,39764,39770,39770,39791,39791,39822,39822,39825,39825,39839,39839,39851,39851,39854,39854,39881,39881,39894,39894,39908,39908,39912,39912,39949,39949,39952,39952,39954,39954,39957,39957,39973,39973,39986,39986,39995,39995,40007,40007,40009,40009,40023,40023,40165,40165,40167,40167,40169,40169,40179,40180,40182,40182,40201,40201,40219,40219,40230,40230,40232,40232,40251,40251,40273,40273,40285,40285,40288,40289,40300,40300,40306,40306,40361,40361,40367,40367,40372,40372,40388,40388,40407,40407,40434,40434,40440,40442,40474,40474,40478,40478,40565,40565,40569,40569,40573,40573,40575,40575,40594,40595,40599,40599,40605,40605,40607,40607,40613,40613,40628,40629,40635,40635,40638,40638,40643,40643,40653,40654,40657,40657,40660,40660,40664,40664,40667,40668,40670,40670,40680,40680,40692,40692,40711,40712,40718,40718,40723,40723,40736,40736,40763,40763,40778,40779,40782,40782,40786,40786,40799,40799,40801,40801,40807,40807,40810,40810,40812,40812,40823,40823,40845,40845,40848,40848,40853,40853,40860,40860,44032,55203,63744,64011,65281,65374,65504,65507,65509,65510]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add950 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(20,13599,[32,127,167,167,175,177,183,183,215,215,247,247,711,711,713,715,717,717,729,729,913,929,931,937,945,961,963,969,8211,8212,8216,8217,8220,8221,8229,8231,8242,8242,8245,8245,8251,8251,8364,8364,8451,8451,8453,8453,8457,8457,8544,8553,8592,8595,8598,8601,8725,8725,8730,8730,8734,8736,8739,8739,8741,8741,8745,8747,8750,8750,8756,8757,8786,8786,8800,8801,8806,8807,8853,8853,8857,8857,8869,8869,8895,8895,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9552,9552,9566,9566,9569,9569,9578,9578,9581,9581,9582,9582,9583,9583,9584,9584,9588,9601,9615,9619,9621,9632,9633,9650,9651,9660,9661,9670,9671,9675,9675,9678,9679,9698,9701,9733,9734,9792,9792,9794,9794,12288,12291,12296,12306,12308,12309,12317,12318,12321,12329,12549,12585,12963,12963,13198,13199,13212,13214,13217,13217,13252,13252,13262,13262,13265,13266,13269,13269,19968,19969,19971,19971,19975,19985,19988,19990,19992,19993,19998,19999,20006,20006,20011,20011,20013,20014,20016,20019,20024,20025,20027,20028,20034,20035,20037,20037,20039,20040,20043,20043,20045,20047,20050,20051,20054,20054,20056,20057,20060,20063,20073,20073,20083,20083,20094,20095,20098,20100,20102,20102,20104,20104,20107,20110,20113,20117,20121,20121,20123,20123,20126,20127,20129,20130,20132,20134,20136,20136,20139,20142,20147,20147,20150,20150,20153,20154,20160,20164,20166,20171,20173,20173,20180,20186,20188,20191,20193,20193,20195,20197,20200,20201,20208,20215,20219,20219,20221,20221,20223,20226,20228,20229,20232,20235,20237,20245,20248,20249,20253,20253,20258,20258,20268,20269,20271,20272,20275,20276,20278,20278,20280,20280,20282,20287,20289,20289,20291,20291,20294,20297,20300,20324,20327,20327,20329,20332,20334,20336,20339,20361,20363,20363,20365,20365,20367,20370,20372,20376,20378,20382,20398,20399,20402,20403,20405,20407,20409,20411,20415,20421,20423,20423,20425,20427,20429,20433,20435,20436,20438,20449,20460,20460,20462,20463,20465,20465,20467,20472,20474,20474,20478,20478,20480,20480,20485,20487,20489,20489,20491,20495,20497,20508,20510,20515,20517,20525,20527,20529,20531,20531,20533,20533,20535,20535,20540,20540,20544,20545,20547,20547,20549,20559,20561,20561,20563,20563,20565,20565,20567,20567,20570,20581,20584,20587,20589,20592,20594,20599,20602,20602,20605,20605,20608,20608,20610,20611,20613,20613,20615,20615,20619,20622,20625,20626,20628,20630,20632,20638,20642,20643,20652,20664,20666,20667,20669,20671,20673,20674,20676,20683,20686,20687,20689,20689,20691,20695,20698,20699,20701,20701,20704,20704,20707,20714,20716,20721,20723,20723,20725,20726,20728,20729,20731,20731,20733,20736,20738,20748,20752,20757,20759,20760,20762,20762,20764,20764,20767,20770,20772,20774,20777,20778,20781,20782,20784,20789,20791,20797,20799,20801,20803,20809,20811,20813,20818,20818,20820,20821,20823,20823,20825,20831,20833,20835,20837,20837,20839,20841,20843,20846,20849,20849,20853,20856,20860,20860,20864,20864,20871,20871,20873,20874,20877,20877,20879,20879,20881,20885,20887,20888,20894,20894,20896,20896,20898,20898,20900,20901,20906,20906,20908,20908,20912,20913,20918,20919,20921,20921,20924,20926,20932,20934,20936,20936,20938,20942,20944,20944,20948,20948,20951,20952,20956,20958,20960,20961,20976,20977,20979,20979,20981,20982,20984,20986,20989,20989,20992,20993,20995,20995,20998,21002,21004,21004,21006,21006,21008,21011,21014,21015,21020,21022,21025,21025,21028,21029,21032,21034,21038,21038,21040,21043,21045,21048,21050,21051,21057,21057,21059,21060,21062,21063,21065,21070,21074,21074,21076,21078,21082,21087,21089,21090,21097,21103,21106,21106,21108,21109,21111,21112,21114,21117,21119,21124,21127,21133,21137,21137,21139,21139,21142,21145,21147,21147,21151,21152,21155,21155,21158,21158,21161,21166,21179,21180,21182,21182,21184,21187,21191,21191,21193,21193,21197,21197,21202,21203,21205,21209,21211,21211,21213,21215,21218,21220,21222,21222,21225,21225,21227,21227,21231,21233,21235,21237,21239,21240,21242,21244,21246,21247,21253,21254,21256,21259,21261,21266,21269,21271,21273,21274,21276,21277,21279,21283,21290,21290,21293,21293,21295,21297,21300,21300,21303,21303,21305,21305,21308,21313,21313,21313,21315,21317,21317,21317,21319,21322,21324,21325,21329,21332,21335,21335,21338,21338,21340,21340,21342,21342,21344,21345,21347,21347,21350,21350,21356,21356,21358,21363,21365,21365,21367,21369,21371,21372,21375,21375,21378,21378,21380,21380,21386,21386,21390,21391,21394,21394,21396,21396,21398,21402,21404,21407,21412,21413,21415,21415,21420,21421,21426,21426,21428,21428,21433,21433,21435,21435,21443,21443,21448,21451,21453,21453,21460,21460,21462,21463,21467,21467,21471,21471,21473,21478,21480,21491,21493,21493,21496,21496,21499,21500,21505,21505,21507,21508,21510,21522,21528,21529,21531,21536,21540,21550,21552,21553,21555,21555,21557,21561,21563,21566,21568,21571,21573,21576,21578,21578,21582,21583,21588,21588,21600,21608,21611,21612,21615,21624,21626,21634,21636,21636,21638,21640,21643,21646,21648,21650,21653,21654,21656,21656,21658,21658,21664,21666,21669,21681,21683,21683,21686,21688,21690,21705,21710,21711,21718,21718,21726,21726,21728,21730,21732,21739,21741,21742,21745,21747,21751,21752,21754,21757,21759,21759,21761,21761,21763,21772,21774,21778,21780,21780,21783,21783,21786,21786,21798,21799,21802,21802,21804,21817,21819,21820,21822,21822,21824,21825,21827,21830,21832,21832,21834,21835,21837,21842,21845,21847,21852,21852,21854,21855,21857,21862,21866,21866,21877,21879,21883,21892,21895,21903,21905,21909,21912,21914,21916,21917,21919,21919,21921,21928,21930,21934,21937,21939,21941,21941,21947,21947,21951,21952,21954,21974,21977,21981,21983,21983,21985,21993,21999,21999,22002,22002,22006,22007,22009,22010,22012,22018,22020,22020,22022,22022,22024,22025,22028,22032,22034,22039,22043,22045,22047,22047,22055,22055,22057,22058,22060,22060,22062,22064,22066,22070,22072,22075,22077,22082,22085,22086,22088,22090,22092,22092,22094,22094,22099,22099,22103,22106,22110,22110,22112,22112,22114,22118,22120,22132,22134,22137,22142,22151,22156,22160,22163,22163,22165,22165,22167,22170,22172,22173,22181,22184,22186,22190,22194,22199,22204,22206,22208,22211,22213,22214,22216,22221,22225,22225,22227,22228,22231,22231,22234,22235,22237,22241,22244,22245,22247,22247,22250,22251,22254,22254,22256,22256,22263,22263,22265,22266,22271,22271,22273,22276,22279,22285,22290,22292,22294,22294,22296,22296,22298,22300,22302,22304,22306,22307,22312,22314,22316,22320,22323,22324,22331,22331,22334,22334,22336,22337,22341,22341,22343,22343,22345,22354,22369,22370,22372,22372,22374,22374,22376,22379,22381,22381,22383,22391,22395,22397,22400,22400,22402,22403,22411,22412,22415,22415,22419,22421,22423,22427,22429,22432,22434,22437,22446,22446,22453,22454,22456,22458,22460,22461,22463,22463,22465,22467,22470,22471,22475,22476,22478,22480,22482,22482,22484,22485,22492,22492,22495,22501,22503,22503,22505,22505,22508,22510,22512,22525,22528,22530,22532,22542,22544,22544,22548,22548,22553,22553,22555,22558,22560,22561,22563,22565,22567,22570,22572,22585,22587,22587,22589,22589,22591,22591,22600,22607,22609,22613,22615,22619,22621,22622,22626,22629,22632,22632,22635,22635,22637,22637,22639,22639,22641,22641,22644,22646,22649,22659,22661,22667,22670,22673,22675,22676,22680,22680,22684,22689,22691,22691,22693,22694,22696,22697,22699,22700,22702,22703,22705,22705,22707,22707,22714,22719,22721,22722,22725,22729,22734,22735,22737,22742,22744,22747,22749,22751,22754,22756,22759,22761,22763,22764,22767,22767,22772,22772,22777,22778,22780,22783,22787,22787,22790,22790,22796,22799,22802,22802,22804,22807,22809,22810,22812,22812,22816,22816,22818,22818,22820,22821,22823,22823,22825,22831,22833,22833,22839,22840,22844,22844,22846,22846,22848,22848,22852,22853,22855,22858,22862,22865,22867,22869,22871,22872,22874,22874,22876,22876,22880,22882,22887,22887,22889,22891,22893,22894,22896,22900,22902,22905,22907,22917,22922,22922,22925,22928,22930,22931,22934,22937,22941,22942,22944,22952,22958,22959,22961,22966,22969,22974,22976,22977,22979,22979,22981,22984,22986,22996,22998,22998,23000,23000,23002,23006,23008,23009,23011,23014,23016,23018,23020,23022,23025,23031,23034,23041,23043,23043,23049,23050,23052,23052,23055,23055,23057,23057,23059,23059,23061,23065,23067,23068,23070,23072,23075,23075,23077,23077,23081,23081,23085,23086,23091,23091,23093,23097,23100,23100,23102,23102,23104,23108,23110,23114,23116,23117,23120,23123,23125,23128,23130,23136,23138,23138,23140,23143,23145,23146,23148,23149,23152,23152,23159,23160,23162,23165,23167,23167,23171,23172,23178,23180,23182,23184,23186,23189,23191,23191,23194,23199,23202,23202,23205,23207,23209,23209,23212,23212,23214,23234,23236,23236,23238,23245,23253,23267,23269,23270,23272,23278,23283,23291,23293,23293,23295,23295,23297,23299,23301,23301,23303,23305,23307,23308,23311,23312,23315,23316,23318,23319,23321,23323,23325,23326,23328,23329,23331,23336,23338,23338,23340,23344,23346,23346,23348,23348,23352,23352,23356,23360,23363,23363,23365,23365,23367,23368,23371,23374,23376,23377,23379,23384,23386,23389,23391,23391,23394,23397,23401,23401,23403,23404,23406,23406,23408,23411,23413,23413,23415,23416,23418,23419,23421,23421,23423,23423,23425,23425,23427,23429,23431,23433,23435,23436,23438,23439,23442,23443,23445,23445,23447,23452,23458,23464,23468,23470,23472,23472,23475,23478,23480,23481,23487,23490,23492,23495,23498,23502,23504,23508,23510,23510,23512,23513,23518,23532,23534,23538,23541,23542,23544,23544,23546,23546,23553,23553,23555,23556,23559,23570,23573,23574,23578,23578,23583,23583,23586,23586,23588,23589,23592,23592,23594,23594,23596,23596,23600,23601,23603,23603,23607,23612,23614,23617,23620,23624,23627,23633,23636,23638,23640,23641,23644,23645,23648,23648,23650,23653,23655,23658,23660,23663,23665,23665,23667,23668,23673,23676,23678,23678,23686,23686,23688,23693,23695,23701,23709,23709,23711,23729,23731,23731,23733,23736,23750,23756,23758,23760,23762,23764,23766,23771,23774,23775,23784,23784,23786,23786,23788,23790,23792,23793,23796,23796,23798,23801,23803,23803,23805,23805,23807,23809,23814,23815,23819,23823,23825,23826,23828,23828,23830,23831,23833,23835,23837,23840,23842,23849,23854,23854,23856,23866,23868,23869,23871,23875,23877,23877,23879,23879,23881,23884,23886,23886,23888,23890,23893,23893,23897,23897,23902,23902,23906,23907,23909,23909,23911,23913,23915,23916,23919,23919,23921,23922,23927,23927,23929,23930,23932,23938,23940,23940,23942,23946,23949,23949,23954,23957,23959,23959,23961,23962,23964,23970,23975,23978,23980,23986,23988,23989,23991,23992,23994,23994,23996,23997,24000,24000,24002,24003,24006,24007,24009,24009,24011,24011,24013,24013,24015,24015,24017,24018,24020,24022,24024,24024,24029,24034,24037,24040,24043,24043,24046,24046,24048,24052,24055,24055,24057,24057,24061,24063,24066,24068,24070,24070,24074,24074,24076,24076,24078,24078,24081,24081,24084,24091,24093,24093,24095,24101,24104,24105,24107,24107,24109,24109,24115,24116,24118,24120,24125,24126,24128,24129,24131,24133,24138,24143,24147,24149,24151,24153,24155,24157,24159,24163,24166,24176,24178,24182,24184,24185,24187,24190,24192,24192,24194,24194,24196,24196,24199,24205,24207,24207,24213,24215,24218,24220,24224,24224,24226,24232,24234,24238,24240,24249,24254,24254,24257,24258,24260,24268,24270,24270,24273,24291,24293,24297,24300,24300,24302,24303,24305,24307,24310,24311,24314,24314,24318,24319,24321,24322,24324,24325,24327,24328,24330,24331,24335,24335,24338,24341,24343,24344,24346,24347,24349,24349,24351,24351,24354,24356,24358,24361,24365,24366,24368,24369,24371,24371,24373,24376,24380,24380,24384,24384,24387,24388,24390,24390,24392,24396,24398,24399,24404,24404,24406,24409,24413,24413,24418,24418,24420,24421,24423,24423,24425,24429,24431,24433,24435,24436,24438,24441,24444,24450,24453,24460,24464,24466,24470,24473,24475,24476,24478,24481,24485,24486,24488,24495,24498,24498,24501,24503,24505,24505,24507,24513,24515,24515,24517,24517,24521,24521,24524,24525,24527,24530,24532,24537,24541,24542,24544,24545,24547,24549,24552,24552,24554,24555,24557,24559,24561,24561,24563,24565,24567,24568,24570,24571,24573,24573,24575,24576,24585,24599,24601,24606,24608,24610,24612,24623,24626,24629,24631,24631,24633,24633,24640,24647,24649,24649,24652,24653,24656,24656,24658,24661,24664,24667,24669,24671,24674,24688,24690,24690,24703,24705,24707,24714,24716,24718,24720,24720,24722,24722,24724,24727,24730,24733,24735,24736,24738,24739,24744,24744,24752,24754,24756,24769,24771,24783,24785,24785,24787,24789,24792,24797,24799,24802,24804,24804,24806,24806,24816,24828,24830,24833,24835,24838,24840,24843,24845,24848,24850,24854,24856,24856,24858,24861,24863,24863,24867,24867,24871,24873,24875,24876,24878,24879,24882,24882,24884,24884,24886,24887,24891,24891,24894,24897,24900,24911,24914,24918,24920,24920,24922,24923,24925,24927,24929,24931,24933,24936,24938,24940,24942,24942,24944,24951,24953,24954,24956,24956,24958,24958,24960,24960,24962,24963,24969,24974,24976,24980,24982,24982,24986,24987,24989,24989,24991,24991,24993,24994,24996,24996,24999,25014,25016,25016,25018,25018,25020,25020,25022,25023,25025,25027,25029,25037,25046,25046,25048,25048,25054,25056,25059,25067,25069,25070,25072,25074,25077,25089,25091,25092,25095,25098,25100,25102,25104,25106,25108,25110,25113,25115,25119,25125,25127,25127,25129,25131,25133,25134,25136,25136,25138,25140,25142,25142,25146,25146,25149,25155,25158,25163,25165,25166,25168,25172,25176,25180,25182,25182,25184,25190,25197,25204,25206,25207,25209,25217,25219,25220,25222,25226,25228,25228,25230,25231,25233,25240,25256,25265,25267,25270,25272,25273,25275,25279,25282,25282,25284,25284,25286,25300,25302,25308,25323,25347,25351,25353,25355,25361,25363,25366,25384,25389,25391,25391,25394,25396,25398,25398,25400,25406,25408,25425,25428,25434,25445,25445,25447,25449,25451,25451,25453,25458,25461,25464,25466,25469,25472,25477,25479,25482,25484,25490,25492,25492,25494,25497,25499,25509,25511,25521,25533,25534,25536,25536,25538,25552,25554,25555,25557,25565,25567,25569,25571,25573,25575,25579,25581,25590,25593,25593,25606,25606,25609,25616,25618,25624,25626,25628,25630,25640,25642,25648,25651,25655,25657,25657,25661,25665,25667,25667,25675,25675,25677,25678,25680,25684,25688,25689,25691,25697,25701,25705,25707,25712,25714,25723,25725,25725,25727,25727,25730,25730,25733,25733,25735,25740,25743,25744,25746,25747,25749,25754,25756,25760,25762,25766,25769,25769,25771,25774,25776,25779,25787,25791,25793,25797,25799,25799,25801,25803,25805,25808,25810,25810,25812,25812,25814,25819,25824,25824,25826,25828,25830,25830,25832,25833,25835,25837,25839,25844,25847,25848,25850,25857,25859,25860,25862,25863,25865,25865,25868,25872,25875,25881,25883,25885,25888,25894,25897,25903,25906,25907,25910,25913,25915,25915,25917,25919,25921,25921,25923,25923,25925,25926,25928,25930,25935,25935,25937,25937,25939,25945,25948,25950,25954,25960,25962,25962,25964,25964,25967,25967,25970,25980,25983,25988,25991,25991,25996,25996,26000,26002,26004,26007,26009,26009,26011,26018,26020,26021,26023,26024,26026,26028,26030,26032,26034,26035,26038,26041,26043,26045,26047,26047,26049,26054,26059,26064,26066,26067,26070,26071,26074,26075,26077,26079,26081,26082,26085,26086,26088,26089,26092,26101,26106,26109,26112,26112,26114,26133,26140,26141,26143,26146,26148,26152,26155,26155,26157,26159,26161,26166,26169,26170,26177,26179,26181,26181,26183,26183,26185,26186,26188,26188,26191,26191,26193,26194,26201,26207,26209,26210,26212,26214,26216,26216,26218,26218,26220,26220,26222,26226,26228,26228,26230,26236,26238,26238,26240,26240,26244,26244,26246,26253,26256,26257,26260,26265,26269,26269,26271,26274,26280,26283,26286,26290,26292,26293,26295,26299,26301,26302,26304,26304,26308,26308,26310,26316,26319,26319,26322,26322,26326,26326,26328,26334,26336,26336,26339,26340,26342,26342,26344,26345,26347,26350,26352,26352,26354,26356,26358,26361,26364,26364,26366,26369,26371,26373,26376,26379,26381,26381,26383,26384,26386,26389,26391,26392,26395,26395,26397,26397,26399,26403,26406,26408,26410,26414,26417,26417,26419,26421,26424,26431,26437,26441,26443,26449,26451,26451,26453,26455,26457,26458,26460,26464,26474,26474,26476,26477,26479,26495,26497,26497,26499,26503,26505,26505,26507,26510,26512,26517,26519,26522,26524,26525,26527,26527,26542,26544,26546,26555,26560,26566,26568,26580,26584,26591,26594,26599,26601,26616,26618,26618,26620,26620,26623,26623,26642,26644,26646,26648,26650,26650,26652,26653,26655,26657,26661,26662,26664,26667,26669,26671,26673,26677,26680,26685,26688,26694,26696,26697,26699,26705,26707,26708,26731,26731,26733,26735,26737,26738,26740,26745,26747,26755,26757,26759,26761,26764,26767,26772,26774,26775,26779,26781,26783,26788,26791,26805,26820,26820,26822,26825,26827,26830,26832,26840,26842,26842,26844,26849,26851,26852,26854,26860,26862,26877,26884,26888,26890,26901,26903,26903,26917,26917,26922,26922,26927,26928,26930,26933,26935,26937,26939,26941,26943,26946,26948,26949,26952,26956,26958,26959,26961,26964,26966,26976,26978,26979,26981,26982,26984,26993,26996,27003,27010,27011,27014,27014,27021,27022,27024,27025,27027,27031,27033,27036,27038,27038,27040,27041,27043,27057,27059,27063,27065,27065,27067,27071,27073,27076,27078,27078,27081,27088,27091,27092,27097,27097,27106,27106,27108,27112,27115,27118,27121,27124,27126,27128,27131,27138,27140,27146,27149,27149,27151,27151,27153,27153,27155,27161,27163,27163,27165,27169,27171,27171,27173,27176,27186,27186,27188,27189,27192,27201,27204,27204,27206,27209,27211,27211,27213,27217,27220,27222,27224,27227,27229,27234,27236,27236,27238,27243,27245,27245,27247,27247,27254,27254,27262,27265,27267,27269,27271,27271,27273,27273,27276,27278,27280,27287,27290,27292,27294,27302,27304,27304,27308,27311,27315,27316,27318,27323,27325,27325,27330,27331,27333,27335,27339,27341,27343,27345,27347,27347,27353,27361,27365,27365,27367,27368,27370,27372,27374,27377,27379,27379,27384,27388,27392,27392,27394,27396,27400,27403,27407,27411,27414,27418,27422,27422,27424,27425,27427,27427,27429,27429,27432,27432,27436,27437,27439,27439,27441,27444,27446,27455,27457,27459,27461,27470,27472,27473,27476,27478,27481,27481,27483,27484,27486,27495,27498,27498,27501,27501,27506,27506,27510,27513,27515,27515,27518,27520,27522,27524,27526,27526,27528,27530,27532,27535,27537,27537,27540,27545,27547,27547,27550,27552,27554,27559,27562,27563,27565,27568,27570,27571,27573,27575,27578,27578,27580,27581,27583,27584,27587,27597,27599,27600,27602,27604,27606,27608,27610,27611,27614,27614,27616,27616,27618,27620,27622,27624,27627,27628,27631,27632,27634,27635,27639,27641,27643,27654,27656,27657,27659,27661,27663,27665,27667,27670,27672,27675,27677,27677,27679,27681,27683,27688,27690,27692,27694,27696,27699,27700,27702,27702,27704,27704,27707,27707,27710,27715,27718,27718,27722,27728,27730,27730,27732,27733,27735,27735,27737,27737,27739,27745,27749,27755,27757,27757,27759,27764,27766,27766,27768,27768,27770,27771,27773,27774,27776,27792,27794,27798,27800,27805,27819,27822,27824,27825,27827,27828,27830,27847,27849,27850,27852,27853,27855,27863,27865,27870,27872,27875,27877,27877,27879,27881,27883,27891,27893,27893,27897,27897,27904,27905,27907,27908,27911,27922,27926,27931,27933,27936,27938,27938,27941,27941,27943,27970,27992,27994,27998,28010,28012,28016,28020,28032,28034,28046,28048,28053,28055,28056,28074,28076,28078,28079,28082,28085,28087,28088,28090,28096,28098,28098,28100,28109,28111,28134,28136,28151,28153,28157,28160,28160,28163,28163,28165,28165,28185,28189,28191,28200,28203,28214,28216,28225,28227,28231,28233,28235,28237,28238,28241,28246,28248,28248,28250,28265,28267,28267,28270,28271,28273,28276,28279,28281,28296,28297,28301,28304,28306,28308,28310,28313,28315,28327,28330,28331,28334,28340,28342,28343,28345,28346,28348,28374,28376,28376,28380,28380,28395,28399,28401,28402,28404,28409,28411,28419,28421,28426,28429,28431,28434,28437,28440,28442,28444,28444,28446,28451,28453,28455,28457,28467,28469,28476,28478,28481,28483,28483,28494,28501,28503,28504,28506,28507,28509,28516,28518,28519,28521,28528,28530,28531,28534,28536,28538,28544,28546,28546,28548,28553,28555,28558,28560,28560,28562,28567,28574,28574,28576,28596,28598,28598,28600,28602,28604,28605,28607,28612,28614,28623,28628,28629,28632,28632,28635,28644,28646,28649,28651,28658,28660,28660,28663,28663,28666,28668,28670,28673,28676,28679,28681,28687,28689,28689,28692,28701,28703,28708,28710,28715,28719,28725,28727,28732,28734,28742,28744,28746,28748,28748,28753,28754,28757,28760,28762,28763,28765,28774,28776,28779,28784,28785,28788,28788,28790,28790,28792,28792,28794,28794,28796,28797,28802,28806,28810,28810,28814,28814,28817,28822,28824,28826,28831,28831,28833,28833,28836,28836,28841,28841,28843,28849,28851,28853,28855,28856,28858,28858,28862,28862,28869,28872,28874,28875,28877,28879,28881,28884,28887,28890,28892,28894,28896,28898,28900,28900,28911,28912,28915,28916,28918,28925,28927,28928,28930,28930,28932,28932,28934,28934,28937,28942,28944,28944,28947,28947,28951,28951,28953,28956,28958,28963,28965,28966,28968,28968,28974,28978,28982,28982,28986,28986,28993,28996,28998,28999,29001,29001,29003,29006,29008,29008,29010,29012,29014,29014,29016,29018,29020,29034,29036,29036,29038,29038,29040,29040,29042,29042,29048,29048,29051,29051,29053,29053,29056,29058,29060,29063,29065,29066,29071,29072,29074,29074,29076,29076,29079,29079,29081,29089,29092,29093,29095,29098,29100,29100,29103,29107,29109,29109,29112,29113,29116,29131,29134,29136,29138,29138,29140,29142,29144,29148,29151,29154,29156,29160,29164,29166,29168,29170,29172,29172,29176,29177,29179,29183,29185,29187,29189,29191,29194,29194,29196,29197,29200,29200,29203,29204,29209,29211,29213,29215,29218,29219,29222,29226,29228,29229,29232,29232,29237,29238,29240,29243,29245,29247,29249,29250,29252,29252,29254,29260,29263,29263,29266,29267,29270,29270,29272,29275,29277,29283,29287,29287,29289,29290,29292,29292,29294,29296,29298,29300,29302,29305,29307,29313,29316,29318,29320,29321,29323,29326,29328,29331,29333,29336,29338,29339,29341,29342,29345,29354,29356,29356,29358,29360,29364,29365,29370,29370,29373,29373,29375,29382,29385,29388,29390,29390,29392,29394,29396,29396,29398,29402,29404,29404,29407,29409,29411,29412,29414,29414,29416,29419,29427,29428,29430,29441,29447,29448,29450,29452,29455,29455,29457,29459,29462,29465,29467,29470,29474,29475,29477,29479,29481,29481,29485,29485,29488,29495,29498,29500,29502,29504,29506,29509,29513,29514,29516,29518,29520,29522,29527,29531,29533,29538,29541,29548,29550,29552,29554,29555,29557,29560,29562,29579,29582,29582,29586,29591,29597,29597,29599,29602,29604,29606,29608,29609,29611,29613,29618,29625,29627,29628,29630,29632,29634,29635,29637,29640,29642,29645,29650,29652,29654,29662,29664,29664,29667,29667,29669,29669,29671,29675,29677,29678,29684,29686,29688,29688,29690,29690,29692,29697,29699,29709,29718,29718,29722,29723,29725,29725,29728,29734,29736,29750,29754,29754,29759,29762,29764,29764,29766,29766,29770,29771,29773,29778,29780,29781,29783,29783,29785,29788,29790,29791,29794,29796,29799,29799,29801,29802,29805,29811,29813,29813,29817,29817,29820,29825,29827,29827,29829,29835,29840,29840,29842,29842,29844,29845,29847,29848,29850,29850,29852,29852,29854,29857,29859,29859,29861,29867,29869,29869,29871,29874,29877,29880,29882,29883,29885,29891,29893,29893,29898,29899,29903,29903,29908,29926,29928,29929,29932,29932,29934,29934,29940,29943,29947,29947,29949,29952,29954,29956,29959,29960,29963,29965,29967,29976,29978,29978,29980,29981,29983,29983,29985,29986,29989,29990,29992,30003,30007,30010,30013,30016,30023,30024,30027,30028,30030,30031,30036,30036,30041,30045,30047,30047,30050,30054,30058,30060,30063,30064,30070,30073,30077,30080,30084,30084,30086,30087,30090,30092,30095,30097,30100,30101,30104,30106,30109,30109,30114,30117,30119,30119,30122,30123,30128,30128,30130,30131,30133,30134,30136,30146,30148,30149,30151,30151,30154,30162,30164,30165,30167,30171,30173,30180,30182,30183,30189,30189,30191,30209,30211,30211,30216,30221,30223,30225,30227,30230,30233,30249,30253,30253,30255,30261,30264,30264,30266,30266,30268,30269,30274,30275,30278,30281,30284,30284,30288,30288,30290,30291,30294,30298,30300,30300,30303,30306,30308,30309,30313,30314,30316,30318,30320,30322,30325,30325,30328,30329,30331,30335,30337,30338,30340,30340,30342,30347,30350,30351,30354,30355,30357,30358,30361,30366,30372,30372,30374,30374,30378,30379,30381,30384,30388,30389,30392,30392,30394,30395,30397,30399,30402,30406,30408,30410,30413,30414,30418,30420,30426,30431,30433,30433,30435,30439,30441,30442,30444,30453,30455,30460,30462,30462,30465,30465,30467,30469,30471,30475,30480,30483,30485,30485,30489,30491,30493,30493,30495,30496,30498,30499,30501,30501,30503,30505,30509,30509,30511,30511,30513,30526,30532,30535,30538,30543,30546,30546,30548,30550,30553,30556,30558,30563,30565,30575,30585,30585,30588,30597,30599,30601,30603,30607,30609,30609,30613,30613,30615,30615,30617,30627,30629,30629,30631,30632,30634,30637,30640,30647,30650,30653,30655,30655,30658,30658,30660,30660,30663,30663,30665,30666,30668,30672,30675,30677,30679,30684,30686,30686,30688,30688,30690,30691,30693,30693,30695,30697,30700,30707,30711,30717,30722,30723,30725,30726,30729,30729,30732,30740,30749,30749,30751,30755,30757,30773,30775,30776,30787,30787,30789,30789,30792,30794,30796,30798,30800,30800,30802,30802,30812,30814,30816,30816,30818,30818,30820,30821,30824,30833,30841,30841,30843,30844,30846,30849,30851,30855,30857,30857,30860,30860,30862,30863,30865,30865,30867,30874,30878,30885,30887,30893,30896,30896,30898,30900,30906,30908,30910,30910,30913,30913,30915,30917,30920,30929,30932,30933,30938,30939,30941,30947,30949,30949,30951,30954,30956,30957,30959,30959,30962,30964,30967,30967,30969,30975,30977,30978,30980,30981,30985,30985,30988,30988,30990,30990,30992,30996,30999,30999,31001,31001,31003,31006,31009,31009,31011,31021,31023,31023,31025,31025,31029,31029,31032,31034,31037,31042,31044,31052,31055,31063,31066,31073,31075,31077,31079,31083,31085,31085,31088,31088,31090,31092,31097,31098,31100,31101,31103,31103,31105,31106,31112,31112,31114,31115,31117,31120,31122,31128,31130,31132,31136,31138,31140,31140,31142,31144,31146,31150,31152,31156,31158,31163,31165,31169,31173,31173,31176,31177,31179,31179,31181,31183,31185,31186,31189,31190,31192,31192,31196,31200,31203,31204,31206,31207,31209,31214,31222,31224,31226,31227,31232,31232,31234,31237,31240,31240,31242,31245,31248,31253,31255,31260,31262,31264,31266,31266,31270,31270,31272,31272,31275,31275,31278,31281,31287,31287,31289,31289,31291,31293,31295,31296,31300,31300,31302,31304,31306,31310,31316,31316,31318,31320,31322,31324,31327,31330,31335,31337,31339,31342,31344,31345,31348,31350,31352,31355,31358,31361,31364,31372,31375,31376,31378,31378,31380,31385,31390,31392,31394,31395,31400,31404,31406,31407,31409,31416,31418,31418,31422,31425,31428,31429,31431,31431,31434,31435,31441,31441,31448,31449,31455,31456,31459,31462,31467,31467,31469,31471,31478,31479,31481,31483,31485,31485,31487,31489,31492,31494,31496,31498,31502,31507,31512,31515,31517,31518,31520,31520,31522,31526,31528,31528,31530,31541,31544,31544,31547,31547,31552,31552,31556,31570,31572,31572,31574,31574,31576,31576,31584,31585,31587,31591,31593,31593,31597,31598,31600,31608,31618,31618,31620,31621,31623,31624,31626,31633,31636,31641,31643,31645,31648,31649,31652,31652,31660,31661,31663,31663,31665,31665,31668,31669,31671,31673,31678,31678,31680,31681,31684,31684,31686,31687,31689,31692,31694,31694,31700,31701,31704,31723,31728,31732,31735,31737,31739,31739,31741,31747,31749,31751,31753,31761,31769,31769,31772,31779,31781,31789,31792,31792,31795,31795,31799,31801,31803,31808,31811,31811,31813,31813,31815,31818,31820,31821,31824,31824,31827,31828,31831,31831,31833,31836,31839,31840,31843,31847,31849,31852,31854,31855,31858,31859,31861,31861,31864,31866,31869,31869,31871,31873,31876,31877,31880,31882,31884,31885,31889,31890,31892,31896,31902,31903,31905,31907,31909,31909,31911,31912,31919,31919,31921,31925,31929,31935,31941,31941,31944,31944,31946,31948,31950,31950,31952,31954,31956,31959,31961,31961,31964,31968,31970,31970,31975,31976,31978,31978,31980,31980,31982,31986,31988,31988,31990,31992,31995,31995,31997,31998,32000,32034,32040,32041,32043,32044,32046,32051,32053,32054,32056,32071,32074,32074,32078,32086,32088,32088,32091,32092,32094,32095,32097,32099,32102,32107,32109,32115,32121,32125,32127,32129,32131,32134,32136,32136,32140,32143,32145,32148,32150,32150,32156,32163,32166,32167,32169,32170,32172,32178,32180,32181,32183,32194,32196,32199,32201,32204,32206,32206,32210,32210,32215,32219,32221,32225,32227,32227,32230,32234,32236,32236,32238,32244,32246,32247,32249,32251,32259,32259,32264,32279,32282,32293,32297,32299,32301,32329,32332,32332,32336,32346,32348,32348,32350,32355,32360,32363,32365,32365,32367,32368,32370,32382,32384,32386,32390,32392,32394,32397,32399,32399,32401,32401,32403,32412,32566,32566,32568,32570,32573,32575,32579,32581,32584,32584,32586,32589,32591,32593,32596,32597,32600,32600,32603,32609,32611,32611,32613,32622,32624,32624,32626,32627,32629,32631,32633,32639,32643,32643,32645,32654,32657,32658,32660,32662,32666,32670,32672,32674,32676,32681,32684,32685,32687,32691,32693,32707,32709,32709,32711,32711,32713,32722,32724,32725,32727,32727,32731,32732,32734,32739,32741,32742,32744,32757,32759,32761,32763,32769,32771,32775,32779,32786,32788,32793,32795,32796,32798,32799,32801,32801,32804,32804,32806,32806,32808,32810,32812,32812,32816,32816,32819,32823,32825,32825,32829,32831,32835,32835,32838,32840,32842,32842,32847,32850,32854,32854,32856,32856,32858,32858,32860,32862,32868,32868,32871,32871,32876,32876,32879,32883,32885,32889,32893,32895,32898,32898,32900,32903,32905,32908,32911,32912,32914,32915,32917,32918,32920,32925,32929,32931,32933,32933,32937,32939,32941,32943,32945,32946,32948,32949,32952,32952,32954,32954,32962,32965,32967,32970,32972,32977,32980,32990,32992,32993,32995,32998,33005,33005,33007,33013,33016,33022,33024,33026,33029,33030,33032,33032,33034,33034,33045,33046,33048,33049,33051,33051,33053,33055,33057,33061,33063,33063,33065,33065,33067,33069,33071,33072,33081,33082,33085,33086,33091,33092,33094,33095,33098,33109,33115,33116,33118,33118,33120,33122,33124,33127,33129,33129,33131,33131,33134,33140,33142,33146,33151,33152,33154,33155,33158,33165,33167,33167,33173,33173,33175,33184,33186,33187,33190,33193,33195,33196,33198,33198,33200,33205,33207,33207,33209,33216,33218,33223,33225,33226,33228,33229,33231,33234,33237,33237,33239,33243,33245,33251,33253,33258,33260,33262,33266,33268,33271,33276,33278,33282,33284,33285,33287,33293,33296,33298,33300,33302,33307,33314,33317,33317,33320,33320,33322,33324,33327,33327,33330,33338,33340,33341,33343,33344,33346,33346,33348,33349,33351,33351,33353,33353,33355,33355,33358,33363,33365,33372,33374,33375,33377,33377,33379,33380,33382,33382,33384,33385,33387,33391,33393,33394,33396,33397,33399,33400,33404,33408,33411,33413,33418,33419,33421,33428,33432,33435,33437,33445,33447,33449,33451,33457,33459,33470,33472,33472,33474,33475,33489,33495,33497,33497,33499,33500,33502,33505,33507,33512,33514,33517,33519,33526,33529,33531,33534,33534,33536,33545,33548,33549,33558,33559,33561,33561,33563,33564,33566,33566,33568,33568,33570,33570,33572,33581,33583,33583,33585,33596,33599,33605,33607,33620,33622,33622,33651,33656,33658,33663,33665,33665,33667,33667,33670,33680,33682,33691,33693,33694,33696,33696,33698,33707,33710,33712,33725,33725,33727,33740,33742,33743,33745,33745,33748,33753,33755,33765,33767,33772,33774,33782,33784,33791,33793,33793,33795,33796,33798,33799,33801,33811,33819,33819,33827,33827,33833,33833,33835,33837,33839,33853,33855,33856,33858,33863,33865,33865,33867,33870,33872,33874,33876,33876,33878,33879,33881,33883,33885,33889,33891,33891,33893,33897,33899,33904,33907,33914,33917,33918,33922,33922,33926,33926,33933,33937,33940,33940,33943,33954,33956,33956,33959,33964,33966,33970,33972,33972,33974,33974,33976,33980,33983,33986,33988,33991,33993,34004,34006,34007,34011,34011,34023,34028,34030,34036,34038,34039,34041,34048,34050,34050,34054,34063,34065,34074,34076,34081,34083,34097,34107,34107,34109,34110,34112,34113,34115,34122,34125,34126,34129,34129,34131,34137,34139,34139,34141,34142,34144,34158,34161,34161,34165,34172,34174,34174,34176,34193,34196,34198,34200,34212,34214,34218,34223,34225,34227,34234,34237,34240,34242,34249,34251,34251,34253,34258,34261,34261,34263,34266,34268,34271,34273,34278,34280,34285,34287,34290,34294,34299,34301,34305,34308,34311,34313,34316,34321,34321,34327,34332,34334,34343,34345,34346,34348,34350,34353,34358,34360,34364,34366,34368,34371,34371,34374,34376,34379,34382,34384,34384,34386,34390,34393,34393,34395,34396,34398,34399,34401,34405,34407,34411,34413,34417,34419,34420,34423,34423,34425,34428,34437,34439,34442,34446,34448,34449,34451,34458,34460,34462,34465,34469,34471,34474,34479,34481,34483,34505,34507,34508,34512,34513,34515,34516,34518,34527,34530,34532,34534,34534,34536,34541,34549,34555,34558,34558,34560,34574,34577,34579,34584,34588,34590,34590,34592,34602,34604,34606,34608,34613,34615,34616,34618,34620,34622,34627,34630,34630,34636,34671,34675,34683,34689,34693,34695,34697,34701,34701,34703,34708,34710,34712,34714,34719,34722,34724,34730,34736,34738,34752,34754,34758,34760,34764,34769,34772,34775,34777,34779,34792,34794,34797,34799,34799,34802,34804,34806,34807,34809,34812,34814,34819,34821,34822,34824,34829,34832,34833,34835,34839,34841,34841,34843,34845,34847,34854,34856,34860,34862,34867,34869,34873,34875,34881,34883,34884,34888,34888,34890,34894,34898,34899,34901,34903,34905,34907,34909,34909,34913,34915,34919,34923,34925,34925,34927,34930,34932,34935,34937,34937,34940,34947,34952,34953,34955,34958,34961,34963,34965,34971,34974,34975,34977,34978,34980,34980,34983,34984,34986,34988,34993,34994,34998,35002,35004,35006,35008,35010,35017,35024,35026,35026,35028,35039,35041,35041,35047,35048,35051,35052,35054,35060,35062,35070,35073,35074,35077,35079,35081,35084,35086,35086,35088,35098,35102,35103,35105,35107,35109,35111,35113,35123,35125,35128,35131,35134,35137,35138,35140,35140,35142,35142,35145,35145,35147,35148,35151,35155,35158,35172,35174,35174,35177,35183,35185,35188,35190,35190,35193,35196,35198,35199,35201,35203,35205,35206,35208,35208,35211,35211,35215,35215,35219,35219,35221,35224,35227,35231,35233,35236,35238,35238,35242,35242,35244,35247,35250,35250,35254,35255,35257,35258,35261,35264,35282,35286,35289,35293,35295,35302,35304,35305,35307,35309,35312,35316,35318,35320,35322,35324,35326,35328,35330,35332,35335,35336,35338,35338,35340,35340,35342,35347,35349,35352,35355,35355,35357,35359,35362,35363,35365,35365,35367,35367,35370,35370,35372,35373,35376,35377,35380,35380,35382,35382,35385,35388,35390,35393,35396,35398,35400,35400,35402,35402,35404,35410,35412,35417,35419,35419,35422,35422,35424,35427,35430,35430,35432,35433,35435,35438,35440,35447,35449,35452,35455,35455,35457,35463,35467,35469,35471,35471,35473,35475,35477,35478,35480,35482,35486,35486,35488,35489,35491,35496,35498,35499,35504,35504,35506,35506,35510,35510,35512,35520,35522,35529,35531,35531,35533,35533,35535,35535,35537,35545,35547,35554,35556,35556,35558,35560,35563,35563,35565,35576,35578,35580,35582,35586,35588,35592,35594,35595,35597,35614,35616,35616,35618,35624,35626,35628,35630,35633,35635,35635,35637,35639,35641,35646,35648,35650,35653,35659,35662,35674,35676,35677,35679,35680,35683,35683,35685,35688,35690,35693,35695,35696,35700,35700,35703,35707,35709,35712,35714,35714,35716,35718,35720,35720,35722,35724,35726,35726,35730,35734,35736,35738,35740,35740,35742,35743,35895,35895,35897,35897,35899,35903,35905,35907,35909,35920,35924,35927,35930,35930,35932,35933,35935,35935,35937,35938,35940,35942,35944,35949,35951,35955,35957,35963,35965,35965,35968,35970,35972,35974,35977,35978,35980,35981,35983,35989,35991,35994,35996,35998,36000,36005,36007,36012,36015,36016,36018,36037,36039,36040,36042,36042,36044,36044,36047,36047,36049,36051,36053,36053,36055,36055,36057,36058,36060,36072,36074,36074,36076,36078,36080,36081,36083,36085,36088,36094,36096,36096,36098,36098,36100,36106,36109,36109,36111,36112,36115,36119,36121,36121,36123,36123,36196,36196,36198,36201,36203,36208,36210,36212,36214,36217,36219,36219,36221,36221,36224,36225,36228,36229,36233,36234,36236,36246,36249,36249,36251,36252,36255,36257,36259,36259,36261,36261,36263,36264,36266,36271,36274,36279,36281,36282,36284,36284,36286,36287,36289,36290,36293,36296,36299,36305,36307,36307,36309,36317,36319,36324,36326,36332,36334,36340,36346,36346,36348,36352,36354,36359,36361,36362,36365,36365,36367,36391,36393,36393,36395,36395,36398,36398,36400,36401,36403,36406,36408,36409,36412,36418,36420,36421,36423,36430,36432,36432,36435,36439,36441,36455,36457,36458,36460,36461,36463,36463,36466,36468,36470,36470,36472,36472,36474,36476,36481,36482,36484,36494,36496,36504,36506,36506,36509,36513,36515,36518,36520,36524,36530,36530,36538,36538,36541,36541,36544,36544,36546,36546,36553,36557,36559,36559,36561,36564,36567,36568,36571,36577,36581,36585,36587,36588,36590,36591,36593,36593,36596,36604,36606,36611,36613,36619,36621,36622,36624,36632,36634,36640,36643,36646,36649,36650,36652,36652,36654,36655,36658,36665,36667,36667,36670,36672,36674,36681,36683,36683,36685,36699,36701,36708,36763,36764,36767,36767,36771,36771,36774,36774,36776,36776,36781,36786,36788,36788,36799,36799,36802,36802,36804,36806,36809,36809,36811,36811,36813,36814,36817,36823,36832,36838,36840,36840,36842,36843,36845,36846,36848,36848,36852,36856,36858,36870,36875,36877,36879,36881,36884,36887,36889,36900,36909,36911,36913,36914,36916,36918,36920,36920,36924,36927,36929,36930,36932,36932,36935,36935,36937,36939,36941,36949,36952,36953,36955,36958,36960,36960,36962,36963,36967,36969,36971,36971,36973,36976,36978,37000,37002,37003,37005,37005,37007,37009,37012,37013,37015,37017,37019,37019,37022,37027,37029,37031,37034,37034,37039,37046,37048,37048,37053,37055,37057,37057,37059,37059,37061,37061,37063,37064,37066,37067,37070,37070,37076,37085,37087,37093,37096,37101,37103,37109,37113,37129,37131,37131,37133,37138,37140,37140,37142,37156,37158,37174,37176,37179,37182,37185,37187,37200,37202,37203,37205,37208,37210,37210,37215,37221,37224,37226,37228,37228,37230,37231,37234,37237,37239,37242,37248,37255,37257,37259,37261,37261,37263,37267,37273,37283,37285,37285,37287,37288,37290,37301,37303,37303,37305,37306,37308,37310,37312,37315,37317,37319,37321,37321,37323,37329,37331,37333,37335,37338,37340,37341,37346,37348,37350,37358,37361,37361,37363,37365,37367,37369,37373,37373,37375,37383,37385,37386,37388,37389,37391,37394,37396,37399,37401,37402,37404,37404,37406,37406,37411,37415,37421,37422,37424,37428,37430,37434,37437,37440,37445,37446,37448,37460,37462,37463,37466,37467,37470,37470,37472,37473,37475,37479,37484,37485,37487,37488,37490,37490,37494,37494,37496,37504,37506,37507,37509,37512,37514,37518,37521,37521,37523,37533,37536,37548,37554,37559,37561,37561,37563,37564,37568,37587,37589,37589,37591,37593,37597,37601,37604,37604,37606,37610,37614,37617,37623,37628,37630,37634,37636,37636,37638,37638,37640,37641,37643,37648,37650,37654,37656,37659,37661,37675,37677,37679,37683,37686,37688,37689,37692,37692,37702,37703,37705,37714,37716,37724,37726,37726,37728,37729,37731,37733,37735,37735,37738,37738,37740,37741,37744,37745,37749,37751,37753,37756,37758,37758,37760,37760,37762,37763,37768,37770,37772,37775,37777,37778,37780,37787,37789,37791,37793,37802,37804,37804,37806,37813,37815,37815,37824,37824,37826,37828,37831,37832,37834,37834,37836,37842,37844,37850,37852,37855,37857,37860,37862,37864,37868,37868,37870,37870,37877,37888,37891,37891,37894,37895,37897,37910,37912,37913,37920,37920,37928,37932,37934,37934,37936,37939,37941,37949,37951,37952,37956,37964,37967,37970,37973,37973,37975,37975,37981,37982,37984,37984,37986,37988,37992,37995,37997,38008,38012,38019,38263,38263,38266,38269,38272,38272,38274,38275,38278,38278,38280,38281,38283,38292,38296,38296,38299,38300,38302,38303,38305,38305,38307,38309,38312,38313,38315,38318,38320,38321,38325,38327,38329,38336,38339,38339,38341,38349,38352,38358,38362,38364,38366,38373,38428,38428,38430,38430,38432,38436,38440,38440,38442,38442,38444,38450,38457,38461,38463,38464,38466,38468,38474,38481,38483,38484,38488,38488,38491,38495,38497,38500,38506,38509,38511,38520,38524,38526,38528,38528,38531,38539,38541,38542,38545,38549,38551,38553,38555,38556,38558,38558,38561,38562,38564,38564,38567,38570,38572,38572,38574,38574,38576,38577,38579,38580,38584,38585,38587,38588,38591,38606,38610,38623,38625,38627,38629,38629,38632,38634,38639,38642,38645,38651,38653,38653,38655,38656,38658,38658,38660,38665,38667,38667,38669,38675,38678,38678,38680,38681,38684,38688,38690,38700,38702,38704,38706,38706,38709,38709,38712,38714,38717,38719,38722,38724,38726,38729,38731,38731,38738,38738,38742,38742,38744,38744,38746,38748,38750,38750,38752,38754,38758,38758,38760,38762,38764,38764,38766,38766,38768,38768,38770,38772,38774,38776,38778,38789,38792,38792,38794,38795,38797,38799,38804,38804,38807,38810,38812,38814,38816,38822,38824,38824,38826,38830,38835,38835,38838,38839,38841,38841,38843,38843,38847,38847,38849,38849,38851,38855,38857,38857,38859,38864,38867,38873,38876,38879,38881,38881,38883,38883,38885,38885,38893,38893,38896,38897,38899,38899,38902,38902,38904,38907,38909,38920,38922,38922,38924,38931,38934,38936,38939,38942,38944,38945,38948,38948,38950,38953,38955,38955,38957,38957,38959,38960,38962,38962,38965,38965,38967,38969,38971,38971,38977,38977,38979,38982,38984,38986,38988,38995,38999,39001,39003,39008,39010,39013,39015,39015,39017,39019,39023,39028,39080,39081,39084,39087,39089,39091,39094,39094,39096,39096,39098,39106,39108,39108,39110,39110,39113,39113,39115,39116,39131,39131,39135,39135,39138,39139,39141,39141,39143,39143,39145,39147,39149,39149,39151,39151,39154,39154,39156,39156,39158,39158,39161,39162,39164,39166,39168,39168,39170,39171,39173,39173,39175,39178,39180,39180,39184,39192,39194,39195,39198,39199,39201,39201,39204,39205,39207,39219,39221,39221,39226,39226,39228,39231,39233,39233,39235,39235,39237,39237,39239,39241,39243,39244,39246,39246,39248,39257,39259,39260,39262,39263,39265,39265,39318,39321,39324,39326,39329,39329,39331,39331,39333,39336,39339,39349,39353,39355,39357,39357,39361,39363,39367,39367,39369,39369,39371,39385,39387,39389,39391,39391,39394,39397,39399,39399,39401,39402,39404,39406,39408,39409,39412,39412,39414,39423,39425,39431,39433,39435,39437,39439,39441,39441,39444,39446,39449,39454,39456,39456,39458,39461,39463,39463,39465,39470,39472,39474,39476,39482,39485,39494,39496,39498,39500,39504,39506,39511,39513,39515,39518,39520,39522,39522,39524,39531,39592,39592,39595,39595,39597,39597,39599,39601,39603,39604,39607,39609,39611,39612,39614,39618,39622,39623,39626,39626,39629,39629,39631,39638,39640,39640,39644,39644,39647,39647,39649,39649,39651,39651,39654,39655,39659,39663,39665,39667,39670,39671,39673,39678,39681,39681,39683,39686,39688,39688,39690,39694,39696,39698,39701,39706,39710,39712,39714,39717,39719,39721,39723,39723,39726,39727,39729,39731,39733,39733,39735,39735,39738,39740,39742,39743,39745,39750,39752,39752,39754,39759,39761,39762,39764,39766,39768,39771,39775,39777,39780,39780,39782,39784,39788,39788,39791,39793,39796,39799,39802,39806,39808,39808,39810,39810,39813,39816,39824,39827,39829,39829,39834,39835,39838,39838,39840,39842,39844,39846,39848,39848,39850,39851,39853,39855,39861,39862,39864,39865,39869,39869,39871,39873,39875,39876,39878,39882,39891,39895,39897,39900,39902,39902,39904,39906,39908,39912,39914,39916,39920,39920,39927,39928,39933,39933,39941,39945,39947,39947,39949,39950,39954,39956,39959,39959,39964,39965,39969,39969,39971,39973,39976,39977,39979,39981,39985,39988,39990,39991,39993,39993,39995,40001,40004,40004,40006,40006,40008,40014,40016,40016,40018,40018,40020,40025,40030,40032,40034,40035,40038,40040,40045,40046,40049,40049,40051,40053,40055,40058,40165,40167,40169,40170,40173,40173,40177,40183,40185,40189,40191,40192,40195,40201,40208,40208,40210,40210,40212,40213,40215,40217,40219,40219,40221,40224,40226,40227,40229,40230,40232,40233,40237,40241,40243,40243,40246,40248,40251,40251,40253,40259,40261,40261,40266,40268,40271,40271,40273,40276,40278,40285,40287,40289,40295,40300,40303,40309,40311,40313,40315,40315,40317,40317,40319,40322,40324,40332,40336,40336,40338,40338,40340,40340,40342,40356,40358,40362,40364,40365,40367,40367,40369,40380,40382,40383,40385,40387,40389,40389,40391,40392,40394,40403,40405,40415,40417,40422,40424,40425,40427,40432,40434,40443,40445,40455,40457,40457,40459,40459,40461,40461,40463,40469,40471,40471,40473,40475,40477,40478,40565,40565,40569,40570,40572,40573,40575,40576,40578,40579,40582,40590,40593,40596,40599,40599,40601,40605,40607,40609,40612,40613,40615,40615,40617,40617,40621,40622,40624,40624,40628,40631,40635,40636,40638,40638,40640,40640,40642,40643,40648,40648,40652,40657,40659,40662,40664,40664,40666,40672,40676,40680,40683,40683,40685,40688,40690,40695,40697,40701,40703,40705,40710,40711,40713,40714,40718,40720,40722,40723,40725,40726,40728,40732,40734,40734,40736,40736,40738,40741,40744,40760,40763,40763,40765,40766,40768,40771,40774,40783,40786,40786,40788,40793,40795,40801,40803,40807,40810,40812,40814,40818,40820,40827,40830,40830,40845,40845,40848,40850,40852,40853,40856,40856,40860,40860,40864,40864,40866,40866,40868,40868,64012,64013,65072,65073,65075,65092,65097,65106,65108,65111,65113,65126,65128,65131,65281,65281,65283,65286,65288,65338,65340,65340,65343,65343,65345,65374,65504,65505,65507,65507,65509,65509]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add1361 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(21,17141,[32,91,93,126,161,161,164,164,167,168,170,170,173,173,176,180,182,186,188,191,198,198,208,208,215,216,222,223,230,230,240,240,247,248,254,254,273,273,294,295,305,307,312,312,319,322,329,331,338,339,358,359,711,711,720,720,728,731,733,733,913,929,931,937,945,961,963,969,1025,1025,1040,1103,1105,1105,8213,8213,8216,8217,8220,8221,8224,8225,8229,8230,8240,8240,8242,8243,8251,8251,8308,8308,8319,8319,8321,8324,8361,8361,8451,8451,8457,8457,8467,8467,8470,8470,8481,8482,8486,8486,8491,8491,8531,8532,8539,8542,8544,8553,8560,8569,8592,8601,8658,8658,8660,8660,8704,8704,8706,8707,8711,8712,8715,8715,8719,8719,8721,8721,8730,8730,8733,8734,8736,8736,8741,8741,8743,8748,8750,8750,8756,8757,8764,8765,8786,8786,8800,8801,8804,8805,8810,8811,8834,8835,8838,8839,8857,8857,8869,8869,8978,8978,9312,9326,9332,9346,9372,9397,9424,9449,9472,9475,9484,9547,9618,9618,9632,9633,9635,9641,9650,9651,9654,9655,9660,9661,9664,9665,9670,9672,9675,9675,9678,9681,9733,9734,9742,9743,9756,9756,9758,9758,9792,9792,9794,9794,9824,9825,9827,9829,9831,9834,9836,9837,12288,12291,12296,12305,12307,12309,12353,12435,12449,12534,12593,12686,12800,12828,12896,12923,12927,12927,13184,13188,13192,13258,13263,13264,13267,13267,13270,13270,13272,13272,13275,13277,19968,19969,19971,19971,19975,19979,19981,19981,19985,19985,19988,19990,19992,19993,19998,19998,20013,20013,20018,20018,20024,20025,20027,20027,20034,20035,20037,20037,20043,20043,20045,20047,20054,20054,20056,20057,20061,20063,20075,20075,20077,20077,20083,20083,20086,20087,20094,20094,20098,20098,20102,20102,20104,20104,20107,20108,20110,20110,20112,20114,20116,20117,20120,20120,20123,20123,20126,20126,20129,20130,20132,20134,20136,20136,20139,20142,20150,20150,20154,20154,20160,20161,20164,20164,20167,20167,20170,20171,20173,20173,20180,20185,20189,20189,20191,20191,20195,20197,20208,20208,20210,20210,20214,20215,20219,20219,20225,20225,20233,20235,20237,20241,20271,20271,20276,20276,20278,20278,20280,20280,20282,20282,20284,20285,20291,20291,20294,20296,20301,20305,20309,20309,20313,20316,20329,20329,20335,20336,20339,20339,20342,20342,20346,20346,20350,20351,20353,20353,20355,20356,20358,20358,20360,20360,20362,20363,20365,20365,20367,20367,20369,20369,20374,20374,20376,20376,20379,20379,20381,20381,20398,20399,20405,20406,20415,20415,20418,20420,20425,20426,20430,20430,20433,20433,20435,20436,20439,20439,20442,20442,20445,20445,20447,20449,20462,20463,20465,20465,20467,20467,20469,20469,20472,20472,20474,20474,20482,20482,20486,20486,20489,20489,20491,20491,20493,20493,20497,20498,20502,20502,20505,20506,20508,20508,20510,20511,20513,20513,20515,20516,20518,20520,20522,20525,20539,20539,20547,20547,20551,20553,20559,20559,20565,20565,20570,20570,20572,20572,20581,20581,20596,20598,20600,20600,20608,20608,20613,20613,20621,20621,20625,20625,20632,20633,20652,20653,20658,20659,20661,20661,20663,20663,20670,20670,20677,20677,20681,20682,20687,20687,20689,20689,20693,20694,20698,20698,20702,20702,20709,20709,20711,20711,20717,20717,20729,20729,20731,20731,20735,20737,20740,20740,20742,20742,20745,20745,20754,20754,20767,20767,20769,20769,20778,20778,20786,20786,20791,20791,20794,20794,20796,20796,20800,20801,20803,20809,20811,20814,20818,20818,20828,20828,20834,20834,20837,20837,20839,20846,20849,20849,20853,20856,20860,20860,20864,20864,20870,20870,20874,20874,20877,20877,20882,20882,20885,20885,20887,20887,20896,20896,20901,20901,20906,20906,20908,20908,20918,20919,20925,20925,20932,20932,20934,20934,20937,20937,20939,20941,20956,20958,20961,20961,20976,20977,20982,20982,20984,20986,20989,20989,20992,20992,20995,20995,20998,21000,21002,21002,21006,21006,21009,21009,21015,21015,21021,21021,21028,21029,21033,21034,21038,21038,21040,21040,21046,21051,21059,21059,21063,21063,21066,21069,21076,21076,21078,21078,21083,21083,21085,21085,21089,21089,21097,21098,21103,21103,21106,21106,21109,21109,21117,21117,21119,21119,21123,21123,21127,21129,21133,21133,21137,21138,21147,21147,21151,21152,21155,21156,21161,21163,21182,21182,21185,21185,21187,21187,21189,21189,21191,21191,21193,21193,21197,21197,21202,21202,21205,21206,21208,21209,21211,21211,21213,21215,21218,21220,21235,21235,21237,21237,21240,21240,21242,21243,21246,21247,21253,21253,21256,21256,21261,21261,21263,21264,21269,21271,21273,21273,21280,21281,21283,21283,21290,21290,21295,21295,21305,21305,21311,21313,21315,21316,21319,21322,21325,21325,21329,21332,21335,21335,21338,21338,21340,21340,21342,21342,21344,21344,21350,21350,21352,21352,21359,21361,21364,21365,21367,21367,21373,21373,21375,21375,21380,21380,21395,21395,21400,21400,21402,21402,21407,21408,21413,21414,21421,21421,21435,21435,21443,21443,21448,21451,21453,21453,21460,21460,21462,21463,21467,21467,21473,21477,21481,21485,21487,21491,21496,21496,21507,21508,21512,21514,21516,21521,21531,21531,21533,21533,21535,21536,21542,21542,21545,21545,21547,21547,21555,21555,21560,21561,21563,21564,21566,21566,21570,21570,21576,21576,21578,21578,21585,21585,21608,21608,21610,21610,21617,21617,21619,21619,21621,21621,21627,21629,21632,21632,21638,21638,21644,21644,21646,21646,21648,21648,21668,21668,21672,21672,21675,21676,21683,21683,21688,21688,21693,21693,21696,21697,21700,21700,21704,21705,21729,21729,21733,21733,21736,21736,21741,21742,21746,21746,21754,21754,21764,21764,21766,21767,21774,21774,21776,21776,21788,21788,21807,21807,21809,21809,21813,21813,21822,21822,21828,21828,21830,21830,21839,21839,21843,21843,21846,21846,21854,21854,21859,21859,21884,21884,21888,21888,21892,21892,21894,21895,21897,21898,21912,21914,21916,21917,21927,21927,21929,21932,21934,21934,21957,21957,21959,21959,21972,21972,21978,21978,21980,21980,21983,21983,21987,21988,22013,22014,22022,22022,22025,22025,22036,22036,22039,22039,22063,22063,22066,22066,22068,22068,22070,22070,22099,22099,22120,22120,22123,22123,22132,22132,22150,22150,22181,22181,22188,22188,22190,22190,22196,22196,22204,22204,22218,22218,22221,22221,22225,22225,22234,22235,22238,22238,22240,22240,22256,22256,22265,22266,22275,22276,22280,22280,22283,22283,22285,22285,22290,22291,22294,22294,22296,22296,22303,22303,22312,22312,22317,22317,22320,22320,22331,22331,22336,22336,22338,22338,22343,22343,22346,22346,22349,22350,22352,22353,22369,22369,22372,22372,22374,22374,22378,22378,22382,22382,22384,22384,22389,22389,22396,22396,22402,22402,22408,22408,22411,22411,22419,22419,22432,22432,22434,22435,22467,22467,22471,22472,22475,22475,22478,22478,22495,22496,22512,22512,22516,22516,22519,22519,22521,22522,22524,22524,22528,22528,22530,22530,22533,22534,22536,22538,22558,22558,22561,22561,22564,22564,22567,22567,22570,22570,22575,22577,22580,22581,22586,22586,22602,22603,22607,22607,22609,22609,22612,22612,22615,22616,22618,22618,22622,22622,22625,22626,22628,22628,22645,22645,22649,22649,22652,22652,22654,22654,22659,22659,22661,22661,22665,22665,22675,22675,22684,22684,22686,22687,22696,22697,22702,22702,22707,22707,22714,22715,22718,22718,22721,22721,22725,22725,22727,22727,22734,22734,22737,22737,22739,22739,22741,22741,22744,22745,22750,22751,22756,22756,22763,22764,22767,22767,22777,22779,22781,22781,22799,22799,22804,22806,22809,22810,22812,22812,22818,22818,22823,22823,22825,22827,22829,22830,22833,22833,22839,22839,22846,22846,22852,22852,22855,22857,22862,22865,22868,22869,22871,22871,22874,22874,22880,22880,22882,22882,22887,22887,22890,22894,22899,22900,22904,22904,22909,22909,22914,22916,22922,22922,22931,22931,22934,22935,22937,22937,22949,22949,22952,22952,22956,22956,22969,22969,22971,22971,22974,22974,22979,22979,22982,22982,22985,22985,22987,22987,22992,22993,22995,22996,23001,23002,23004,23005,23014,23014,23016,23016,23018,23018,23020,23020,23022,23022,23032,23032,23035,23035,23039,23039,23041,23041,23043,23043,23057,23057,23064,23064,23067,23068,23071,23072,23077,23077,23081,23081,23094,23094,23100,23100,23105,23105,23110,23110,23113,23113,23130,23130,23138,23138,23142,23142,23186,23186,23194,23195,23204,23204,23233,23234,23236,23236,23241,23241,23244,23244,23265,23265,23270,23270,23273,23273,23301,23301,23305,23305,23307,23308,23318,23318,23338,23338,23360,23360,23363,23363,23376,23377,23380,23381,23383,23384,23386,23386,23388,23389,23391,23391,23395,23396,23401,23401,23403,23403,23408,23409,23413,23413,23416,23416,23418,23418,23420,23420,23429,23429,23431,23433,23435,23436,23439,23439,23443,23443,23445,23452,23458,23462,23468,23468,23470,23470,23472,23472,23475,23478,23480,23481,23487,23488,23490,23495,23500,23500,23504,23504,23506,23508,23511,23511,23518,23519,23521,23522,23524,23529,23531,23532,23534,23535,23541,23542,23544,23544,23546,23546,23553,23553,23556,23556,23559,23563,23565,23567,23569,23569,23574,23574,23577,23577,23588,23588,23592,23592,23601,23601,23608,23612,23614,23616,23621,23622,23624,23624,23627,23627,23629,23630,23633,23633,23637,23637,23643,23643,23648,23648,23650,23650,23652,23653,23660,23660,23663,23663,23665,23665,23673,23673,23696,23697,23713,23713,23721,23721,23723,23724,23729,23729,23731,23731,23733,23733,23735,23736,23738,23738,23742,23742,23744,23744,23769,23769,23776,23776,23784,23784,23791,23792,23796,23796,23798,23798,23803,23803,23805,23805,23815,23815,23821,23822,23825,23825,23828,23828,23830,23831,23833,23833,23847,23847,23849,23849,23883,23884,23888,23888,23913,23913,23916,23916,23919,23919,23943,23943,23947,23947,23965,23965,23968,23968,23970,23970,23978,23978,23992,23992,23994,23994,23996,23997,24013,24013,24018,24018,24022,24022,24029,24030,24033,24034,24037,24040,24043,24043,24046,24046,24049,24052,24055,24055,24061,24062,24066,24067,24070,24070,24076,24076,24081,24081,24086,24086,24089,24089,24091,24091,24093,24093,24101,24101,24107,24107,24109,24109,24115,24115,24118,24118,24120,24120,24125,24125,24127,24128,24132,24133,24135,24135,24140,24140,24149,24149,24159,24159,24161,24163,24178,24180,24183,24185,24187,24190,24196,24196,24199,24199,24202,24202,24207,24207,24213,24213,24215,24215,24218,24218,24220,24220,24224,24224,24230,24231,24235,24235,24237,24237,24245,24248,24254,24254,24258,24258,24264,24266,24272,24272,24275,24275,24278,24278,24282,24283,24287,24288,24290,24291,24300,24300,24307,24307,24310,24311,24314,24315,24321,24321,24324,24324,24330,24330,24335,24335,24337,24337,24339,24341,24343,24344,24347,24347,24351,24351,24358,24359,24361,24361,24369,24369,24373,24373,24378,24378,24380,24380,24392,24392,24394,24394,24396,24396,24398,24398,24406,24407,24409,24409,24411,24411,24418,24418,24422,24423,24425,24429,24432,24433,24439,24439,24441,24441,24444,24444,24447,24449,24453,24453,24455,24455,24458,24460,24464,24466,24471,24473,24478,24478,24480,24481,24488,24490,24494,24494,24501,24501,24503,24503,24505,24505,24509,24509,24515,24515,24517,24517,24524,24525,24534,24537,24544,24544,24555,24555,24565,24565,24573,24573,24575,24575,24591,24591,24594,24594,24598,24598,24604,24605,24608,24609,24613,24613,24615,24616,24618,24618,24623,24623,24641,24643,24653,24653,24656,24656,24658,24658,24661,24661,24665,24665,24669,24669,24674,24677,24680,24682,24684,24685,24687,24688,24709,24709,24713,24713,24716,24717,24724,24724,24726,24726,24730,24731,24735,24736,24739,24740,24743,24743,24752,24752,24754,24756,24758,24758,24760,24760,24764,24765,24773,24773,24775,24775,24785,24785,24794,24794,24796,24796,24799,24801,24816,24817,24819,24819,24822,24822,24825,24827,24833,24833,24838,24838,24840,24841,24845,24847,24853,24853,24858,24859,24863,24863,24871,24871,24880,24880,24884,24884,24887,24887,24892,24892,24894,24895,24898,24898,24900,24900,24903,24904,24906,24908,24915,24915,24917,24917,24920,24921,24925,24925,24927,24927,24930,24932,24935,24936,24939,24939,24942,24942,24944,24944,24950,24951,24957,24958,24961,24962,24970,24970,24974,24974,24976,24977,24980,24980,24984,24986,24996,24996,24999,24999,25001,25001,25003,25004,25006,25006,25010,25010,25014,25014,25018,25018,25022,25022,25027,25027,25031,25035,25062,25062,25074,25074,25078,25080,25082,25082,25084,25084,25087,25088,25095,25096,25098,25098,25100,25102,25104,25106,25110,25110,25114,25114,25119,25119,25121,25121,25130,25130,25134,25134,25136,25137,25140,25140,25142,25142,25150,25153,25159,25161,25163,25163,25165,25165,25171,25171,25176,25176,25198,25198,25201,25201,25206,25206,25209,25209,25212,25212,25215,25216,25220,25220,25225,25226,25233,25234,25237,25237,25239,25240,25243,25243,25259,25259,25265,25265,25269,25269,25273,25273,25276,25277,25282,25282,25287,25289,25292,25293,25295,25296,25298,25300,25302,25305,25307,25308,25324,25327,25329,25329,25331,25331,25335,25335,25342,25343,25345,25345,25351,25351,25353,25353,25361,25361,25387,25387,25391,25391,25402,25403,25405,25406,25417,25417,25420,25420,25423,25424,25429,25429,25447,25448,25454,25454,25458,25458,25463,25463,25466,25467,25471,25471,25475,25475,25480,25481,25484,25484,25490,25490,25494,25494,25496,25496,25499,25499,25504,25506,25509,25509,25511,25514,25536,25536,25540,25540,25542,25542,25551,25552,25558,25558,25562,25563,25569,25569,25581,25582,25588,25588,25590,25591,25613,25613,25615,25615,25620,25620,25622,25623,25628,25628,25634,25634,25644,25645,25658,25658,25662,25662,25688,25688,25696,25696,25705,25705,25711,25711,25720,25722,25736,25736,25745,25747,25754,25754,25758,25758,25764,25765,25771,25771,25773,25774,25776,25776,25778,25778,25787,25787,25793,25793,25796,25797,25799,25799,25802,25802,25805,25806,25810,25810,25812,25812,25816,25816,25818,25818,25825,25826,25829,25831,25836,25836,25842,25842,25844,25844,25850,25850,25854,25854,25856,25856,25860,25860,25880,25880,25885,25885,25891,25891,25898,25900,25903,25903,25910,25913,25915,25915,25918,25919,25925,25925,25928,25928,25933,25935,25937,25937,25942,25943,25950,25950,25954,25955,25958,25958,25964,25965,25970,25970,25972,25973,25975,25976,25982,25982,25986,25987,25989,25989,25991,25991,25996,25996,26000,26001,26007,26007,26009,26009,26011,26012,26015,26015,26017,26017,26020,26021,26023,26023,26027,26028,26031,26032,26039,26039,26041,26041,26044,26045,26049,26049,26053,26053,26059,26060,26063,26063,26066,26066,26071,26071,26080,26080,26083,26083,26085,26086,26088,26089,26092,26093,26097,26097,26100,26100,26106,26109,26111,26111,26118,26119,26121,26122,26124,26124,26126,26129,26131,26133,26142,26144,26149,26149,26151,26152,26157,26157,26159,26161,26164,26164,26166,26166,26170,26171,26177,26180,26185,26185,26187,26187,26191,26191,26201,26201,26203,26203,26205,26207,26212,26217,26219,26219,26222,26223,26227,26228,26230,26232,26234,26234,26244,26244,26247,26249,26254,26254,26256,26257,26262,26264,26269,26269,26272,26272,26274,26274,26283,26283,26286,26286,26290,26292,26297,26297,26299,26299,26302,26302,26308,26308,26310,26311,26313,26313,26326,26326,26329,26329,26332,26333,26336,26336,26342,26342,26352,26352,26354,26356,26359,26362,26364,26364,26366,26368,26371,26371,26376,26377,26379,26379,26381,26381,26388,26389,26391,26391,26395,26395,26397,26399,26406,26408,26410,26414,26417,26417,26420,26420,26422,26422,26426,26426,26429,26429,26438,26438,26441,26441,26446,26449,26451,26451,26454,26454,26460,26460,26462,26463,26477,26477,26479,26481,26483,26483,26485,26485,26487,26487,26491,26491,26494,26495,26503,26503,26505,26505,26507,26507,26511,26512,26515,26515,26517,26517,26519,26519,26522,26522,26524,26525,26543,26544,26547,26547,26550,26552,26558,26558,26564,26564,26575,26580,26586,26586,26589,26589,26601,26601,26604,26604,26607,26609,26611,26614,26619,26619,26622,26622,26642,26643,26646,26647,26657,26658,26666,26666,26671,26671,26680,26681,26684,26685,26688,26691,26696,26696,26702,26702,26704,26705,26707,26708,26733,26733,26742,26742,26751,26751,26753,26753,26757,26757,26767,26767,26771,26772,26775,26775,26781,26781,26783,26783,26785,26786,26791,26792,26797,26797,26799,26801,26803,26803,26805,26806,26820,26821,26825,26825,26827,26827,26829,26829,26834,26834,26837,26837,26839,26840,26842,26842,26847,26848,26855,26856,26862,26862,26866,26866,26873,26874,26880,26880,26885,26885,26893,26894,26898,26898,26919,26919,26928,26928,26941,26941,26943,26943,26954,26954,26963,26965,26967,26967,26969,26970,26974,26974,26976,26979,26984,26984,26987,26987,26989,26991,26997,26997,26999,27001,27029,27029,27035,27036,27045,27045,27047,27047,27054,27054,27060,27060,27067,27067,27073,27073,27075,27075,27083,27085,27088,27088,27112,27112,27114,27114,27131,27131,27133,27133,27135,27135,27138,27138,27146,27146,27153,27153,27155,27155,27159,27159,27161,27161,27166,27167,27169,27169,27171,27171,27189,27189,27192,27194,27197,27197,27204,27204,27208,27208,27211,27211,27218,27219,27224,27225,27231,27231,27233,27233,27243,27243,27264,27264,27268,27268,27273,27273,27277,27278,27287,27287,27292,27292,27298,27299,27315,27315,27323,27323,27330,27331,27347,27347,27354,27355,27382,27382,27387,27387,27396,27396,27402,27402,27404,27404,27410,27410,27414,27414,27424,27425,27427,27427,27442,27442,27450,27450,27453,27454,27462,27463,27468,27468,27470,27470,27472,27472,27487,27487,27489,27494,27498,27498,27506,27506,27511,27512,27515,27515,27519,27519,27523,27524,27526,27526,27529,27530,27542,27542,27544,27544,27550,27550,27566,27567,27570,27570,27573,27573,27575,27575,27578,27578,27580,27580,27583,27583,27585,27585,27589,27590,27595,27595,27597,27597,27599,27599,27602,27604,27606,27608,27611,27611,27627,27628,27656,27656,27663,27663,27665,27665,27667,27667,27683,27683,27700,27700,27703,27704,27710,27710,27712,27714,27726,27726,27728,27728,27733,27733,27735,27735,27738,27738,27741,27744,27752,27752,27754,27754,27757,27757,27760,27760,27762,27762,27766,27766,27770,27770,27773,27774,27777,27779,27781,27784,27788,27788,27792,27792,27794,27798,27801,27803,27819,27819,27822,27822,27827,27827,27832,27833,27835,27839,27841,27842,27844,27844,27849,27850,27852,27852,27859,27859,27861,27861,27863,27863,27867,27867,27873,27875,27877,27877,27880,27880,27883,27883,27886,27888,27891,27891,27915,27916,27921,27921,27927,27927,27929,27929,27931,27931,27934,27934,27941,27941,27943,27943,27945,27946,27954,27954,27957,27958,27960,27961,27963,27963,27965,27966,27969,27969,27993,27994,27996,27996,28003,28003,28006,28006,28009,28010,28012,28012,28014,28014,28020,28020,28023,28025,28031,28031,28037,28037,28039,28041,28044,28046,28049,28049,28051,28051,28053,28053,28079,28079,28082,28082,28085,28085,28096,28096,28099,28103,28107,28107,28111,28111,28113,28113,28120,28122,28126,28126,28129,28129,28136,28136,28138,28139,28142,28142,28145,28145,28147,28147,28149,28149,28151,28155,28183,28183,28185,28187,28191,28193,28195,28198,28203,28205,28207,28207,28210,28210,28212,28212,28214,28214,28216,28216,28218,28218,28220,28222,28227,28228,28234,28234,28237,28237,28246,28246,28248,28248,28251,28252,28254,28255,28263,28263,28267,28267,28270,28271,28274,28275,28282,28282,28304,28304,28310,28310,28316,28317,28319,28319,28322,28322,28325,28325,28330,28331,28335,28335,28337,28337,28342,28342,28346,28346,28354,28354,28356,28357,28361,28361,28363,28364,28366,28366,28369,28369,28371,28372,28399,28399,28404,28404,28408,28408,28414,28415,28417,28418,28422,28422,28431,28431,28433,28433,28436,28437,28448,28448,28450,28451,28459,28460,28465,28466,28472,28472,28479,28479,28481,28481,28497,28497,28500,28500,28503,28504,28506,28507,28510,28511,28514,28514,28516,28516,28525,28526,28528,28528,28538,28538,28540,28542,28545,28545,28548,28548,28552,28552,28557,28558,28560,28560,28564,28564,28567,28567,28579,28580,28583,28583,28590,28591,28593,28593,28595,28595,28601,28601,28606,28606,28608,28611,28618,28618,28629,28629,28634,28634,28639,28641,28644,28644,28649,28649,28651,28652,28655,28655,28657,28657,28670,28670,28673,28673,28677,28678,28681,28681,28683,28683,28687,28687,28689,28689,28693,28693,28696,28696,28698,28703,28707,28707,28711,28712,28719,28719,28727,28727,28734,28734,28748,28748,28752,28753,28760,28760,28765,28765,28771,28771,28779,28779,28784,28784,28792,28792,28796,28797,28805,28805,28810,28810,28814,28814,28818,28818,28824,28826,28833,28833,28836,28836,28843,28845,28847,28847,28851,28851,28855,28857,28872,28872,28875,28875,28879,28879,28888,28889,28893,28893,28895,28895,28913,28913,28921,28921,28925,28925,28932,28932,28937,28937,28940,28940,28953,28954,28958,28958,28961,28961,28966,28966,28976,28976,28982,28982,28999,28999,29001,29002,29004,29004,29006,29006,29008,29008,29014,29014,29017,29017,29020,29020,29022,29022,29028,29031,29033,29033,29036,29036,29038,29038,29053,29053,29060,29060,29065,29066,29071,29071,29074,29074,29076,29076,29081,29081,29087,29087,29090,29090,29100,29100,29105,29105,29113,29114,29118,29118,29121,29121,29123,29123,29128,29129,29134,29134,29136,29136,29138,29138,29140,29141,29151,29151,29157,29159,29165,29166,29179,29180,29182,29184,29190,29190,29200,29200,29211,29211,29226,29226,29228,29229,29232,29232,29234,29234,29237,29238,29242,29243,29245,29246,29248,29248,29254,29256,29260,29260,29266,29266,29272,29273,29275,29275,29277,29277,29279,29279,29281,29282,29287,29287,29289,29289,29298,29298,29305,29305,29309,29309,29312,29313,29346,29346,29351,29351,29356,29356,29359,29359,29376,29376,29378,29378,29380,29380,29390,29390,29392,29392,29399,29399,29401,29401,29409,29409,29417,29417,29432,29433,29436,29437,29450,29450,29462,29462,29467,29469,29477,29477,29481,29483,29494,29495,29502,29503,29508,29509,29520,29520,29522,29522,29527,29527,29544,29544,29546,29546,29552,29552,29554,29554,29557,29557,29560,29560,29562,29563,29572,29572,29574,29575,29577,29577,29579,29579,29582,29582,29588,29588,29590,29592,29599,29599,29607,29607,29609,29609,29613,29613,29618,29619,29625,29625,29632,29632,29634,29634,29641,29642,29644,29645,29647,29647,29654,29654,29657,29657,29661,29662,29664,29664,29667,29670,29673,29674,29677,29677,29687,29687,29689,29689,29693,29694,29697,29697,29699,29699,29701,29703,29705,29705,29715,29715,29723,29723,29728,29730,29733,29734,29736,29736,29738,29740,29742,29744,29747,29750,29752,29752,29754,29754,29759,29761,29763,29764,29771,29771,29781,29781,29783,29783,29785,29788,29790,29792,29794,29794,29796,29797,29800,29802,29807,29807,29822,29822,29826,29827,29831,29831,29833,29833,29835,29835,29848,29848,29852,29852,29854,29855,29857,29857,29859,29859,29861,29861,29863,29864,29866,29866,29872,29872,29874,29874,29877,29877,29881,29881,29885,29885,29887,29887,29894,29894,29898,29898,29903,29903,29908,29908,29912,29912,29914,29914,29916,29916,29920,29920,29922,29923,29926,29926,29934,29934,29943,29943,29953,29953,29956,29956,29969,29969,29973,29973,29976,29976,29978,29979,29983,29983,29987,29987,29989,29990,29992,29992,29995,29996,30000,30003,30007,30008,30010,30010,30023,30023,30028,30028,30031,30031,30033,30033,30035,30036,30041,30041,30043,30045,30050,30050,30053,30054,30058,30058,30063,30064,30069,30070,30072,30072,30074,30074,30079,30079,30086,30087,30090,30091,30094,30095,30097,30097,30109,30109,30117,30117,30123,30123,30129,30131,30133,30133,30136,30137,30140,30142,30146,30146,30149,30149,30151,30151,30157,30157,30162,30162,30164,30165,30168,30169,30171,30171,30178,30178,30192,30192,30194,30194,30196,30196,30202,30202,30204,30204,30208,30208,30221,30221,30233,30233,30239,30242,30244,30244,30246,30246,30267,30267,30274,30274,30284,30284,30286,30286,30290,30290,30294,30294,30305,30305,30308,30308,30313,30313,30316,30316,30320,30320,30322,30322,30328,30328,30331,30334,30340,30340,30342,30343,30350,30350,30352,30352,30355,30355,30382,30382,30394,30394,30399,30399,30402,30403,30406,30406,30408,30408,30410,30410,30418,30418,30422,30422,30427,30428,30430,30431,30433,30433,30435,30436,30439,30439,30446,30446,30450,30450,30452,30452,30456,30456,30460,30460,30462,30462,30465,30465,30468,30468,30472,30473,30475,30475,30494,30494,30496,30496,30505,30505,30519,30520,30522,30522,30524,30524,30528,30528,30541,30541,30555,30555,30561,30561,30563,30563,30566,30566,30571,30571,30585,30585,30590,30591,30603,30603,30609,30609,30622,30622,30629,30629,30636,30637,30640,30640,30643,30643,30651,30652,30655,30655,30679,30679,30683,30684,30690,30691,30693,30693,30697,30697,30701,30703,30707,30707,30722,30722,30738,30738,30757,30759,30764,30764,30770,30770,30772,30772,30789,30789,30799,30799,30813,30813,30827,30828,30831,30831,30844,30844,30849,30849,30855,30855,30860,30862,30865,30865,30871,30871,30883,30883,30887,30887,30889,30889,30906,30908,30913,30913,30917,30917,30922,30923,30926,30926,30928,30928,30952,30952,30956,30956,30959,30959,30965,30965,30971,30971,30977,30977,30990,30990,30998,30998,31018,31020,31034,31034,31038,31038,31040,31041,31047,31049,31056,31056,31062,31063,31066,31070,31072,31072,31077,31077,31080,31080,31085,31085,31098,31098,31103,31103,31105,31105,31117,31119,31121,31121,31142,31143,31146,31146,31150,31150,31153,31153,31155,31155,31161,31161,31165,31169,31177,31179,31185,31186,31189,31189,31192,31192,31199,31199,31204,31204,31206,31207,31209,31209,31227,31227,31232,31232,31237,31237,31240,31240,31243,31243,31245,31245,31252,31252,31255,31255,31257,31258,31260,31260,31263,31264,31278,31278,31281,31281,31286,31287,31291,31293,31295,31296,31302,31302,31305,31305,31309,31310,31319,31319,31329,31330,31337,31337,31339,31339,31344,31344,31348,31348,31350,31350,31353,31354,31357,31357,31359,31359,31361,31361,31364,31364,31368,31368,31378,31379,31381,31381,31384,31384,31391,31391,31401,31402,31406,31407,31418,31418,31428,31429,31431,31431,31434,31435,31447,31447,31449,31449,31453,31453,31455,31456,31459,31459,31461,31461,31466,31466,31469,31469,31471,31471,31478,31478,31481,31482,31487,31487,31503,31503,31505,31505,31513,31513,31515,31515,31518,31518,31520,31520,31526,31526,31532,31533,31545,31545,31558,31558,31561,31561,31563,31565,31567,31570,31572,31572,31574,31574,31584,31584,31596,31596,31598,31598,31605,31605,31613,31613,31623,31623,31627,31627,31631,31631,31636,31637,31639,31639,31642,31642,31645,31645,31649,31649,31661,31661,31665,31665,31668,31668,31672,31672,31680,31681,31684,31684,31686,31687,31689,31689,31698,31698,31712,31712,31716,31716,31721,31721,31751,31751,31762,31762,31774,31774,31777,31777,31783,31783,31786,31787,31805,31807,31811,31811,31820,31821,31840,31840,31844,31844,31852,31852,31859,31859,31875,31875,31881,31881,31890,31890,31893,31893,31895,31896,31903,31903,31909,31909,31911,31911,31918,31918,31921,31923,31929,31929,31934,31934,31946,31946,31958,31958,31966,31968,31975,31975,31995,31995,31998,31998,32000,32000,32002,32002,32004,32008,32010,32011,32013,32013,32016,32016,32020,32020,32023,32027,32032,32034,32043,32044,32046,32048,32051,32051,32053,32053,32057,32058,32066,32070,32080,32080,32094,32094,32097,32098,32102,32102,32104,32104,32106,32106,32110,32110,32113,32115,32118,32118,32121,32121,32127,32127,32142,32143,32147,32147,32156,32156,32160,32160,32162,32162,32172,32173,32177,32178,32180,32181,32184,32184,32186,32187,32189,32191,32199,32199,32202,32203,32214,32214,32216,32216,32218,32218,32221,32222,32224,32225,32227,32227,32232,32233,32236,32236,32239,32239,32244,32244,32251,32251,32265,32266,32277,32277,32283,32283,32285,32287,32289,32289,32291,32291,32299,32299,32302,32303,32305,32305,32311,32311,32317,32318,32321,32321,32323,32323,32326,32327,32338,32338,32340,32341,32350,32350,32353,32353,32361,32363,32365,32365,32368,32368,32377,32377,32380,32380,32386,32386,32396,32396,32399,32399,32403,32403,32406,32406,32408,32408,32411,32412,32566,32566,32568,32568,32570,32570,32588,32588,32592,32592,32596,32597,32618,32619,32622,32622,32624,32624,32626,32626,32629,32629,32631,32631,32633,32633,32645,32645,32648,32648,32650,32650,32652,32652,32654,32654,32660,32660,32666,32666,32670,32670,32676,32676,32680,32681,32690,32690,32696,32697,32701,32701,32705,32705,32709,32709,32714,32714,32716,32716,32718,32718,32722,32722,32724,32725,32735,32737,32745,32745,32747,32747,32752,32752,32761,32761,32764,32764,32768,32769,32771,32771,32773,32774,32777,32777,32780,32780,32784,32784,32789,32789,32791,32792,32813,32813,32819,32819,32822,32822,32829,32829,32831,32831,32835,32835,32838,32838,32842,32842,32854,32854,32856,32856,32858,32858,32862,32862,32879,32880,32882,32883,32887,32887,32893,32895,32900,32903,32905,32905,32907,32908,32918,32918,32923,32923,32925,32925,32929,32930,32933,32933,32937,32938,32943,32943,32945,32946,32948,32948,32954,32954,32963,32964,32972,32972,32974,32974,32986,32987,32990,32990,32993,32993,32996,32997,33009,33009,33012,33012,33016,33016,33021,33021,33026,33026,33029,33032,33034,33034,33048,33048,33050,33051,33059,33059,33065,33065,33067,33067,33071,33071,33081,33081,33086,33086,33099,33099,33102,33102,33104,33105,33108,33109,33125,33126,33131,33131,33136,33137,33144,33146,33151,33152,33160,33160,33162,33162,33167,33167,33178,33178,33180,33181,33184,33184,33187,33187,33192,33192,33203,33203,33205,33205,33210,33210,33213,33216,33218,33218,33222,33222,33229,33229,33240,33240,33247,33247,33251,33251,33253,33253,33255,33256,33258,33258,33261,33261,33267,33268,33274,33276,33278,33278,33285,33285,33287,33288,33290,33290,33292,33293,33298,33298,33307,33308,33310,33311,33313,33313,33322,33324,33333,33335,33337,33337,33344,33344,33349,33349,33351,33351,33369,33369,33380,33380,33382,33382,33390,33391,33393,33394,33398,33398,33400,33400,33406,33406,33419,33419,33421,33422,33426,33426,33433,33434,33437,33437,33439,33439,33445,33446,33449,33449,33452,33455,33457,33457,33459,33459,33463,33465,33467,33469,33471,33471,33489,33490,33492,33493,33495,33495,33499,33499,33502,33503,33505,33505,33509,33511,33521,33521,33533,33534,33537,33541,33545,33545,33559,33559,33576,33576,33579,33579,33583,33583,33585,33585,33588,33590,33592,33593,33600,33600,33607,33607,33609,33610,33615,33615,33617,33618,33651,33651,33655,33655,33659,33659,33673,33674,33678,33678,33686,33686,33688,33688,33694,33694,33698,33698,33705,33707,33725,33725,33729,33729,33733,33733,33737,33738,33740,33740,33747,33747,33750,33750,33756,33756,33769,33769,33771,33771,33775,33778,33780,33780,33785,33785,33789,33789,33795,33796,33802,33802,33804,33806,33833,33833,33836,33836,33841,33841,33848,33848,33853,33853,33865,33865,33879,33879,33883,33883,33889,33889,33891,33891,33894,33894,33899,33900,33903,33903,33909,33909,33914,33914,33936,33936,33940,33940,33945,33945,33948,33948,33953,33953,33970,33970,33976,33976,33979,33980,33983,33984,33986,33986,33988,33988,33990,33990,33993,33993,33995,33995,33997,33997,34001,34001,34010,34010,34028,34028,34030,34030,34036,34036,34044,34044,34065,34065,34067,34068,34071,34072,34074,34074,34078,34078,34081,34081,34083,34083,34085,34085,34092,34093,34095,34095,34109,34109,34111,34111,34113,34113,34115,34115,34121,34121,34126,34126,34131,34131,34137,34137,34147,34147,34152,34154,34157,34157,34180,34180,34183,34183,34191,34191,34193,34193,34196,34196,34203,34203,34214,34214,34216,34218,34223,34224,34234,34234,34241,34241,34249,34249,34253,34255,34261,34261,34268,34269,34276,34277,34281,34282,34295,34295,34298,34299,34303,34303,34306,34306,34310,34311,34314,34314,34326,34327,34330,34330,34349,34349,34367,34367,34382,34382,34384,34384,34388,34389,34395,34396,34398,34399,34407,34407,34425,34425,34442,34442,34444,34444,34451,34451,34467,34468,34473,34473,34503,34503,34507,34507,34516,34516,34521,34521,34523,34523,34527,34527,34532,34532,34541,34541,34558,34558,34560,34560,34562,34563,34568,34568,34584,34584,34586,34586,34588,34588,34638,34638,34645,34645,34647,34647,34655,34655,34662,34662,34664,34664,34676,34676,34678,34678,34680,34680,34690,34690,34701,34701,34719,34719,34722,34722,34739,34739,34746,34746,34756,34756,34784,34784,34796,34796,34799,34799,34802,34802,34809,34809,34811,34811,34814,34814,34821,34821,34847,34847,34850,34851,34865,34865,34870,34870,34875,34875,34880,34880,34886,34886,34892,34893,34898,34899,34903,34903,34905,34905,34907,34907,34909,34909,34913,34915,34920,34920,34923,34923,34928,34928,34930,34930,34935,34935,34942,34943,34945,34946,34952,34952,34955,34955,34957,34957,34962,34962,34966,34967,34974,34974,34987,34987,34996,34996,35009,35010,35023,35023,35028,35029,35033,35033,35036,35037,35039,35039,35041,35041,35048,35048,35059,35061,35064,35064,35069,35069,35079,35079,35088,35088,35090,35091,35096,35097,35109,35109,35114,35114,35126,35126,35128,35128,35131,35131,35137,35137,35140,35140,35167,35167,35172,35172,35178,35178,35186,35186,35199,35199,35201,35201,35203,35203,35206,35207,35211,35211,35215,35215,35219,35219,35222,35222,35233,35233,35241,35242,35250,35250,35258,35258,35261,35261,35264,35264,35282,35282,35299,35299,35316,35316,35320,35320,35328,35328,35330,35331,35336,35336,35338,35338,35340,35340,35342,35342,35347,35347,35350,35352,35355,35355,35357,35357,35359,35359,35363,35363,35365,35365,35370,35370,35373,35373,35377,35377,35380,35380,35382,35382,35386,35387,35408,35408,35412,35413,35419,35419,35422,35422,35424,35424,35426,35427,35430,35430,35433,35433,35437,35438,35440,35443,35445,35445,35449,35449,35461,35461,35463,35463,35468,35469,35475,35475,35477,35477,35480,35480,35486,35486,35488,35489,35491,35494,35496,35496,35498,35498,35504,35504,35506,35506,35513,35513,35516,35516,35518,35519,35522,35522,35524,35524,35527,35527,35531,35531,35533,35533,35535,35535,35538,35538,35542,35542,35547,35548,35553,35553,35558,35559,35562,35563,35565,35566,35569,35569,35574,35576,35578,35578,35582,35582,35584,35586,35588,35588,35598,35598,35600,35600,35604,35604,35606,35607,35609,35611,35613,35613,35616,35616,35624,35624,35627,35628,35635,35635,35641,35641,35649,35649,35657,35657,35662,35663,35672,35672,35674,35674,35676,35676,35686,35686,35692,35692,35695,35696,35700,35700,35703,35703,35709,35709,35712,35712,35722,35722,35728,35728,35730,35731,35734,35734,35738,35738,35895,35895,35903,35903,35905,35905,35910,35910,35912,35912,35914,35914,35916,35916,35925,35925,35930,35930,35937,35937,35946,35947,35961,35962,35970,35970,35978,35978,35980,35980,35997,35998,36000,36002,36007,36012,36015,36016,36019,36020,36022,36024,36027,36029,36031,36036,36039,36040,36042,36042,36049,36049,36051,36051,36058,36058,36060,36060,36062,36062,36064,36064,36066,36068,36070,36070,36074,36074,36077,36077,36084,36084,36091,36093,36100,36101,36103,36104,36106,36106,36109,36109,36115,36115,36118,36118,36196,36196,36198,36198,36203,36203,36208,36208,36211,36212,36215,36215,36229,36229,36234,36234,36249,36249,36259,36259,36264,36264,36275,36275,36282,36282,36286,36286,36294,36294,36299,36300,36303,36303,36315,36315,36317,36317,36321,36321,36323,36323,36328,36328,36335,36335,36339,36339,36362,36362,36367,36368,36382,36382,36394,36394,36400,36400,36405,36405,36418,36418,36420,36420,36423,36426,36441,36441,36447,36448,36468,36468,36470,36470,36481,36481,36487,36487,36490,36490,36493,36493,36522,36524,36544,36544,36554,36557,36562,36562,36575,36575,36587,36587,36600,36600,36603,36603,36606,36606,36611,36611,36613,36613,36617,36617,36626,36629,36635,36639,36646,36647,36649,36650,36655,36655,36659,36659,36664,36665,36667,36667,36670,36671,36676,36677,36681,36681,36685,36686,36701,36701,36703,36703,36706,36706,36763,36764,36771,36771,36774,36774,36776,36776,36781,36781,36783,36786,36802,36802,36805,36805,36814,36814,36817,36817,36820,36820,36838,36838,36842,36843,36845,36845,36848,36848,36850,36850,36855,36855,36857,36857,36861,36861,36864,36867,36869,36870,36872,36872,36875,36875,36877,36877,36879,36881,36884,36885,36887,36887,36889,36890,36893,36899,36910,36910,36913,36914,36917,36917,36920,36920,36924,36924,36926,36926,36929,36930,36935,36935,36938,36939,36941,36942,36944,36945,36947,36949,36953,36953,36956,36958,36960,36961,36963,36963,36969,36969,36973,36975,36978,36978,36981,36981,36983,36984,36986,36986,36988,36989,36991,36996,36999,37000,37002,37002,37007,37007,37009,37009,37013,37013,37017,37017,37026,37027,37030,37030,37032,37032,37034,37034,37039,37041,37045,37045,37048,37048,37057,37057,37066,37066,37086,37086,37089,37089,37096,37096,37101,37101,37109,37109,37117,37117,37122,37122,37138,37138,37141,37141,37145,37145,37159,37159,37165,37165,37170,37170,37193,37198,37202,37202,37218,37218,37225,37226,37228,37228,37237,37237,37239,37240,37255,37255,37257,37257,37259,37259,37261,37261,37266,37266,37276,37276,37291,37292,37294,37295,37297,37297,37300,37301,37312,37312,37319,37319,37321,37321,37323,37329,37335,37336,37340,37341,37347,37347,37351,37351,37354,37354,37365,37365,37389,37389,37392,37394,37399,37399,37406,37406,37428,37428,37434,37434,37439,37440,37445,37445,37449,37449,37463,37463,37467,37467,37470,37470,37474,37474,37476,37478,37504,37504,37507,37507,37509,37509,37521,37521,37523,37523,37526,37526,37528,37528,37532,37532,37555,37555,37558,37559,37561,37561,37580,37580,37583,37583,37586,37586,37604,37604,37610,37610,37624,37624,37628,37628,37636,37636,37648,37648,37656,37656,37658,37658,37662,37666,37668,37668,37670,37670,37672,37672,37675,37675,37678,37679,37704,37704,37706,37707,37709,37709,37716,37716,37723,37723,37742,37742,37749,37749,37756,37756,37758,37758,37772,37772,37780,37780,37782,37782,37786,37786,37795,37795,37799,37799,37804,37805,37808,37808,37827,37827,37841,37841,37854,37854,37857,37857,37860,37860,37878,37878,37892,37892,37912,37912,37925,37925,37931,37931,37941,37941,37944,37944,37956,37956,37969,37970,37979,37979,38013,38013,38015,38015,38263,38263,38272,38272,38275,38275,38281,38281,38283,38283,38287,38287,38289,38292,38296,38296,38307,38309,38312,38312,38317,38317,38321,38321,38331,38332,38343,38343,38346,38346,38356,38358,38364,38364,38369,38370,38428,38428,38433,38433,38442,38442,38446,38446,38450,38450,38459,38459,38463,38464,38466,38466,38468,38468,38475,38477,38480,38480,38491,38495,38498,38500,38506,38506,38512,38512,38515,38515,38517,38520,38525,38525,38533,38534,38538,38539,38541,38542,38548,38549,38552,38553,38555,38556,38563,38563,38567,38568,38570,38570,38577,38577,38583,38583,38587,38587,38592,38593,38596,38599,38601,38601,38603,38606,38613,38614,38617,38617,38619,38620,38626,38627,38632,38634,38639,38640,38642,38642,38646,38647,38649,38649,38651,38651,38656,38656,38662,38663,38673,38673,38675,38675,38678,38678,38681,38681,38684,38684,38686,38686,38695,38695,38704,38704,38706,38706,38713,38713,38717,38717,38722,38722,38724,38724,38728,38728,38737,38737,38742,38742,38748,38748,38750,38750,38753,38754,38761,38761,38765,38765,38772,38772,38775,38775,38778,38778,38795,38795,38797,38797,38799,38799,38816,38816,38824,38824,38827,38827,38829,38829,38854,38854,38859,38859,38867,38867,38876,38876,38899,38899,38902,38902,38907,38907,38911,38915,38917,38918,38920,38920,38922,38922,38924,38924,38928,38931,38935,38936,38957,38957,38960,38960,38968,38969,38971,38971,38982,38982,38988,38990,38996,38996,39000,39000,39002,39002,39006,39006,39013,39013,39015,39015,39019,39019,39023,39023,39080,39080,39087,39087,39089,39089,39108,39108,39111,39111,39131,39132,39135,39135,39137,39138,39149,39151,39156,39156,39164,39166,39171,39171,39177,39178,39180,39180,39184,39184,39187,39187,39192,39192,39198,39198,39200,39200,39208,39208,39237,39237,39241,39241,39243,39245,39249,39250,39252,39252,39255,39255,39318,39318,39321,39321,39325,39325,39333,39333,39336,39336,39340,39342,39345,39345,39347,39348,39353,39353,39361,39361,39376,39378,39381,39381,39385,39385,39389,39389,39391,39391,39405,39405,39409,39409,39423,39423,39425,39425,39432,39432,39438,39439,39449,39449,39467,39467,39472,39472,39478,39479,39488,39488,39491,39491,39493,39493,39501,39501,39509,39509,39511,39511,39514,39515,39519,39519,39522,39522,39525,39525,39529,39530,39592,39592,39608,39608,39635,39636,39640,39640,39653,39653,39662,39662,39706,39706,39719,39719,39722,39722,39729,39729,39740,39740,39745,39749,39759,39759,39764,39764,39770,39770,39791,39791,39822,39822,39825,39825,39839,39839,39851,39851,39854,39854,39881,39881,39894,39894,39908,39908,39912,39912,39949,39949,39952,39952,39954,39954,39957,39957,39973,39973,39986,39986,39995,39995,40007,40007,40009,40009,40023,40023,40165,40165,40167,40167,40169,40169,40179,40180,40182,40182,40201,40201,40219,40219,40230,40230,40232,40232,40251,40251,40273,40273,40285,40285,40288,40289,40300,40300,40306,40306,40361,40361,40367,40367,40372,40372,40388,40388,40407,40407,40434,40434,40440,40442,40474,40474,40478,40478,40565,40565,40569,40569,40573,40573,40575,40575,40594,40595,40599,40599,40605,40605,40607,40607,40613,40613,40628,40629,40635,40635,40638,40638,40643,40643,40653,40654,40657,40657,40660,40660,40664,40664,40667,40668,40670,40670,40680,40680,40692,40692,40711,40712,40718,40718,40723,40723,40736,40736,40763,40763,40778,40779,40782,40782,40786,40786,40799,40799,40801,40801,40807,40807,40810,40810,40812,40812,40823,40823,40845,40845,40848,40848,40853,40853,40860,40860,44032,55203,63744,64011,65281,65374,65504,65507,65509,65510]));
};
fonthx_opentype_os2_OS2CompiledCodepages.addMACROMAN = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(29,223,[32,126,160,163,165,165,167,172,174,177,180,184,186,187,191,207,209,214,216,220,223,239,241,252,255,255,305,305,338,339,376,376,402,402,710,711,728,733,937,937,960,960,8211,8212,8216,8218,8220,8222,8224,8226,8230,8230,8240,8240,8249,8250,8260,8260,8364,8364,8482,8482,8706,8706,8710,8710,8719,8719,8721,8721,8730,8730,8734,8734,8747,8747,8776,8776,8800,8800,8804,8805,9674,9674,63743,63743,64257,64258]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add869 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(48,215,[32,127,160,160,163,163,166,169,171,173,176,179,183,183,187,187,189,189,900,902,904,906,908,908,910,929,931,974,8213,8213,8216,8217,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9553,9556,9556,9559,9559,9562,9562,9565,9565,9568,9568,9571,9571,9574,9574,9577,9577,9580,9580,9600,9600,9604,9604,9608,9608,9617,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add866 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(49,224,[32,127,160,160,164,164,176,176,183,183,1025,1025,1028,1028,1031,1031,1038,1038,1040,1103,1105,1105,1108,1108,1111,1111,1118,1118,8470,8470,8729,8730,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add865 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(50,224,[32,127,160,161,163,164,170,172,176,178,181,181,183,183,186,186,188,189,191,191,196,199,201,201,209,209,214,214,216,216,220,220,223,226,228,239,241,244,246,252,255,255,402,402,915,915,920,920,931,931,934,934,937,937,945,945,948,949,960,960,963,964,966,966,8319,8319,8359,8359,8729,8730,8734,8734,8745,8745,8776,8776,8801,8801,8804,8805,8976,8976,8992,8993,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add864 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(51,218,[32,36,38,127,160,160,162,164,166,166,171,173,176,177,183,183,187,189,215,215,247,247,946,946,966,966,1548,1548,1563,1563,1567,1567,1600,1600,1617,1617,1632,1642,8729,8730,8734,8734,8776,8776,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9618,9618,9632,9632,65149,65149,65152,65157,65163,65163,65165,65167,65169,65169,65171,65171,65173,65173,65175,65175,65177,65177,65179,65179,65181,65181,65183,65183,65185,65185,65187,65187,65189,65189,65191,65191,65193,65193,65195,65195,65197,65197,65199,65199,65201,65201,65203,65203,65205,65205,65207,65207,65209,65209,65211,65211,65213,65213,65215,65215,65217,65217,65221,65221,65225,65233,65235,65235,65237,65237,65239,65239,65241,65241,65243,65243,65245,65245,65247,65247,65249,65249,65251,65251,65253,65253,65255,65255,65257,65257,65259,65261,65263,65267,65269,65272,65275,65276]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add863 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(52,224,[32,127,160,160,162,164,166,168,171,172,175,184,187,190,192,192,194,194,199,203,206,207,212,212,217,217,219,220,223,224,226,226,231,235,238,239,243,244,247,247,249,252,402,402,915,915,920,920,931,931,934,934,937,937,945,945,948,949,960,960,963,964,966,966,8215,8215,8319,8319,8729,8730,8734,8734,8745,8745,8776,8776,8801,8801,8804,8805,8976,8976,8992,8993,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add862 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(53,224,[32,127,160,163,165,165,170,172,176,178,181,181,183,183,186,189,191,191,209,209,223,223,225,225,237,237,241,241,243,243,247,247,250,250,402,402,915,915,920,920,931,931,934,934,937,937,945,945,948,949,960,960,963,964,966,966,1488,1514,8319,8319,8359,8359,8729,8730,8734,8734,8745,8745,8776,8776,8801,8801,8804,8805,8976,8976,8992,8993,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add861 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(54,224,[32,127,160,161,163,163,171,172,176,178,181,181,183,183,187,189,191,191,193,193,196,199,201,201,205,205,208,208,211,211,214,214,216,216,218,218,220,226,228,235,237,237,240,240,243,244,246,248,250,254,402,402,915,915,920,920,931,931,934,934,937,937,945,945,948,949,960,960,963,964,966,966,8319,8319,8359,8359,8729,8730,8734,8734,8745,8745,8776,8776,8801,8801,8804,8805,8976,8976,8992,8993,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add860 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(55,224,[32,127,160,163,170,172,176,178,181,181,183,183,186,189,191,195,199,202,204,205,209,213,217,218,220,220,223,227,231,234,236,237,241,245,247,247,249,250,252,252,915,915,920,920,931,931,934,934,937,937,945,945,948,949,960,960,963,964,966,966,8319,8319,8359,8359,8729,8730,8734,8734,8745,8745,8776,8776,8801,8801,8804,8805,8992,8993,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add857 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(56,221,[32,127,160,207,209,220,223,239,241,252,255,255,286,287,304,305,350,351,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9553,9556,9556,9559,9559,9562,9562,9565,9565,9568,9568,9571,9571,9574,9574,9577,9577,9580,9580,9600,9600,9604,9604,9608,9608,9617,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add852 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(58,224,[32,127,160,160,164,164,167,168,171,173,176,176,180,180,184,184,187,187,193,194,196,196,199,199,201,201,203,203,205,206,211,212,214,215,218,218,220,221,223,223,225,226,228,228,231,231,233,233,235,235,237,238,243,244,246,247,250,250,252,253,258,263,268,273,280,283,313,314,317,318,321,324,327,328,336,337,340,341,344,347,350,357,366,369,377,382,711,711,728,729,731,731,733,733,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9553,9556,9556,9559,9559,9562,9562,9565,9565,9568,9568,9571,9571,9574,9574,9577,9577,9580,9580,9600,9600,9604,9604,9608,9608,9617,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add775 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(59,224,[32,127,160,160,162,164,166,167,169,169,171,174,176,179,181,183,185,185,187,190,196,198,201,201,211,211,213,216,220,220,223,223,228,230,233,233,243,243,245,248,252,252,256,257,260,263,268,269,274,275,278,281,290,291,298,299,302,303,310,311,315,316,321,326,332,333,342,343,346,347,352,353,362,363,370,371,377,382,8217,8217,8220,8222,8729,8729,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9553,9556,9556,9559,9559,9562,9562,9565,9565,9568,9568,9571,9571,9574,9574,9577,9577,9580,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add850 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(62,224,[32,127,160,255,305,305,402,402,8215,8215,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9553,9556,9556,9559,9559,9562,9562,9565,9565,9568,9568,9571,9571,9574,9574,9577,9577,9580,9580,9600,9600,9604,9604,9608,9608,9617,9619,9632,9632]));
};
fonthx_opentype_os2_OS2CompiledCodepages.add437 = function() {
	fonthx_opentype_os2_OS2Codepages.codepages.push(new fonthx_opentype_os2_OS2Codepage(63,224,[32,127,160,163,165,165,170,172,176,178,181,181,183,183,186,189,191,191,196,199,201,201,209,209,214,214,220,220,223,226,228,239,241,244,246,247,249,252,255,255,402,402,915,915,920,920,931,931,934,934,937,937,945,945,948,949,960,960,963,964,966,966,8319,8319,8359,8359,8729,8730,8734,8734,8745,8745,8776,8776,8801,8801,8804,8805,8976,8976,8992,8993,9472,9472,9474,9474,9484,9484,9488,9488,9492,9492,9496,9496,9500,9500,9508,9508,9516,9516,9524,9524,9532,9532,9552,9580,9600,9600,9604,9604,9608,9608,9612,9612,9616,9619,9632,9632]));
};
var fonthx_opentype_os2_OS2Range = function(bit,name,from,to,version) {
	if(version == null) {
		version = 1;
	}
	this.bit = bit;
	this.name = name;
	this.from = from;
	this.to = to;
	this.version = version;
};
fonthx_opentype_os2_OS2Range.__name__ = ["fonthx","opentype","os2","OS2Range"];
fonthx_opentype_os2_OS2Range.prototype = {
	bit: null
	,name: null
	,from: null
	,to: null
	,version: null
	,__class__: fonthx_opentype_os2_OS2Range
};
var fonthx_opentype_os2_OS2Ranges = function() { };
fonthx_opentype_os2_OS2Ranges.__name__ = ["fonthx","opentype","os2","OS2Ranges"];
fonthx_opentype_os2_OS2Ranges.getFunctionalRanges = function(codepoints,threshold) {
	if(threshold == null) {
		threshold = 0.5;
	}
	var counts = new haxe_ds_IntMap();
	var hasSMP = false;
	var _g = 0;
	while(_g < codepoints.length) {
		var cp = codepoints[_g];
		++_g;
		var bit = fonthx_opentype_os2_OS2Ranges.getBitForCodepoint(cp);
		if(bit >= 0) {
			if(counts.h.hasOwnProperty(bit)) {
				counts.h[bit] = counts.h[bit] + 1;
			} else {
				counts.h[bit] = 1;
			}
		}
		if(cp > 65535) {
			hasSMP = true;
		}
	}
	var functionalBits = [];
	var bit1 = counts.keys();
	while(bit1.hasNext()) {
		var bit2 = bit1.next();
		var range = fonthx_opentype_os2_OS2Ranges.getRangeForBit(bit2);
		var coverage = counts.h[bit2] / (range.to - range.from);
		if(coverage > threshold) {
			functionalBits.push(bit2);
		}
	}
	if(hasSMP && functionalBits.indexOf(57) == -1) {
		functionalBits.push(57);
	}
	return functionalBits;
};
fonthx_opentype_os2_OS2Ranges.getBitForCodepoint = function(codepoint) {
	var _g = 0;
	var _g1 = fonthx_opentype_os2_OS2Ranges.ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		if(codepoint >= range.from && codepoint <= range.to) {
			return range.bit;
		}
	}
	return -1;
};
fonthx_opentype_os2_OS2Ranges.getRangeForBit = function(bit) {
	var _g = 0;
	var _g1 = fonthx_opentype_os2_OS2Ranges.ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		if(bit == range.bit) {
			return range;
		}
	}
	return null;
};
var fonthx_opentype_postscript_Encoder = function() { };
fonthx_opentype_postscript_Encoder.__name__ = ["fonthx","opentype","postscript","Encoder"];
fonthx_opentype_postscript_Encoder.encodeOperator = function(bytes,op) {
	if(op > 255) {
		bytes.b.push(op >> 8);
		op &= 255;
	}
	bytes.b.push(op);
};
fonthx_opentype_postscript_Encoder.encodeInt = function(bytes,v) {
	if(v >= -107 && v <= 107) {
		bytes.b.push(v + 139);
	} else if(v >= 108 && v <= 1131) {
		v -= 108;
		bytes.b.push((v >> 8) + 247);
		bytes.b.push(v & 255);
	} else if(v >= -1131 && v <= -108) {
		v = -108 - v;
		bytes.b.push((v >> 8) + 251);
		bytes.b.push(v & 255);
	} else if(v >= -32768 && v < 32768) {
		bytes.b.push(28);
		bytes.b.push(v >> 8);
		bytes.b.push(v & 255);
	} else if(v >= -32768 && v < 32768) {
		bytes.b.push(29);
		bytes.b.push(v >> 24 & 255);
		bytes.b.push(v >> 16 & 255);
		bytes.b.push(v >> 8 & 255);
		bytes.b.push(v & 255);
	}
};
fonthx_opentype_postscript_Encoder.encodeFloat = function(bytes,f) {
	if(f == 0) {
		bytes.b.push(30);
		bytes.b.push(15);
		return;
	}
	var s = f == null ? "null" : "" + f;
	fonthx_opentype_postscript_Encoder.encodeStringAsFloat(bytes,s);
};
fonthx_opentype_postscript_Encoder.encodeStringAsFloat = function(bytes,s) {
	var s1 = StringTools.replace(s.toLowerCase(),"+","");
	var chars = s1.split("");
	var nibbles = [];
	var _g = 0;
	while(_g < chars.length) {
		var c = chars[_g];
		++_g;
		var ord = HxOverrides.cca(c,0) - 48;
		if(ord >= 0 && ord < 10) {
			nibbles.push(ord);
		} else if(c == ".") {
			nibbles.push(10);
		} else if(c == "e") {
			nibbles.push(11);
		} else if(c == "–" || c == "−" || c == "-" || c == "-") {
			if(nibbles.length > 0 && nibbles[nibbles.length - 1] == 11) {
				nibbles.pop();
				nibbles.push(12);
			} else {
				nibbles.push(14);
			}
		}
	}
	nibbles.push(15);
	if(nibbles.length % 2 != 0) {
		nibbles.push(15);
	}
	bytes.b.push(30);
	var _g_step;
	var _g_index;
	var _g_end;
	_g_index = 0;
	_g_end = nibbles.length;
	_g_step = 2;
	while(_g_index < _g_end) {
		var i = (_g_index += _g_step) - _g_step;
		bytes.b.push(nibbles[i] << 4 | nibbles[i + 1]);
	}
};
fonthx_opentype_postscript_Encoder.round = function(number,precision) {
	if(precision == null) {
		precision = 2;
	}
	number *= Math.pow(10,precision);
	return Math.round(number) / Math.pow(10,precision);
};
var fonthx_opentype_svg_SVGTable = function(font) {
	this.font = font;
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.SVG);
};
fonthx_opentype_svg_SVGTable.__name__ = ["fonthx","opentype","svg","SVGTable"];
fonthx_opentype_svg_SVGTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_svg_SVGTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	font: null
	,write: function(tt) {
		tt.writeUINT16(0);
		tt.writeOffset32(10);
		tt.writeULONG(0);
		var skip = 1;
		var numSvgGlyphs = this.font.get_glyphs().length - 2;
		tt.writeUINT16(numSvgGlyphs);
		var offset = 2 + numSvgGlyphs * 12;
		var svgBytes = [];
		var _g1 = 2;
		var _g = this.font.get_glyphs().length;
		while(_g1 < _g) {
			var idx = _g1++;
			tt.writeUINT16(idx);
			tt.writeUINT16(idx);
			tt.writeOffset32(offset);
			var svgOptions = new fonthx_svg_SVGOptions();
			svgOptions.id = idx;
			svgOptions.boxSize = this.font.get_emSquare();
			var builder = new fonthx_svg_SVGBuilder();
			var svg = builder.buildGlyph(idx,this.font.get_glyphs()[idx],svgOptions);
			var bytes = haxe_io_Bytes.ofString(svg);
			offset += bytes.length;
			tt.writeULONG(bytes.length);
			svgBytes.push(bytes);
		}
		var _g2 = 0;
		while(_g2 < svgBytes.length) {
			var svg1 = svgBytes[_g2];
			++_g2;
			tt.writeBytes(svg1);
		}
	}
	,__class__: fonthx_opentype_svg_SVGTable
});
var fonthx_opentype_tables_CharacterMapSubtable = function(platformID,encodingID,languageID) {
	if(languageID == null) {
		languageID = 0;
	}
	fonthx_opentype_tables_Table.call(this);
	this.unmapped = 0;
	this.platformID = platformID;
	this.encodingID = encodingID;
	this.languageID = languageID;
	this.codepoints = [];
};
fonthx_opentype_tables_CharacterMapSubtable.__name__ = ["fonthx","opentype","tables","CharacterMapSubtable"];
fonthx_opentype_tables_CharacterMapSubtable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_CharacterMapSubtable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	platformID: null
	,encodingID: null
	,languageID: null
	,codepoints: null
	,unmapped: null
	,calculateLength: function() {
		return this.length;
	}
	,addMapping: function(idx,codepoint) {
	}
	,addCodepoint: function(codepoint) {
		this.codepoints.push(codepoint);
	}
	,incrementUnmapped: function() {
		this.unmapped++;
	}
	,getUnmapped: function() {
		return this.unmapped;
	}
	,__class__: fonthx_opentype_tables_CharacterMapSubtable
});
var fonthx_opentype_tables_CharacterMapFormat12Subtable = function(platformID,encodingID,languageID) {
	if(languageID == null) {
		languageID = 0;
	}
	fonthx_opentype_tables_CharacterMapSubtable.call(this,platformID,encodingID,languageID);
	this.groups = [];
};
fonthx_opentype_tables_CharacterMapFormat12Subtable.__name__ = ["fonthx","opentype","tables","CharacterMapFormat12Subtable"];
fonthx_opentype_tables_CharacterMapFormat12Subtable.__super__ = fonthx_opentype_tables_CharacterMapSubtable;
fonthx_opentype_tables_CharacterMapFormat12Subtable.prototype = $extend(fonthx_opentype_tables_CharacterMapSubtable.prototype,{
	groups: null
	,calculateLength: function() {
		if(this.length == 0) {
			this.prepareGroups();
			this.length = 16 + this.groups.length * 12;
		}
		return this.length;
	}
	,prepareGroups: function() {
		if(this.groups.length > 0) {
			return;
		}
		var prevCode = -100;
		var currCode = 0;
		var currGroup = null;
		var _g1 = 0;
		var _g = this.codepoints.length;
		while(_g1 < _g) {
			var i = _g1++;
			currCode = this.codepoints[i];
			var mappable = currCode > 0;
			var consecutive = currCode == prevCode + 1;
			if(!consecutive) {
				if(currGroup != null) {
					currGroup.end = prevCode;
					this.groups.push(currGroup);
				}
				if(mappable) {
					currGroup = new fonthx_opentype_tables_Group(currCode,0,i);
				}
			}
			if(mappable) {
				prevCode = currCode;
			}
		}
		if(currGroup != null && currCode > 0) {
			currGroup.end = currCode;
			this.groups.push(currGroup);
		}
	}
	,write: function(tt) {
		this.prepareGroups();
		tt.writeUSHORT(12);
		tt.writeUSHORT(0);
		tt.writeULONG(this.calculateLength());
		tt.writeULONG(0);
		tt.writeULONG(this.groups.length);
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			tt.writeULONG(g.start);
			tt.writeULONG(g.end);
			tt.writeULONG(g.startId);
		}
	}
	,__class__: fonthx_opentype_tables_CharacterMapFormat12Subtable
});
var fonthx_opentype_tables_Group = function(start,end,startId) {
	this.start = start;
	this.end = end;
	this.startId = startId;
};
fonthx_opentype_tables_Group.__name__ = ["fonthx","opentype","tables","Group"];
fonthx_opentype_tables_Group.prototype = {
	start: null
	,end: null
	,startId: null
	,__class__: fonthx_opentype_tables_Group
};
var fonthx_opentype_tables_CharacterMapFormat4Subtable = function(platformID,encodingID,languageID) {
	fonthx_opentype_tables_CharacterMapSubtable.call(this,platformID,encodingID,languageID);
	this.segments = [];
};
fonthx_opentype_tables_CharacterMapFormat4Subtable.__name__ = ["fonthx","opentype","tables","CharacterMapFormat4Subtable"];
fonthx_opentype_tables_CharacterMapFormat4Subtable.__super__ = fonthx_opentype_tables_CharacterMapSubtable;
fonthx_opentype_tables_CharacterMapFormat4Subtable.prototype = $extend(fonthx_opentype_tables_CharacterMapSubtable.prototype,{
	segments: null
	,calculateLength: function() {
		if(this.length == 0) {
			this.prepareSegments();
			var numGlyphs = this.codepoints.length;
			this.length = 16 + this.segments.length * 8 + numGlyphs * 2;
		}
		return this.length;
	}
	,prepareSegments: function() {
		if(this.segments.length > 0) {
			return;
		}
		var prevCode = -100;
		var currCode = 0;
		var currSeg = null;
		var _g1 = 0;
		var _g = this.codepoints.length;
		while(_g1 < _g) {
			var i = _g1++;
			currCode = this.codepoints[i];
			var mappable = currCode > 0;
			var consecutive = currCode == prevCode + 1;
			if(!consecutive) {
				if(currSeg != null) {
					currSeg.end = prevCode;
					this.segments.push(currSeg);
				}
				if(mappable) {
					currSeg = new fonthx_opentype_tables_Segment(currCode,0,i - currCode);
				}
			}
			if(mappable) {
				prevCode = currCode;
			} else {
				this.incrementUnmapped();
			}
		}
		if(currSeg != null && currCode > 0) {
			currSeg.end = currCode;
			this.segments.push(currSeg);
		}
		this.segments.push(new fonthx_opentype_tables_Segment(65535,65535));
		var charsSoFar = 0;
		var _g2 = 0;
		var _g11 = this.segments;
		while(_g2 < _g11.length) {
			var seg = _g11[_g2];
			++_g2;
			var delta = -65535;
			if(seg.start != 65535) {
				delta = this.getUnmapped() - (seg.start - charsSoFar);
			}
			seg.idDelta = delta;
			charsSoFar += seg.end - seg.start + 1;
		}
	}
	,write: function(tt) {
		this.prepareSegments();
		var segCount = this.segments.length;
		tt.writeUSHORT(4);
		tt.writeUSHORT(this.calculateLength());
		tt.writeUSHORT(0);
		tt.writeUSHORT(segCount * 2);
		var searchRange = 2 * Math.pow(2,Math.floor(Math.log(segCount) / Math.log(2))) | 0;
		tt.writeUSHORT(searchRange);
		tt.writeUSHORT(Math.log(searchRange / 2) / Math.log(2) | 0);
		tt.writeUSHORT(2 * segCount - searchRange);
		var _g = 0;
		var _g1 = this.segments;
		while(_g < _g1.length) {
			var seg = _g1[_g];
			++_g;
			tt.writeUSHORT(seg.end);
		}
		tt.writeUSHORT(0);
		var _g2 = 0;
		var _g11 = this.segments;
		while(_g2 < _g11.length) {
			var seg1 = _g11[_g2];
			++_g2;
			tt.writeUSHORT(seg1.start);
		}
		var _g3 = 0;
		var _g12 = this.segments;
		while(_g3 < _g12.length) {
			var seg2 = _g12[_g3];
			++_g3;
			tt.writeSHORT(seg2.idDelta);
		}
		var _g13 = 0;
		var _g4 = segCount;
		while(_g13 < _g4) {
			var code = _g13++;
			tt.writeUSHORT(0);
		}
		var numGlyphs = this.codepoints.length;
		var _g14 = 0;
		var _g5 = numGlyphs;
		while(_g14 < _g5) {
			var i = _g14++;
			tt.writeUSHORT(0);
		}
	}
	,addCodepoint: function(codepoint) {
		if(codepoint <= 65535) {
			this.codepoints.push(codepoint);
		}
	}
	,__class__: fonthx_opentype_tables_CharacterMapFormat4Subtable
});
var fonthx_opentype_tables_Segment = function(start,end,idDelta) {
	if(idDelta == null) {
		idDelta = 1;
	}
	this.start = start;
	this.end = end;
	this.idDelta = idDelta;
};
fonthx_opentype_tables_Segment.__name__ = ["fonthx","opentype","tables","Segment"];
fonthx_opentype_tables_Segment.prototype = {
	start: null
	,end: null
	,idDelta: null
	,__class__: fonthx_opentype_tables_Segment
};
var fonthx_opentype_tables_CharacterMapTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.CMAP);
	this.subtables = [];
};
fonthx_opentype_tables_CharacterMapTable.__name__ = ["fonthx","opentype","tables","CharacterMapTable"];
fonthx_opentype_tables_CharacterMapTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_CharacterMapTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	subtables: null
	,write: function(tt) {
		tt.writeUSHORT(0);
		var numTables = this.subtables.length;
		tt.writeUSHORT(numTables);
		var subtableOffset = 4 + numTables * 8;
		var _g = 0;
		var _g1 = this.subtables;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			tt.writeUSHORT(t.platformID).writeUSHORT(t.encodingID).writeULONG(subtableOffset);
			subtableOffset += t.calculateLength();
		}
		var _g2 = 0;
		var _g11 = this.subtables;
		while(_g2 < _g11.length) {
			var t1 = _g11[_g2];
			++_g2;
			t1.write(tt);
		}
	}
	,addSubtable: function(sub) {
		this.subtables.push(sub);
	}
	,getSubtables: function() {
		return this.subtables;
	}
	,__class__: fonthx_opentype_tables_CharacterMapTable
});
var fonthx_opentype_tables_DSIGTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.DSIG);
};
fonthx_opentype_tables_DSIGTable.__name__ = ["fonthx","opentype","tables","DSIGTable"];
fonthx_opentype_tables_DSIGTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_DSIGTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	write: function(tt) {
		tt.writeULONG(1);
		tt.writeUINT16(0);
		tt.writeUINT16(0);
	}
	,__class__: fonthx_opentype_tables_DSIGTable
});
var fonthx_opentype_tables_FontHeader = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.HEAD);
	this.format = "ttf";
	this.version = "1.0";
	this.unitsPerEm = 1024;
	this.flags = 0;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	this.created = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,0);
	this.modified = this2;
	this.macStyle = 0;
	this.lowestRecPPEM = 3;
	this.fontDirectionHint = 2;
	this.indexToLocFormat = 1;
};
fonthx_opentype_tables_FontHeader.__name__ = ["fonthx","opentype","tables","FontHeader"];
fonthx_opentype_tables_FontHeader.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_FontHeader.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	format: null
	,unitsPerEm: null
	,flags: null
	,created: null
	,modified: null
	,xMin: null
	,yMin: null
	,xMax: null
	,yMax: null
	,macStyle: null
	,lowestRecPPEM: null
	,fontDirectionHint: null
	,indexToLocFormat: null
	,version: null
	,write: function(tt) {
		tt.writeVersion(1,0).writeFixed(parseFloat(this.version)).writeULONG(0).writeULONG(1594834165).writeUSHORT(this.flags).writeUSHORT(this.unitsPerEm).writeLONGDATETIME(this.created).writeLONGDATETIME(this.modified).writeSHORT(this.xMin).writeSHORT(this.yMin).writeSHORT(this.xMax).writeSHORT(this.yMax).writeUSHORT(this.macStyle).writeUSHORT(this.lowestRecPPEM).writeSHORT(this.fontDirectionHint).writeSHORT(this.indexToLocFormat).writeSHORT(0);
	}
	,setCreated: function(secs) {
		this.created = secs;
		return this;
	}
	,setModified: function(secs) {
		this.modified = secs;
		return this;
	}
	,setVersion: function(version) {
		this.version = version;
		return this;
	}
	,setEmSquare: function(emSquare) {
		this.unitsPerEm = emSquare;
		return this;
	}
	,setBounds: function(bounds) {
		this.xMin = Math.ceil(bounds.get_left());
		this.yMin = Math.ceil(bounds.get_top());
		this.xMax = Math.floor(bounds.get_right());
		this.yMax = Math.floor(bounds.get_bottom());
		return this;
	}
	,setMacStyle: function(styleFlags) {
		this.macStyle = styleFlags;
		return this;
	}
	,setFontDirectionHint: function(hint) {
		this.fontDirectionHint = hint;
		return this;
	}
	,setLongOffsetFormat: function(value) {
		this.indexToLocFormat = value ? 1 : 0;
		return this;
	}
	,setSmallestReadablePixelSize: function(size) {
		this.lowestRecPPEM = size;
		return this;
	}
	,setFormat: function(f) {
		this.format = f;
		return this;
	}
	,__class__: fonthx_opentype_tables_FontHeader
});
var fonthx_opentype_tables_GlyphTable = function(font) {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.GLYF);
	this.font = font;
};
fonthx_opentype_tables_GlyphTable.__name__ = ["fonthx","opentype","tables","GlyphTable"];
fonthx_opentype_tables_GlyphTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_GlyphTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	offsets: null
	,font: null
	,write: function(tt) {
		this.offsets = [];
		var coffset = 0;
		var _g = 0;
		var _g1 = this.font.get_glyphs();
		while(_g < _g1.length) {
			var glyph = _g1[_g];
			++_g;
			var gDesc = new fonthx_opentype_glyph_SimpleGlyphDescription();
			var consumer = new fonthx_opentype_glyph_GlyphDescriptionContourConsumer(gDesc);
			glyph.walkContours(consumer);
			gDesc.write(tt);
			this.offsets.push(coffset);
			coffset = tt.getPosition() - this.offset;
		}
		this.offsets.push(coffset);
	}
	,getOffsets: function() {
		return this.offsets;
	}
	,__class__: fonthx_opentype_tables_GlyphTable
});
var fonthx_opentype_tables_HorizontalHeaderTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.HHEA);
	this.ascender = 0;
	this.descender = 0;
	this.lineGap = 0;
	this.caretSlopeRise = 1;
	this.caretSlopeRun = 0;
	this.caretOffset = 0;
	this.advanceWidthMax = 0;
	this.minLeftSideBearing = 0;
	this.minRightSideBearing = 0;
	this.xMaxExtent = 0;
	this.numberOfHMetrics = 0;
};
fonthx_opentype_tables_HorizontalHeaderTable.__name__ = ["fonthx","opentype","tables","HorizontalHeaderTable"];
fonthx_opentype_tables_HorizontalHeaderTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_HorizontalHeaderTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	ascender: null
	,descender: null
	,lineGap: null
	,advanceWidthMax: null
	,minLeftSideBearing: null
	,minRightSideBearing: null
	,xMaxExtent: null
	,caretSlopeRise: null
	,caretSlopeRun: null
	,caretOffset: null
	,numberOfHMetrics: null
	,write: function(tt) {
		tt.writeULONG(65536).writeSHORT(this.ascender).writeSHORT(this.descender).writeSHORT(this.lineGap).writeUSHORT(this.advanceWidthMax).writeSHORT(this.minLeftSideBearing).writeSHORT(this.minRightSideBearing).writeSHORT(this.xMaxExtent).writeSHORT(this.caretSlopeRise).writeSHORT(this.caretSlopeRun).writeSHORT(this.caretOffset);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			tt.writeSHORT(0);
		}
		tt.writeUSHORT(this.numberOfHMetrics);
	}
	,setAdvanceWidthMax: function(advanceWidthMax) {
		this.advanceWidthMax = advanceWidthMax;
		return this;
	}
	,setAscender: function(ascender) {
		this.ascender = ascender;
		return this;
	}
	,setCaretOffset: function(caretOffset) {
		this.caretOffset = caretOffset;
		return this;
	}
	,setCaretSlopeRise: function(caretSlopeRise) {
		this.caretSlopeRise = caretSlopeRise;
		return this;
	}
	,setCaretSlopeRun: function(caretSlopeRun) {
		this.caretSlopeRun = caretSlopeRun;
		return this;
	}
	,setDescender: function(descender) {
		this.descender = descender;
		return this;
	}
	,setLineGap: function(lineGap) {
		this.lineGap = lineGap;
		return this;
	}
	,setMinLeftSideBearing: function(minLeftSideBearing) {
		this.minLeftSideBearing = minLeftSideBearing;
		return this;
	}
	,setMinRightSideBearing: function(minRightSideBearing) {
		this.minRightSideBearing = minRightSideBearing;
		return this;
	}
	,setNumberOfHMetrics: function(numberOfHMetrics) {
		this.numberOfHMetrics = numberOfHMetrics;
		return this;
	}
	,setXMaxExtent: function(maxExtent) {
		this.xMaxExtent = maxExtent;
		return this;
	}
	,__class__: fonthx_opentype_tables_HorizontalHeaderTable
});
var fonthx_opentype_tables_HorizontalMetricsTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.HMTX);
	this.metrics = [];
};
fonthx_opentype_tables_HorizontalMetricsTable.__name__ = ["fonthx","opentype","tables","HorizontalMetricsTable"];
fonthx_opentype_tables_HorizontalMetricsTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_HorizontalMetricsTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	metrics: null
	,addMetric: function(advanceWidth,lsb) {
		this.metrics.push(new fonthx_opentype_tables_HorizontalMetric(advanceWidth,lsb));
	}
	,write: function(tt) {
		var _g = 0;
		var _g1 = this.metrics;
		while(_g < _g1.length) {
			var hm = _g1[_g];
			++_g;
			tt.writeUSHORT(hm.advanceWidth).writeSHORT(hm.lsb);
		}
	}
	,__class__: fonthx_opentype_tables_HorizontalMetricsTable
});
var fonthx_opentype_tables_HorizontalMetric = function(advanceWidth,lsb) {
	this.advanceWidth = advanceWidth;
	this.lsb = lsb;
};
fonthx_opentype_tables_HorizontalMetric.__name__ = ["fonthx","opentype","tables","HorizontalMetric"];
fonthx_opentype_tables_HorizontalMetric.prototype = {
	advanceWidth: null
	,lsb: null
	,__class__: fonthx_opentype_tables_HorizontalMetric
};
var fonthx_opentype_tables_KerningTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.KERN);
};
fonthx_opentype_tables_KerningTable.__name__ = ["fonthx","opentype","tables","KerningTable"];
fonthx_opentype_tables_KerningTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_KerningTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	pairs: null
	,write: function(tt) {
		tt.writeUSHORT(0);
		tt.writeUSHORT(1);
		var numPairs = this.pairs.length;
		tt.writeUSHORT(0);
		tt.writeUSHORT(numPairs * 6 + 14);
		tt.writeUSHORT(1);
		var maxPow2 = 1;
		var exp = 0;
		while(maxPow2 <= numPairs) {
			maxPow2 <<= 1;
			++exp;
		}
		maxPow2 >>= 1;
		--exp;
		tt.writeUSHORT(numPairs);
		tt.writeUSHORT(maxPow2 * 6);
		tt.writeUSHORT(exp);
		tt.writeUSHORT((numPairs - maxPow2) * 6);
		this.pairs.sort(function(kp1,kp2) {
			var id1 = kp1.idx1 << 8 | kp1.idx2;
			var id2 = kp2.idx1 << 8 | kp2.idx2;
			if(id2 == id1) {
				return 0;
			} else if(id2 > id1) {
				return -1;
			}
			return 1;
		});
		var _g = 0;
		var _g1 = this.pairs;
		while(_g < _g1.length) {
			var kp = _g1[_g];
			++_g;
			tt.writeUSHORT(kp.idx1);
			tt.writeUSHORT(kp.idx2);
			tt.writeSHORT(kp.x | 0);
		}
	}
	,setKerningPairs: function(pairs) {
		this.pairs = pairs;
	}
	,__class__: fonthx_opentype_tables_KerningTable
});
var fonthx_opentype_tables_LocationTable = function(glyphTable) {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.LOCA);
	this.glyphTable = glyphTable;
};
fonthx_opentype_tables_LocationTable.__name__ = ["fonthx","opentype","tables","LocationTable"];
fonthx_opentype_tables_LocationTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_LocationTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	glyphTable: null
	,write: function(tt) {
		var offsets = this.glyphTable.getOffsets();
		var _g = 0;
		while(_g < offsets.length) {
			var o = offsets[_g];
			++_g;
			tt.writeULONG(o);
		}
	}
	,__class__: fonthx_opentype_tables_LocationTable
});
var fonthx_opentype_tables_MaximumProfileTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.MAXP);
	this.version = fonthx_opentype_tables_MaximumProfileTable.TRUETYPE_OUTLINES;
	this.numGlyphs = 0;
	this.maxPoints = 0;
	this.maxContours = 0;
	this.maxCompositePoints = 0;
	this.maxCompositeContours = 0;
	this.maxZones = 2;
	this.maxTwilightPoints = 0;
	this.maxStorage = 0;
	this.maxFunctionDefs = 0;
	this.maxInstructionDefs = 0;
	this.maxStackElements = 0;
	this.maxSizeOfInstructions = 0;
	this.maxComponentElements = 0;
	this.maxComponentDepth = 0;
};
fonthx_opentype_tables_MaximumProfileTable.__name__ = ["fonthx","opentype","tables","MaximumProfileTable"];
fonthx_opentype_tables_MaximumProfileTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_MaximumProfileTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	version: null
	,numGlyphs: null
	,maxPoints: null
	,maxContours: null
	,maxCompositePoints: null
	,maxCompositeContours: null
	,maxZones: null
	,maxTwilightPoints: null
	,maxStorage: null
	,maxFunctionDefs: null
	,maxInstructionDefs: null
	,maxStackElements: null
	,maxSizeOfInstructions: null
	,maxComponentElements: null
	,maxComponentDepth: null
	,write: function(tt) {
		tt.writeULONG(this.version);
		tt.writeUSHORT(this.numGlyphs);
		if(this.version == fonthx_opentype_tables_MaximumProfileTable.TRUETYPE_OUTLINES) {
			tt.writeUSHORT(this.maxPoints);
			tt.writeUSHORT(this.maxContours);
			tt.writeUSHORT(this.maxCompositePoints);
			tt.writeUSHORT(this.maxCompositeContours);
			tt.writeUSHORT(this.maxZones);
			tt.writeUSHORT(this.maxTwilightPoints);
			tt.writeUSHORT(this.maxStorage);
			tt.writeUSHORT(this.maxFunctionDefs);
			tt.writeUSHORT(this.maxInstructionDefs);
			tt.writeUSHORT(this.maxStackElements);
			tt.writeUSHORT(this.maxSizeOfInstructions);
			tt.writeUSHORT(this.maxComponentElements);
			tt.writeUSHORT(this.maxComponentDepth);
		}
	}
	,setMaxComponentDepth: function(maxComponentDepth) {
		this.maxComponentDepth = maxComponentDepth;
		return this;
	}
	,setMaxComponentElements: function(maxComponentElements) {
		this.maxComponentElements = maxComponentElements;
		return this;
	}
	,setMaxCompositeContours: function(maxCompositeContours) {
		this.maxCompositeContours = maxCompositeContours;
		return this;
	}
	,setMaxCompositePoints: function(maxCompositePoints) {
		this.maxCompositePoints = maxCompositePoints;
		return this;
	}
	,setMaxContours: function(maxContours) {
		this.maxContours = maxContours;
		return this;
	}
	,setMaxFunctionDefs: function(maxFunctionDefs) {
		this.maxFunctionDefs = maxFunctionDefs;
		return this;
	}
	,setMaxInstructionDefs: function(maxInstructionDefs) {
		this.maxInstructionDefs = maxInstructionDefs;
	}
	,setMaxPoints: function(maxPoints) {
		this.maxPoints = maxPoints;
		return this;
	}
	,setMaxSizeOfInstructions: function(maxSizeOfInstructions) {
		this.maxSizeOfInstructions = maxSizeOfInstructions;
		return this;
	}
	,setMaxStackElements: function(maxStackElements) {
		this.maxStackElements = maxStackElements;
		return this;
	}
	,setMaxStorage: function(maxStorage) {
		this.maxStorage = maxStorage;
		return this;
	}
	,setMaxTwilightPoints: function(maxTwilightPoints) {
		this.maxTwilightPoints = maxTwilightPoints;
		return this;
	}
	,setMaxZones: function(maxZones) {
		this.maxZones = maxZones;
		return this;
	}
	,setNumGlyphs: function(numGlyphs) {
		this.numGlyphs = numGlyphs;
		return this;
	}
	,setVersion: function(version) {
		this.version = version;
		return this;
	}
	,__class__: fonthx_opentype_tables_MaximumProfileTable
});
var fonthx_opentype_tables_NamingRecord = function(platformID,encodingID,languageID,nameID,string) {
	this.platformID = platformID;
	this.encodingID = encodingID;
	this.languageID = languageID;
	this.nameID = nameID;
	this.string = string == null ? "" : string;
	this.offset = 0;
};
fonthx_opentype_tables_NamingRecord.__name__ = ["fonthx","opentype","tables","NamingRecord"];
fonthx_opentype_tables_NamingRecord.prototype = {
	platformID: null
	,encodingID: null
	,languageID: null
	,nameID: null
	,offset: null
	,string: null
	,isUnicode: function() {
		return this.platformID != fonthx_opentype_constants_Platform.MACINTOSH;
	}
	,write: function(tt,offset) {
		this.offset = offset;
		tt.writeUSHORT(this.platformID).writeUSHORT(this.encodingID).writeUSHORT(this.languageID).writeUSHORT(this.nameID).writeUSHORT(this.getByteLength()).writeUSHORT(offset);
	}
	,getString: function() {
		return this.string;
	}
	,getBytes: function() {
		if(this.encodingID == fonthx_opentype_constants_MacintoshEncoding.ROMAN) {
			return fonthx_utils_StringEncoder.encode(this.string,"MACROMAN");
		} else {
			var bytes = new haxe_io_BytesBuffer();
			var _g1 = 0;
			var _g = this.string.length;
			while(_g1 < _g) {
				var i = _g1++;
				var c = HxOverrides.cca(this.string,i);
				bytes.b.push(c >>> 8 & 255);
				bytes.b.push(c & 255);
			}
			return bytes.getBytes();
		}
	}
	,getByteLength: function() {
		return this.getBytes().length;
	}
	,toString: function() {
		return this.platformID + "," + this.encodingID + "," + this.languageID + "," + this.nameID + ": " + this.string;
	}
	,__class__: fonthx_opentype_tables_NamingRecord
};
var fonthx_opentype_tables_NamingTable = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.NAME);
	this.format = 0;
	this.records = [];
};
fonthx_opentype_tables_NamingTable.__name__ = ["fonthx","opentype","tables","NamingTable"];
fonthx_opentype_tables_NamingTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_NamingTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	records: null
	,format: null
	,addRecord: function(nameId,string,platformId,encodingId,languageId) {
		if(string != null && string.length > 0) {
			this.records.push(new fonthx_opentype_tables_NamingRecord(platformId,encodingId,languageId,nameId,string));
		}
	}
	,toString: function() {
		var s = "";
		var _g = 0;
		var _g1 = this.records;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			s = s + r.toString() + "\n";
		}
		return s;
	}
	,write: function(tt) {
		tt.writeUSHORT(this.format).writeUSHORT(this.records.length).writeUSHORT(this.records.length * 12 + 6);
		var offset = 0;
		var _g = 0;
		var _g1 = this.records;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			var l = r.getByteLength();
			r.write(tt,offset);
			offset += l;
		}
		var _g2 = 0;
		var _g11 = this.records;
		while(_g2 < _g11.length) {
			var r1 = _g11[_g2];
			++_g2;
			tt.writeBytes(r1.getBytes());
		}
	}
	,__class__: fonthx_opentype_tables_NamingTable
});
var fonthx_opentype_tables_OS2Table = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.OS2);
	this.version = 3;
	this.xAvgCharWidth = 0;
	this.usWeightClass = fonthx_opentype_constants_OS2Weight.NORMAL;
	this.usWidthClass = fonthx_opentype_constants_OS2Width.NORMAL;
	this.fsType = fonthx_opentype_constants_OS2Embeddable.INSTALLABLE;
	this.ySubscriptXSize = 100;
	this.ySubscriptYSize = 100;
	this.ySubscriptXOffset = 0;
	this.ySubscriptYOffset = 100;
	this.ySuperscriptXSize = 100;
	this.ySuperscriptYSize = 100;
	this.ySuperscriptXOffset = 0;
	this.ySuperscriptYOffset = 100;
	this.yStrikeoutSize = 50;
	this.yStrikeoutPosition = 225;
	this.sFamilyClass = 0;
	this.panose = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		this.panose.push(0);
	}
	this.panose[2] = 4;
	this.ulUnicodeRange1 = 0;
	this.ulUnicodeRange2 = 0;
	this.ulUnicodeRange3 = 0;
	this.ulUnicodeRange4 = 0;
	this.achVendID = "FSTR";
	this.fsSelection = 64;
	this.usFirstCharIndex = 32;
	this.usLastCharIndex = 255;
	this.sTypoAscender = 0;
	this.sTypoDescender = 0;
	this.sTypoLineGap = 0;
	this.usWinAscent = 0;
	this.usWinDescent = 0;
	this.ulCodePageRange1 = 1;
	this.ulCodePageRange2 = 0;
	this.sxHeight = 0;
	this.sCapHeight = 0;
	this.usDefaultChar = 0;
	this.usBreakChar = 32;
	this.usMaxContext = 0;
};
fonthx_opentype_tables_OS2Table.__name__ = ["fonthx","opentype","tables","OS2Table"];
fonthx_opentype_tables_OS2Table.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_OS2Table.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	version: null
	,xAvgCharWidth: null
	,usWeightClass: null
	,usWidthClass: null
	,fsType: null
	,ySubscriptXSize: null
	,ySubscriptYSize: null
	,ySubscriptXOffset: null
	,ySubscriptYOffset: null
	,ySuperscriptXSize: null
	,ySuperscriptYSize: null
	,ySuperscriptXOffset: null
	,ySuperscriptYOffset: null
	,yStrikeoutSize: null
	,yStrikeoutPosition: null
	,sFamilyClass: null
	,panose: null
	,ulUnicodeRange1: null
	,ulUnicodeRange2: null
	,ulUnicodeRange3: null
	,ulUnicodeRange4: null
	,achVendID: null
	,fsSelection: null
	,usFirstCharIndex: null
	,usLastCharIndex: null
	,sTypoAscender: null
	,sTypoDescender: null
	,sTypoLineGap: null
	,usWinAscent: null
	,usWinDescent: null
	,ulCodePageRange1: null
	,ulCodePageRange2: null
	,sxHeight: null
	,sCapHeight: null
	,usDefaultChar: null
	,usBreakChar: null
	,usMaxContext: null
	,write: function(tt) {
		tt.writeUSHORT(this.version).writeSHORT(this.xAvgCharWidth).writeUSHORT(this.usWeightClass).writeUSHORT(this.usWidthClass).writeUSHORT(this.fsType).writeSHORT(this.ySubscriptXSize).writeSHORT(this.ySubscriptYSize).writeSHORT(this.ySubscriptXOffset).writeSHORT(this.ySubscriptYOffset).writeSHORT(this.ySuperscriptXSize).writeSHORT(this.ySuperscriptYSize).writeSHORT(this.ySuperscriptXOffset).writeSHORT(this.ySuperscriptYOffset).writeSHORT(this.yStrikeoutSize).writeSHORT(this.yStrikeoutPosition).writeSHORT(this.sFamilyClass);
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			tt.writeByte(this.panose[i]);
		}
		tt.writeULONG(this.ulUnicodeRange1).writeULONG(this.ulUnicodeRange2).writeULONG(this.ulUnicodeRange3).writeULONG(this.ulUnicodeRange4).writeTag(this.achVendID).writeUSHORT(this.fsSelection).writeUSHORT(this.usFirstCharIndex).writeUSHORT(this.usLastCharIndex).writeSHORT(this.sTypoAscender).writeSHORT(this.sTypoDescender).writeSHORT(this.sTypoLineGap).writeUSHORT(this.usWinAscent).writeUSHORT(this.usWinDescent).writeULONG(this.ulCodePageRange1).writeULONG(this.ulCodePageRange2).writeSHORT(this.sxHeight).writeSHORT(this.sCapHeight).writeUSHORT(this.usDefaultChar).writeUSHORT(this.usBreakChar).writeUSHORT(this.usMaxContext);
	}
	,setVendorID: function(vendorID) {
		this.achVendID = vendorID;
		return this;
	}
	,setFontSelectionFlags: function(flags) {
		this.fsSelection = flags;
		return this;
	}
	,setEmbedding: function(embeddingType) {
		this.fsType = embeddingType;
		return this;
	}
	,setPanoseBit: function(value,index) {
		if(index < 10) {
			this.panose[index] = value;
		}
		return this;
	}
	,setCapHeight: function(capHeight) {
		this.sCapHeight = capHeight;
		return this;
	}
	,setFamilyClass: function(familyClass) {
		this.sFamilyClass = familyClass;
		return this;
	}
	,setTypoAscender: function(typoAscender) {
		this.sTypoAscender = typoAscender;
		return this;
	}
	,setTypoDescender: function(typoDescender) {
		this.sTypoDescender = typoDescender;
		return this;
	}
	,setTypoLineGap: function(typoLineGap) {
		this.sTypoLineGap = typoLineGap;
		return this;
	}
	,setSxHeight: function(sxHeight) {
		this.sxHeight = sxHeight;
		return this;
	}
	,addCodePage: function(codepageIndex) {
		if(codepageIndex < 32) {
			this.ulCodePageRange1 |= 1 << codepageIndex;
		} else {
			this.ulCodePageRange2 |= 1 << codepageIndex - 32;
		}
		return this;
	}
	,addUnicodeRange: function(rangeIndex) {
		if(rangeIndex < 0) {
			return;
		}
		if(rangeIndex < 32) {
			this.ulUnicodeRange1 |= 1 << rangeIndex;
		} else if(rangeIndex < 64) {
			this.ulUnicodeRange2 |= 1 << rangeIndex - 32;
		} else if(rangeIndex < 96) {
			this.ulUnicodeRange3 |= 1 << rangeIndex - 64;
		} else {
			this.ulUnicodeRange4 |= 1 << rangeIndex - 96;
		}
	}
	,setBreakChar: function(codepoint) {
		this.usBreakChar = codepoint;
		return this;
	}
	,setDefaultChar: function(defaultChar) {
		this.usDefaultChar = defaultChar;
		return this;
	}
	,setFirstCharIndex: function(firstCharIndex) {
		this.usFirstCharIndex = firstCharIndex;
		return this;
	}
	,setLastCharIndex: function(lastCharIndex) {
		this.usLastCharIndex = lastCharIndex;
		return this;
	}
	,setMaxContext: function(maxContext) {
		this.usMaxContext = maxContext;
		return this;
	}
	,setWeightClass: function(weightClass) {
		this.usWeightClass = weightClass;
		return this;
	}
	,setWidthClass: function(widthClass) {
		this.usWidthClass = widthClass;
		return this;
	}
	,setWinAscent: function(winAscent) {
		this.usWinAscent = winAscent;
		return this;
	}
	,setWinDescent: function(winDescent) {
		this.usWinDescent = winDescent;
		return this;
	}
	,setVersion: function(version) {
		this.version = version;
		return this;
	}
	,setAvgCharWidth: function(avgCharWidth) {
		this.xAvgCharWidth = avgCharWidth;
		return this;
	}
	,setStrikeoutPosition: function(strikeoutPosition) {
		this.yStrikeoutPosition = strikeoutPosition;
		return this;
	}
	,setStrikeoutSize: function(strikeoutSize) {
		this.yStrikeoutSize = strikeoutSize;
		return this;
	}
	,setYSubscriptXOffset: function(subscriptXOffset) {
		this.ySubscriptXOffset = subscriptXOffset;
		return this;
	}
	,setYSubscriptXSize: function(subscriptXSize) {
		this.ySubscriptXSize = subscriptXSize;
		return this;
	}
	,setYSubscriptYOffset: function(subscriptYOffset) {
		this.ySubscriptYOffset = subscriptYOffset;
		return this;
	}
	,setYSubscriptYSize: function(subscriptYSize) {
		this.ySubscriptYSize = subscriptYSize;
		return this;
	}
	,setYSuperscriptXOffset: function(superscriptXOffset) {
		this.ySuperscriptXOffset = superscriptXOffset;
		return this;
	}
	,setYSuperscriptXSize: function(superscriptXSize) {
		this.ySuperscriptXSize = superscriptXSize;
		return this;
	}
	,setYSuperscriptYOffset: function(superscriptYOffset) {
		this.ySuperscriptYOffset = superscriptYOffset;
		return this;
	}
	,setYSuperscriptYSize: function(superscriptYSize) {
		this.ySuperscriptYSize = superscriptYSize;
		return this;
	}
	,__class__: fonthx_opentype_tables_OS2Table
});
var fonthx_opentype_tables_PostTable = function(font,version) {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.POST);
	this.font = font;
	this.version = version;
	this.names = [];
	this.standardNames = [];
};
fonthx_opentype_tables_PostTable.__name__ = ["fonthx","opentype","tables","PostTable"];
fonthx_opentype_tables_PostTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_PostTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	version: null
	,font: null
	,names: null
	,standardNames: null
	,write: function(tt) {
		tt.writeULONG(this.version).writeFixed(this.font.getItalicAngle()).writeUSHORT(this.font.getUnderlinePosition()).writeUSHORT(this.font.getUnderlineThickness()).writeULONG(this.font.isFixedPitch() ? 1 : 0).writeULONG(0).writeULONG(0).writeULONG(0).writeULONG(0);
		if(this.version == fonthx_opentype_tables_PostTable.VERSION_2_0) {
			tt.writeUSHORT(this.names.length + this.standardNames.length);
			var _g = 0;
			var _g1 = this.standardNames;
			while(_g < _g1.length) {
				var standardIndex = _g1[_g];
				++_g;
				tt.writeUSHORT(standardIndex);
			}
			var count = 258;
			var _g2 = 0;
			var _g11 = this.names;
			while(_g2 < _g11.length) {
				var name = _g11[_g2];
				++_g2;
				tt.writeUSHORT(count++);
			}
			var _g3 = 0;
			var _g12 = this.names;
			while(_g3 < _g12.length) {
				var name1 = _g12[_g3];
				++_g3;
				tt.writePascalString(name1);
			}
		}
	}
	,appendMacStandardGlyph: function(index) {
		this.standardNames.push(index);
	}
	,appendNamedGlyph: function(name) {
		this.names.push(name);
	}
	,__class__: fonthx_opentype_tables_PostTable
});
var fonthx_opentype_tables_SnftTable = function(numTables,format) {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.SFNT);
	this.numTables = numTables;
	this.format = format;
};
fonthx_opentype_tables_SnftTable.__name__ = ["fonthx","opentype","tables","SnftTable"];
fonthx_opentype_tables_SnftTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_SnftTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	numTables: null
	,format: null
	,write: function(tt) {
		var maxPow2 = Math.pow(2,Math.floor(Math.log(this.numTables) / Math.log(2))) | 0;
		var searchRange = maxPow2 * 16;
		var entrySelector = Math.log(maxPow2) / Math.log(2) | 0;
		var rangeShift = this.numTables * 16 - searchRange;
		if(this.format == "otf") {
			tt.writeTag("OTTO");
		} else {
			tt.writeULONG(65536);
		}
		tt.writeUSHORT(this.numTables);
		tt.writeUSHORT(searchRange);
		tt.writeUSHORT(entrySelector);
		tt.writeUSHORT(rangeShift);
	}
	,__class__: fonthx_opentype_tables_SnftTable
});
var fonthx_opentype_tables_TableDirectory = function() {
	fonthx_opentype_tables_Table.call(this,fonthx_opentype_tables_Table.TDIR);
	this.entries = [];
};
fonthx_opentype_tables_TableDirectory.__name__ = ["fonthx","opentype","tables","TableDirectory"];
fonthx_opentype_tables_TableDirectory.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_TableDirectory.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	entries: null
	,addEntry: function(entry) {
		this.entries.push(entry);
	}
	,write: function(tt) {
		this.entries.sort(function(a,b) {
			if(b.table.tag > a.table.tag) {
				return -1;
			}
			if(b.table.tag < a.table.tag) {
				return 1;
			}
			return 0;
		});
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			entry.write(tt);
		}
	}
	,__class__: fonthx_opentype_tables_TableDirectory
});
var fonthx_opentype_tables_TableDirectoryEntry = function(table) {
	this.table = table;
};
fonthx_opentype_tables_TableDirectoryEntry.__name__ = ["fonthx","opentype","tables","TableDirectoryEntry"];
fonthx_opentype_tables_TableDirectoryEntry.prototype = {
	table: null
	,write: function(tt) {
		tt.writeTag(this.table.tag).writeULONG(this.table.checksum).writeULONG(this.table.offset).writeULONG(this.table.length);
	}
	,__class__: fonthx_opentype_tables_TableDirectoryEntry
};
var fonthx_opentype_tables_opentype_LayoutTable = function(tag) {
	fonthx_opentype_tables_Table.call(this,tag);
	this.majorVersion = 1;
	this.minorVersion = 0;
	this.scriptList = new fonthx_opentype_tables_opentype_script_ScriptListTable();
	this.featureList = new fonthx_opentype_tables_opentype_feature_FeatureListTable();
	this.lookupList = new fonthx_opentype_tables_opentype_lookup_LookupListTable();
};
fonthx_opentype_tables_opentype_LayoutTable.__name__ = ["fonthx","opentype","tables","opentype","LayoutTable"];
fonthx_opentype_tables_opentype_LayoutTable.__super__ = fonthx_opentype_tables_Table;
fonthx_opentype_tables_opentype_LayoutTable.prototype = $extend(fonthx_opentype_tables_Table.prototype,{
	majorVersion: null
	,minorVersion: null
	,scriptList: null
	,featureList: null
	,lookupList: null
	,setLayout: function(layout) {
		this.scriptList.setScripts(layout.scripts);
		this.featureList.setFeatures(layout.features);
		this.lookupList.setLookups(layout.lookups);
	}
	,write: function(tt) {
		var offset = 10;
		tt.writeUINT16(this.majorVersion).writeUINT16(this.minorVersion).writeOffset16(offset);
		offset += this.scriptList.get_length();
		tt.writeOffset16(offset);
		offset += this.featureList.get_length();
		tt.writeOffset16(offset);
		this.scriptList.write(tt);
		this.featureList.write(tt);
		this.lookupList.write(tt);
	}
	,__class__: fonthx_opentype_tables_opentype_LayoutTable
});
var fonthx_opentype_tables_opentype_GPOSTable = function() {
	fonthx_opentype_tables_opentype_LayoutTable.call(this,fonthx_opentype_tables_Table.GPOS);
};
fonthx_opentype_tables_opentype_GPOSTable.__name__ = ["fonthx","opentype","tables","opentype","GPOSTable"];
fonthx_opentype_tables_opentype_GPOSTable.__super__ = fonthx_opentype_tables_opentype_LayoutTable;
fonthx_opentype_tables_opentype_GPOSTable.prototype = $extend(fonthx_opentype_tables_opentype_LayoutTable.prototype,{
	__class__: fonthx_opentype_tables_opentype_GPOSTable
});
var fonthx_opentype_tables_opentype_GSUBTable = function() {
	fonthx_opentype_tables_opentype_LayoutTable.call(this,fonthx_opentype_tables_Table.GSUB);
};
fonthx_opentype_tables_opentype_GSUBTable.__name__ = ["fonthx","opentype","tables","opentype","GSUBTable"];
fonthx_opentype_tables_opentype_GSUBTable.__super__ = fonthx_opentype_tables_opentype_LayoutTable;
fonthx_opentype_tables_opentype_GSUBTable.prototype = $extend(fonthx_opentype_tables_opentype_LayoutTable.prototype,{
	__class__: fonthx_opentype_tables_opentype_GSUBTable
});
var fonthx_opentype_tables_opentype_feature_FeatureListTable = function() {
};
fonthx_opentype_tables_opentype_feature_FeatureListTable.__name__ = ["fonthx","opentype","tables","opentype","feature","FeatureListTable"];
fonthx_opentype_tables_opentype_feature_FeatureListTable.prototype = {
	features: null
	,setFeatures: function(features) {
		this.features = features;
	}
	,write: function(tt) {
		tt.writeSHORT(this.features.length);
		var offset = 2 + 6 * this.features.length;
		var _g = 0;
		var _g1 = this.features;
		while(_g < _g1.length) {
			var feature = _g1[_g];
			++_g;
			tt.writeTag(fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.toString(feature.tag));
			tt.writeOffset16(offset);
			offset += 4 + feature.lookups.length * 2;
		}
		var _g2 = 0;
		var _g11 = this.features;
		while(_g2 < _g11.length) {
			var feature1 = _g11[_g2];
			++_g2;
			tt.writeOffset16(0);
			tt.writeUINT16(feature1.lookups.length);
			var _g21 = 0;
			var _g3 = feature1.lookups;
			while(_g21 < _g3.length) {
				var lookup = _g3[_g21];
				++_g21;
				tt.writeUINT16(lookup.idx);
			}
		}
	}
	,get_length: function() {
		var l = 2 + this.features.length * 6;
		var _g = 0;
		var _g1 = this.features;
		while(_g < _g1.length) {
			var feature = _g1[_g];
			++_g;
			l += 4 + feature.lookups.length * 2;
		}
		return l;
	}
	,__class__: fonthx_opentype_tables_opentype_feature_FeatureListTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_ICommonTable = function() { };
fonthx_opentype_tables_opentype_lookup_ICommonTable.__name__ = ["fonthx","opentype","tables","opentype","lookup","ICommonTable"];
fonthx_opentype_tables_opentype_lookup_ICommonTable.prototype = {
	get_length: null
	,write: null
	,__class__: fonthx_opentype_tables_opentype_lookup_ICommonTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_ILookupSubtable = function() { };
fonthx_opentype_tables_opentype_lookup_ILookupSubtable.__name__ = ["fonthx","opentype","tables","opentype","lookup","ILookupSubtable"];
fonthx_opentype_tables_opentype_lookup_ILookupSubtable.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ICommonTable];
var fonthx_opentype_tables_opentype_lookup_LookupListTable = function() {
	this.lookupTables = [];
};
fonthx_opentype_tables_opentype_lookup_LookupListTable.__name__ = ["fonthx","opentype","tables","opentype","lookup","LookupListTable"];
fonthx_opentype_tables_opentype_lookup_LookupListTable.prototype = {
	lookups: null
	,lookupTables: null
	,setLookups: function(lookups) {
		this.lookups = lookups;
	}
	,write: function(tt) {
		var _g = 0;
		var _g1 = this.lookups;
		while(_g < _g1.length) {
			var lookup = _g1[_g];
			++_g;
			this.lookupTables.push(new fonthx_opentype_tables_opentype_lookup_LookupTable(lookup));
		}
		tt.writeUINT16(this.lookups.length);
		var offset = 2 + 2 * this.lookups.length;
		var _g2 = 0;
		var _g11 = this.lookupTables;
		while(_g2 < _g11.length) {
			var lookupTable = _g11[_g2];
			++_g2;
			tt.writeOffset16(offset);
			offset += lookupTable.get_length();
		}
		var _g3 = 0;
		var _g12 = this.lookupTables;
		while(_g3 < _g12.length) {
			var lookupTable1 = _g12[_g3];
			++_g3;
			lookupTable1.write(tt);
		}
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_LookupListTable
};
var fonthx_opentype_tables_opentype_lookup_LookupSubtableFactory = function() { };
fonthx_opentype_tables_opentype_lookup_LookupSubtableFactory.__name__ = ["fonthx","opentype","tables","opentype","lookup","LookupSubtableFactory"];
fonthx_opentype_tables_opentype_lookup_LookupSubtableFactory.createSubtable = function(subLookup) {
	if(js_Boot.__instanceof(subLookup,fonthx_model_font_features_lookups_pairadjustment_PairAdjustmentPositioningSubLookup)) {
		return new fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat1(subLookup);
	} else if(js_Boot.__instanceof(subLookup,fonthx_model_font_features_lookups_pairadjustment_ClassPairAdjustmentPositioningSubLookup)) {
		return new fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat2(subLookup);
	} else if(js_Boot.__instanceof(subLookup,fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup)) {
		var ssSubLookup = js_Boot.__cast(subLookup , fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup);
		if(ssSubLookup.simpleDeltaSubstitutions()) {
			return new fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat1(ssSubLookup);
		}
		return new fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat2(ssSubLookup);
	} else if(js_Boot.__instanceof(subLookup,fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup)) {
		return new fonthx_opentype_tables_opentype_lookup_gsub_LigatureSubstitutionSubtableFormat1(subLookup);
	}
	console.log("Unidentified lookup subtable " + Type.getClassName(subLookup == null ? null : js_Boot.getClass(subLookup)));
	return null;
};
var fonthx_opentype_tables_opentype_lookup_LookupTable = function(lookup) {
	this.lookup = lookup;
	this.subtables = [];
	var _g = 0;
	var _g1 = lookup.subLookups;
	while(_g < _g1.length) {
		var sublookup = _g1[_g];
		++_g;
		var subtable = fonthx_opentype_tables_opentype_lookup_LookupSubtableFactory.createSubtable(sublookup);
		this.subtables.push(subtable);
	}
};
fonthx_opentype_tables_opentype_lookup_LookupTable.__name__ = ["fonthx","opentype","tables","opentype","lookup","LookupTable"];
fonthx_opentype_tables_opentype_lookup_LookupTable.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ICommonTable];
fonthx_opentype_tables_opentype_lookup_LookupTable.prototype = {
	lookup: null
	,subtables: null
	,write: function(tt) {
		tt.writeUINT16(fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.toInt(this.lookup.type));
		tt.writeUINT16(this.lookup.flags);
		tt.writeUINT16(this.lookup.subLookups.length);
		var offset = 6 + 2 * this.lookup.subLookups.length;
		var _g = 0;
		var _g1 = this.subtables;
		while(_g < _g1.length) {
			var subtable = _g1[_g];
			++_g;
			tt.writeOffset16(offset);
			offset += subtable.get_length();
		}
		var _g2 = 0;
		var _g11 = this.subtables;
		while(_g2 < _g11.length) {
			var subtable1 = _g11[_g2];
			++_g2;
			subtable1.write(tt);
		}
	}
	,get_length: function() {
		var l = 6 + 2 * this.lookup.subLookups.length;
		var _g = 0;
		var _g1 = this.subtables;
		while(_g < _g1.length) {
			var subtable = _g1[_g];
			++_g;
			l += subtable.get_length();
		}
		return l;
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_LookupTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_coverage_CoverageRange = function(start,end,idx) {
	if(idx == null) {
		idx = 0;
	}
	if(end == null) {
		end = -1;
	}
	if(start == null) {
		start = 0;
	}
	this.start = start;
	this.end = end;
	this.idx = idx;
};
fonthx_opentype_tables_opentype_lookup_coverage_CoverageRange.__name__ = ["fonthx","opentype","tables","opentype","lookup","coverage","CoverageRange"];
fonthx_opentype_tables_opentype_lookup_coverage_CoverageRange.prototype = {
	start: null
	,end: null
	,idx: null
	,__class__: fonthx_opentype_tables_opentype_lookup_coverage_CoverageRange
};
var fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper = function() { };
fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.__name__ = ["fonthx","opentype","tables","opentype","lookup","coverage","CoverageTableHelper"];
fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.getCoverageTable = function(indices) {
	var ranges = fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.buildRanges(indices);
	if(fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.preferRanges(ranges,indices)) {
		return new fonthx_opentype_tables_opentype_lookup_coverage_GlyphRangeCoverageTable(ranges);
	}
	return new fonthx_opentype_tables_opentype_lookup_coverage_GlyphIndexCoverageTable(indices);
};
fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.buildRanges = function(indices) {
	var prev = -2;
	var currRange = null;
	var ranges = Lambda.fold(indices,function(glyphIdx,acc) {
		if(glyphIdx != prev + 1) {
			if(currRange != null) {
				currRange.end = prev;
			}
			currRange = new fonthx_opentype_tables_opentype_lookup_coverage_CoverageRange(glyphIdx);
			acc.push(currRange);
		}
		prev = glyphIdx;
		return acc;
	},[]);
	if(ranges.length > 0 && ranges[ranges.length - 1].end == -1) {
		ranges[ranges.length - 1].end = prev;
	}
	if(ranges.length > 1) {
		var _g1 = 1;
		var _g = ranges.length;
		while(_g1 < _g) {
			var i = _g1++;
			var prev1 = ranges[i - 1];
			var curr = ranges[i];
			curr.idx = prev1.idx + (prev1.end - prev1.start) + 1;
		}
	}
	return ranges;
};
fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.preferRanges = function(ranges,indices) {
	return 4 + ranges.length * 6 <= 4 + indices.length * 2;
};
var fonthx_opentype_tables_opentype_lookup_coverage_GlyphIndexCoverageTable = function(indices) {
	this.indices = indices;
};
fonthx_opentype_tables_opentype_lookup_coverage_GlyphIndexCoverageTable.__name__ = ["fonthx","opentype","tables","opentype","lookup","coverage","GlyphIndexCoverageTable"];
fonthx_opentype_tables_opentype_lookup_coverage_GlyphIndexCoverageTable.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ICommonTable];
fonthx_opentype_tables_opentype_lookup_coverage_GlyphIndexCoverageTable.prototype = {
	indices: null
	,write: function(tt) {
		tt.writeUINT16(1);
		tt.writeUINT16(this.indices.length);
		var _g = 0;
		var _g1 = this.indices;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			tt.writeUINT16(i);
		}
	}
	,get_length: function() {
		return 4 + this.indices.length * 2;
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_coverage_GlyphIndexCoverageTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_coverage_GlyphRangeCoverageTable = function(ranges) {
	this.ranges = ranges;
};
fonthx_opentype_tables_opentype_lookup_coverage_GlyphRangeCoverageTable.__name__ = ["fonthx","opentype","tables","opentype","lookup","coverage","GlyphRangeCoverageTable"];
fonthx_opentype_tables_opentype_lookup_coverage_GlyphRangeCoverageTable.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ICommonTable];
fonthx_opentype_tables_opentype_lookup_coverage_GlyphRangeCoverageTable.prototype = {
	ranges: null
	,write: function(tt) {
		tt.writeUINT16(2);
		tt.writeUINT16(this.ranges.length);
		var _g = 0;
		var _g1 = this.ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			tt.writeUINT16(range.start);
			tt.writeUINT16(range.end);
			tt.writeUINT16(range.idx);
		}
	}
	,get_length: function() {
		return 4 + this.ranges.length * 6;
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_coverage_GlyphRangeCoverageTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat1 = function(subLookup) {
	this._grouped = null;
	this._coverageTable = null;
	this.subLookup = subLookup;
};
fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat1.__name__ = ["fonthx","opentype","tables","opentype","lookup","gpos","PairAdjustmentPositioningSubtableFormat1"];
fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat1.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ILookupSubtable];
fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat1.prototype = {
	subLookup: null
	,write: function(tt) {
		var coverageTable = this.getCoverageTable();
		var valueRecordLength = this.getValueRecordLength();
		var groupedPairs = this.getGroupedPairs();
		tt.writeUINT16(1);
		tt.writeOffset16(this.get_length() - coverageTable.get_length());
		tt.writeUINT16(this.subLookup.format1);
		tt.writeUINT16(this.subLookup.format2);
		tt.writeUINT16(groupedPairs.length);
		var offset = 10 + 2 * groupedPairs.length;
		var _g = 0;
		while(_g < groupedPairs.length) {
			var group = groupedPairs[_g];
			++_g;
			tt.writeOffset16(offset);
			offset += 2 + group.length * valueRecordLength;
			group.sort(function(a,b) {
				return a.idx2 - b.idx2;
			});
		}
		var _g1 = 0;
		while(_g1 < groupedPairs.length) {
			var group1 = groupedPairs[_g1];
			++_g1;
			tt.writeUINT16(group1.length);
			var _g11 = 0;
			while(_g11 < group1.length) {
				var pair = group1[_g11];
				++_g11;
				tt.writeUINT16(pair.idx2);
				if(this.subLookup.hasFirstValues()) {
					tt.writeSHORT(pair.x | 0);
				}
				if(this.subLookup.hasSecondValues()) {
					tt.writeSHORT(pair.y | 0);
				}
			}
		}
		coverageTable.write(tt);
	}
	,get_length: function() {
		var valueRecordLength = this.getValueRecordLength();
		var groupedPairs = this.getGroupedPairs();
		var l = 10;
		l += groupedPairs.length * 2;
		l += groupedPairs.length * 2;
		var _g = 0;
		while(_g < groupedPairs.length) {
			var group = groupedPairs[_g];
			++_g;
			l += group.length * valueRecordLength;
		}
		l += this.getCoverageTable().get_length();
		return l;
	}
	,_coverageTable: null
	,getCoverageTable: function() {
		if(this._coverageTable != null) {
			return this._coverageTable;
		}
		var coverage = Lambda.fold(this.subLookup.get_pairs(),function(p,acc) {
			if(acc.indexOf(p.idx1) == -1) {
				acc.push(p.idx1);
			}
			return acc;
		},[]);
		coverage.sort(function(a,b) {
			return a - b;
		});
		return fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.getCoverageTable(coverage);
	}
	,_grouped: null
	,getGroupedPairs: function() {
		var pairs = this.subLookup.get_pairs().slice();
		pairs.sort(function(a,b) {
			return a.idx1 - b.idx1;
		});
		if(this._grouped != null) {
			return this._grouped;
		}
		var currentGroup = [];
		var lastPair = null;
		this._grouped = Lambda.fold(pairs,function(p,acc) {
			if(lastPair != null && p.idx1 != lastPair.idx1) {
				currentGroup = [];
				acc.push(currentGroup);
			}
			currentGroup.push(p);
			lastPair = p;
			return acc;
		},[currentGroup]);
		return this._grouped;
	}
	,getValueRecordLength: function() {
		var valueRecordLength = 2;
		if(this.subLookup.hasFirstValues()) {
			valueRecordLength += 2;
		}
		if(this.subLookup.hasSecondValues()) {
			valueRecordLength += 2;
		}
		return valueRecordLength;
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat1
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat2 = function(subLookup) {
	this.subLookup = subLookup;
};
fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat2.__name__ = ["fonthx","opentype","tables","opentype","lookup","gpos","PairAdjustmentPositioningSubtableFormat2"];
fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat2.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ILookupSubtable];
fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat2.prototype = {
	subLookup: null
	,write: function(tt) {
		tt.writeUINT16(2);
		tt.writeOffset16(0);
		tt.writeUINT16(0);
		tt.writeUINT16(0);
		tt.writeUINT16(0);
	}
	,get_length: function() {
		return 0;
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_gpos_PairAdjustmentPositioningSubtableFormat2
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_gsub_LigatureSubstitutionSubtableFormat1 = function(subLookup) {
	this._coverageTable = null;
	this.subLookup = subLookup;
};
fonthx_opentype_tables_opentype_lookup_gsub_LigatureSubstitutionSubtableFormat1.__name__ = ["fonthx","opentype","tables","opentype","lookup","gsub","LigatureSubstitutionSubtableFormat1"];
fonthx_opentype_tables_opentype_lookup_gsub_LigatureSubstitutionSubtableFormat1.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ILookupSubtable];
fonthx_opentype_tables_opentype_lookup_gsub_LigatureSubstitutionSubtableFormat1.prototype = {
	subLookup: null
	,write: function(tt) {
		var ligatureSetCount = 0;
		var ligatureSetMap = Lambda.fold(this.subLookup.get_subs(),function(p,acc) {
			var leadingGlyph = p.componentGlyphIds[0];
			if(!acc.h.hasOwnProperty(leadingGlyph)) {
				var value = [];
				acc.h[leadingGlyph] = value;
				ligatureSetCount += 1;
			}
			var subArray = acc.h[leadingGlyph];
			subArray.push(p);
			return acc;
		},new haxe_ds_IntMap());
		var coverageTable = this.getCoverageTable();
		tt.writeUINT16(1);
		var covTableOffset = 6 + ligatureSetCount * 2;
		tt.writeOffset16(covTableOffset);
		tt.writeSHORT(ligatureSetCount);
		var offset = covTableOffset + coverageTable.get_length();
		var _g = [];
		var i = ligatureSetMap.keys();
		while(i.hasNext()) {
			var i1 = i.next();
			_g.push(i1);
		}
		var leadingGlyphIds = _g;
		leadingGlyphIds.sort(function(a,b) {
			return a - b;
		});
		var _g1 = 0;
		while(_g1 < leadingGlyphIds.length) {
			var i2 = leadingGlyphIds[_g1];
			++_g1;
			tt.writeOffset16(offset);
			var set = ligatureSetMap.h[i2];
			offset += 2;
			var _g2 = 0;
			while(_g2 < set.length) {
				var ligaSub = set[_g2];
				++_g2;
				offset += 2;
				offset += 4 + (ligaSub.componentGlyphIds.length - 1) * 2;
			}
		}
		coverageTable.write(tt);
		var _g11 = 0;
		while(_g11 < leadingGlyphIds.length) {
			var i3 = leadingGlyphIds[_g11];
			++_g11;
			var set1 = ligatureSetMap.h[i3];
			tt.writeUINT16(set1.length);
			var offset1 = 2 + set1.length * 2;
			var _g21 = 0;
			while(_g21 < set1.length) {
				var ligaSub1 = set1[_g21];
				++_g21;
				tt.writeUINT16(offset1);
				offset1 += 4 + (ligaSub1.componentGlyphIds.length - 1) * 2;
			}
			var _g22 = 0;
			while(_g22 < set1.length) {
				var ligaSub2 = set1[_g22];
				++_g22;
				tt.writeUINT16(ligaSub2.ligatureGlyphId);
				tt.writeUINT16(ligaSub2.componentGlyphIds.length);
				var _g4 = 1;
				var _g3 = ligaSub2.componentGlyphIds.length;
				while(_g4 < _g3) {
					var i4 = _g4++;
					tt.writeUINT16(ligaSub2.componentGlyphIds[i4]);
				}
			}
		}
	}
	,get_length: function() {
		return 6 + this.getCoverageTable().get_length();
	}
	,_coverageTable: null
	,getCoverageTable: function() {
		if(this._coverageTable != null) {
			return this._coverageTable;
		}
		var coverage = Lambda.fold(this.subLookup.get_subs(),function(p,acc) {
			var leadingGlyph = p.componentGlyphIds[0];
			if(acc.indexOf(leadingGlyph) == -1) {
				acc.push(leadingGlyph);
			}
			return acc;
		},[]);
		coverage.sort(function(a,b) {
			return a - b;
		});
		return fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.getCoverageTable(coverage);
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_gsub_LigatureSubstitutionSubtableFormat1
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat1 = function(subLookup) {
	this._coverageTable = null;
	this.subLookup = subLookup;
};
fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat1.__name__ = ["fonthx","opentype","tables","opentype","lookup","gsub","SingleSubstitutionSubtableFormat1"];
fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat1.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ILookupSubtable];
fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat1.prototype = {
	subLookup: null
	,write: function(tt) {
		var coverageTable = this.getCoverageTable();
		tt.writeUINT16(1);
		tt.writeOffset16(6);
		tt.writeSHORT(this.subLookup.get_subs()[0].getDelta());
		coverageTable.write(tt);
	}
	,get_length: function() {
		return 6 + this.getCoverageTable().get_length();
	}
	,_coverageTable: null
	,getCoverageTable: function() {
		if(this._coverageTable != null) {
			return this._coverageTable;
		}
		var coverage = Lambda.fold(this.subLookup.get_subs(),function(p,acc) {
			if(acc.indexOf(p.fromId) == -1) {
				acc.push(p.fromId);
			}
			return acc;
		},[]);
		coverage.sort(function(a,b) {
			return a - b;
		});
		return fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.getCoverageTable(coverage);
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat1
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat2 = function(subLookup) {
	this._coverageTable = null;
	this.subLookup = subLookup;
};
fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat2.__name__ = ["fonthx","opentype","tables","opentype","lookup","gsub","SingleSubstitutionSubtableFormat2"];
fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat2.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ILookupSubtable];
fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat2.prototype = {
	subLookup: null
	,write: function(tt) {
		var coverageTable = this.getCoverageTable();
		tt.writeUINT16(2);
		tt.writeOffset16(6 + 2 * this.subLookup.get_subs().length);
		tt.writeSHORT(this.subLookup.get_subs().length);
		var _g = 0;
		var _g1 = this.subLookup.get_subs();
		while(_g < _g1.length) {
			var sub = _g1[_g];
			++_g;
			tt.writeUINT16(sub.toId);
		}
		coverageTable.write(tt);
	}
	,get_length: function() {
		return 6 + 2 * this.subLookup.get_subs().length + this.getCoverageTable().get_length();
	}
	,_coverageTable: null
	,getCoverageTable: function() {
		if(this._coverageTable != null) {
			return this._coverageTable;
		}
		var coverage = Lambda.fold(this.subLookup.get_subs(),function(p,acc) {
			if(acc.indexOf(p.fromId) == -1) {
				acc.push(p.fromId);
			}
			return acc;
		},[]);
		coverage.sort(function(a,b) {
			return a - b;
		});
		return fonthx_opentype_tables_opentype_lookup_coverage_CoverageTableHelper.getCoverageTable(coverage);
	}
	,__class__: fonthx_opentype_tables_opentype_lookup_gsub_SingleSubstitutionSubtableFormat2
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_script_ScriptListTable = function() {
	this.scriptTables = [];
};
fonthx_opentype_tables_opentype_script_ScriptListTable.__name__ = ["fonthx","opentype","tables","opentype","script","ScriptListTable"];
fonthx_opentype_tables_opentype_script_ScriptListTable.prototype = {
	scripts: null
	,scriptTables: null
	,setScripts: function(scripts) {
		this.scripts = scripts;
	}
	,initScriptTables: function() {
		if(this.scriptTables.length == 0) {
			var _g = 0;
			var _g1 = this.scripts;
			while(_g < _g1.length) {
				var script = _g1[_g];
				++_g;
				this.scriptTables.push(new fonthx_opentype_tables_opentype_script_ScriptTable(script));
			}
		}
	}
	,write: function(tt) {
		this.initScriptTables();
		tt.writeSHORT(this.scripts.length);
		var offset = this.headerToScriptTables();
		var _g = 0;
		var _g1 = this.scriptTables;
		while(_g < _g1.length) {
			var scriptTable = _g1[_g];
			++_g;
			var script = scriptTable.script;
			tt.writeTag(fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.toString(script.tag)).writeOffset16(offset);
			if(script.tag != "DFLT") {
				offset += scriptTable.get_length();
			}
		}
		var _g2 = 0;
		var _g11 = this.scriptTables;
		while(_g2 < _g11.length) {
			var scriptTable1 = _g11[_g2];
			++_g2;
			scriptTable1.write(tt);
		}
	}
	,get_length: function() {
		this.initScriptTables();
		var l = this.headerToScriptTables();
		var _g = 0;
		var _g1 = this.scriptTables;
		while(_g < _g1.length) {
			var scriptTable = _g1[_g];
			++_g;
			var script = scriptTable.script;
			if(script.tag == "DFLT") {
				continue;
			}
			l += scriptTable.get_length();
		}
		return l;
	}
	,headerToScriptTables: function() {
		return 2 + this.scripts.length * 6;
	}
	,__class__: fonthx_opentype_tables_opentype_script_ScriptListTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_tables_opentype_script_ScriptTable = function(script) {
	this.script = script;
};
fonthx_opentype_tables_opentype_script_ScriptTable.__name__ = ["fonthx","opentype","tables","opentype","script","ScriptTable"];
fonthx_opentype_tables_opentype_script_ScriptTable.__interfaces__ = [fonthx_opentype_tables_opentype_lookup_ICommonTable];
fonthx_opentype_tables_opentype_script_ScriptTable.prototype = {
	script: null
	,write: function(tt) {
		if(this.script.tag == "DFLT") {
			return;
		}
		var scriptTableOffset = 4 + this.script.languages.length * 6;
		tt.writeOffset16(this.script.defaultLangSys == null ? 0 : scriptTableOffset);
		tt.writeUINT16(this.script.languages.length);
		if(this.script.defaultLangSys != null) {
			scriptTableOffset += this.getLangSysTableLength(this.script.defaultLangSys);
		}
		var _g = 0;
		var _g1 = this.script.languages;
		while(_g < _g1.length) {
			var language = _g1[_g];
			++_g;
			tt.writeTag(fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.toString(language.tag));
			tt.writeOffset16(scriptTableOffset);
			scriptTableOffset += this.getLangSysTableLength(language);
		}
		var _g2 = 0;
		var _g11 = this.script.get_allLanguages();
		while(_g2 < _g11.length) {
			var language1 = _g11[_g2];
			++_g2;
			tt.writeUINT16(0);
			tt.writeUINT16(65535);
			tt.writeUINT16(language1.features.length);
			var _g21 = 0;
			var _g3 = language1.features;
			while(_g21 < _g3.length) {
				var feature = _g3[_g21];
				++_g21;
				tt.writeUINT16(feature.idx);
			}
		}
	}
	,get_length: function() {
		if(this.script.tag == "DFLT") {
			return 0;
		}
		var l = 4;
		l += 6 * this.script.languages.length;
		var _g = 0;
		var _g1 = this.script.get_allLanguages();
		while(_g < _g1.length) {
			var language = _g1[_g];
			++_g;
			l += this.getLangSysTableLength(language);
		}
		return l;
	}
	,getLangSysTableLength: function(language) {
		return 6 + 2 * language.features.length;
	}
	,__class__: fonthx_opentype_tables_opentype_script_ScriptTable
	,__properties__: {get_length:"get_length"}
};
var fonthx_opentype_types_Fixed = function() { };
fonthx_opentype_types_Fixed.__name__ = ["fonthx","opentype","types","Fixed"];
fonthx_opentype_types_Fixed.toFixed = function(f,precisionBits) {
	if(precisionBits == null) {
		precisionBits = 16;
	}
	return fonthx_opentype_types_Fixed.round(f * (1 << precisionBits));
};
fonthx_opentype_types_Fixed.round = function(f) {
	return Math.floor(f + 0.5) | 0;
};
var fonthx_opentype_utils_Utils = function() { };
fonthx_opentype_utils_Utils.__name__ = ["fonthx","opentype","utils","Utils"];
fonthx_opentype_utils_Utils.getMillisSince1904 = function(date) {
	var now = haxe_Int64Helper.fromFloat(date.getTime());
	var this1 = new haxe__$Int64__$_$_$Int64(0,86400000);
	var dayInMillis = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,24107);
	var days1904To1970 = this2;
	var mask = 65535;
	var al = days1904To1970.low & mask;
	var ah = days1904To1970.low >>> 16;
	var bl = dayInMillis.low & mask;
	var bh = dayInMillis.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(days1904To1970.low,dayInMillis.high) + haxe__$Int32_Int32_$Impl_$._mul(days1904To1970.high,dayInMillis.low) | 0) | 0;
	var this3 = new haxe__$Int64__$_$_$Int64(high,low);
	var millis1904To1970 = this3;
	var high1 = now.high + millis1904To1970.high | 0;
	var low1 = now.low + millis1904To1970.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,now.low) < 0) {
		var ret2 = high1++;
		high1 = high1 | 0;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(high1,low1);
	now = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(0,1000);
	now = haxe__$Int64_Int64_$Impl_$.divMod(now,this5).quotient;
	return now;
};
var fonthx_opentype_writers_ITrueTypeWriter = function() { };
fonthx_opentype_writers_ITrueTypeWriter.__name__ = ["fonthx","opentype","writers","ITrueTypeWriter"];
fonthx_opentype_writers_ITrueTypeWriter.prototype = {
	markPosition: null
	,getPosition: null
	,writeULONG: null
	,writeUSHORT: null
	,writeUINT16: null
	,writeOffset16: null
	,writeOffset32: null
	,writeSHORT: null
	,writeByte: null
	,writeTag: null
	,writeLONGDATETIME: null
	,writeByteString: null
	,writeBytes: null
	,writePascalString: null
	,writeVersion: null
	,writeFixed: null
	,pad: null
	,writeCard8: null
	,writeCard16: null
	,writeByteBlockIndex: null
	,writeStringsIndex: null
	,getBytes: null
	,__class__: fonthx_opentype_writers_ITrueTypeWriter
};
var fonthx_opentype_writers_TrueTypeFileWriter = function() {
	this.out = new fonthx_opentype_io_ByteWriter();
	this.pos = 0;
};
fonthx_opentype_writers_TrueTypeFileWriter.__name__ = ["fonthx","opentype","writers","TrueTypeFileWriter"];
fonthx_opentype_writers_TrueTypeFileWriter.__interfaces__ = [fonthx_opentype_writers_ITrueTypeWriter];
fonthx_opentype_writers_TrueTypeFileWriter.prototype = {
	out: null
	,mark: null
	,pos: null
	,markPosition: function() {
		this.mark = this.pos;
	}
	,getPosition: function() {
		return this.pos;
	}
	,write: function(b) {
		this.out.writeByte(b);
		this.pos++;
	}
	,writeULONG: function(b) {
		this.write(b >>> 24 & 255);
		this.write(b >>> 16 & 255);
		this.write(b >>> 8 & 255);
		this.write(b & 255);
		return this;
	}
	,writeUSHORT: function(b) {
		this.write(b >>> 8 & 255);
		this.write(b & 255);
		return this;
	}
	,writeUINT16: function(b) {
		this.writeUSHORT(b);
		return this;
	}
	,writeOffset16: function(b) {
		this.writeUSHORT(b);
		return this;
	}
	,writeOffset32: function(b) {
		this.writeULONG(b);
		return this;
	}
	,writeSHORT: function(b) {
		return this.writeUSHORT(b);
	}
	,writeByte: function(b) {
		this.write(b);
		return this;
	}
	,writeCard8: function(b) {
		this.write(b);
		return this;
	}
	,writeCard16: function(b) {
		this.writeUINT16(b);
		return this;
	}
	,writeTag: function(s) {
		this.write(HxOverrides.cca(s,0));
		this.write(HxOverrides.cca(s,1));
		this.write(HxOverrides.cca(s,2));
		this.write(HxOverrides.cca(s,3));
		return this;
	}
	,writeLONGDATETIME: function(secs) {
		this.write(secs.high >>> 24 & 255);
		this.write(secs.high >>> 16 & 255);
		this.write(secs.high >>> 8 & 255);
		this.write(secs.high & 255);
		this.write(secs.low >>> 24 & 255);
		this.write(secs.low >>> 16 & 255);
		this.write(secs.low >>> 8 & 255);
		this.write(secs.low & 255);
		return this;
	}
	,writeByteString: function(s) {
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = HxOverrides.cca(s,i);
			this.write(c & 255);
		}
		return this;
	}
	,writeBytes: function(bytes) {
		this.out.writeBytes(bytes);
		this.pos += bytes.length;
		return this;
	}
	,writePascalString: function(name) {
		var l = name.length;
		if(l > 255) {
			name = name.substring(0,255);
		}
		this.writeByte(l);
		this.writeByteString(name);
		return this;
	}
	,writeFixed: function(f) {
		this.writeULONG(fonthx_opentype_types_Fixed.toFixed(f));
		return this;
	}
	,writeVersion: function(major,minor) {
		this.writeUSHORT(major);
		this.writeUSHORT(minor);
		return this;
	}
	,writeByteBlockIndex: function(blocks) {
		this.writeCard16(blocks.length);
		if(blocks.length == 0) {
			return this;
		}
		var offSize = 4;
		var lastOffset = Lambda.fold(blocks,function(s,acc) {
			return acc + s.length;
		},1);
		if(lastOffset <= 255) {
			offSize = 1;
		} else if(lastOffset <= 65535) {
			offSize = 2;
		} else if(lastOffset <= 16777215) {
			offSize = 3;
		}
		this.writeByte(offSize);
		var offset = 1;
		var _g = 0;
		while(_g < blocks.length) {
			var o = blocks[_g];
			++_g;
			this.writeOffset(offset,offSize);
			offset += o.length;
		}
		this.writeOffset(offset,offSize);
		var _g1 = 0;
		while(_g1 < blocks.length) {
			var bytes = blocks[_g1];
			++_g1;
			this.writeBytes(bytes);
		}
		return this;
	}
	,writeStringsIndex: function(data) {
		var blocks = data.map(function(s) {
			return haxe_io_Bytes.ofString(s);
		});
		return this.writeByteBlockIndex(blocks);
	}
	,writeOffset: function(offset,offSize) {
		switch(offSize) {
		case 1:
			this.writeByte(offset);
			break;
		case 2:
			this.writeUSHORT(offset);
			break;
		case 3:
			this.writeByte(offset >>> 16 & 255);
			this.writeByte(offset >>> 8 & 255);
			this.writeByte(offset & 255);
			break;
		default:
			this.writeULONG(offset);
		}
	}
	,pad: function(fromMark) {
		if(fromMark == null) {
			fromMark = false;
		}
		var missing = 4 - (fromMark ? this.pos - this.mark : this.pos) % 4;
		if(missing <= 0 || missing >= 4) {
			return;
		}
		var _g1 = 0;
		var _g = missing;
		while(_g1 < _g) {
			var i = _g1++;
			this.writeByte(0);
		}
	}
	,getBytes: function() {
		return this.out.getBytes();
	}
	,__class__: fonthx_opentype_writers_TrueTypeFileWriter
};
var fonthx_services_FeatureSpecParser = function() {
};
fonthx_services_FeatureSpecParser.__name__ = ["fonthx","services","FeatureSpecParser"];
fonthx_services_FeatureSpecParser.prototype = {
	toLayout: function(spec,font) {
		if(Object.prototype.hasOwnProperty.call(spec,"languageSystems")) {
			var langSystems = spec.languageSystems;
			var _g = 0;
			while(_g < langSystems.length) {
				var langSystem = langSystems[_g];
				++_g;
				var script = new fonthx_model_font_features_Script(langSystem.script);
				var lang = new fonthx_model_font_features_Language(langSystem.language);
			}
		}
		if(Object.prototype.hasOwnProperty.call(spec,"features")) {
			var featureSpecs = spec.features;
			var _g1 = 0;
			while(_g1 < featureSpecs.length) {
				var featureSpec = featureSpecs[_g1];
				++_g1;
				var feature = this.getFeature(featureSpec,font);
				if(feature.isPos) {
					font.get_gposLayout().addFeature(feature);
				} else {
					font.get_gsubLayout().addFeature(feature);
				}
			}
		}
	}
	,getFeature: function(featureSpec,font) {
		var _gthis = this;
		var isPos = Object.prototype.hasOwnProperty.call(featureSpec,"isPos");
		var feature = new fonthx_model_font_features_Feature(featureSpec.name,isPos);
		if(Object.prototype.hasOwnProperty.call(featureSpec,"lookups")) {
			var lookupSpecs = featureSpec.lookups;
			var _g = 0;
			while(_g < lookupSpecs.length) {
				var lookupSpec = lookupSpecs[_g];
				++_g;
				var type = lookupSpec.type;
				var lookup = new fonthx_model_font_features_lookups_Lookup(type,isPos);
				if(type == 1) {
					var subLookup = new fonthx_model_font_features_lookups_singlesub_SingleSubstitutionSubLookup();
					lookup.addSubLookup(subLookup);
					var rules = lookupSpec.rules;
					var _g1 = 0;
					while(_g1 < rules.length) {
						var sub = rules[_g1];
						++_g1;
						var fromGlyph = this.getGlyphId(sub[0],font);
						var toGlyph = this.getGlyphId(sub[1],font);
						if(fromGlyph != -1 && toGlyph != -1) {
							subLookup.addSubstitution(fromGlyph,toGlyph);
						}
					}
				} else if(type == 4) {
					var subLookup1 = new fonthx_model_font_features_lookups_ligasub_LigaSubstitutionSubLookup();
					lookup.addSubLookup(subLookup1);
					var rules1 = lookupSpec.rules;
					var _g11 = 0;
					while(_g11 < rules1.length) {
						var rule = rules1[_g11];
						++_g11;
						var componentGroups = rule[0];
						var ligatureId = this.getGlyphId(rule[1],font);
						var _g2 = 0;
						while(_g2 < componentGroups.length) {
							var group = componentGroups[_g2];
							++_g2;
							subLookup1.addSubstitution(ligatureId,group.map(function(id) {
								return _gthis.getGlyphId(id,font);
							}));
						}
					}
				}
				if(lookup.subLookups.length > 0) {
					if(feature.isPos) {
						font.get_gposLayout().addLookup(lookup);
					} else {
						console.log("add lookup of type " + type);
						font.get_gsubLayout().addLookup(lookup);
					}
					feature.addLookup(lookup);
				}
			}
		}
		return feature;
	}
	,getGlyphId: function(id,font) {
		if(typeof(id) == "string") {
			return font.getGlyphIndexForName(id);
		}
		if(typeof(id) == "number" && ((id | 0) === id)) {
			return font.getGlyphIndexForCodepoint(id);
		}
		return -1;
	}
	,__class__: fonthx_services_FeatureSpecParser
};
var fonthx_svg_SVG = function(options) {
	this.options = options;
	this.s = new StringBuf();
};
fonthx_svg_SVG.__name__ = ["fonthx","svg","SVG"];
fonthx_svg_SVG.prototype = {
	options: null
	,s: null
	,open: function() {
		var id = this.options.id > -1 ? " id=\"glyph" + this.options.id + "\"" : "";
		var _this = this.s;
		var x = "<svg xmlns=\"http://www.w3.org/2000/svg\"" + this.viewBox() + id + ">";
		_this.b += Std.string(x);
	}
	,add: function(s) {
		this.s.b += s == null ? "null" : "" + s;
	}
	,close: function() {
		this.s.b += "</svg>";
	}
	,viewBox: function() {
		if(this.options.boxSize == 0) {
			return "";
		}
		if(this.options.isGlyph) {
			return " viewBox=\"0 " + this.options.boxSize + " " + this.options.boxSize + " " + this.options.boxSize + "\"";
		}
		return " viewBox=\"0 0 " + this.options.boxSize + " " + this.options.boxSize + "\"";
	}
	,toString: function() {
		return this.s.b;
	}
	,__class__: fonthx_svg_SVG
};
var fonthx_svg_SVGBuilder = function() {
};
fonthx_svg_SVGBuilder.__name__ = ["fonthx","svg","SVGBuilder"];
fonthx_svg_SVGBuilder.prototype = {
	buildGlyph: function(idx,glyph,options) {
		if(options == null) {
			options = new fonthx_svg_SVGOptions();
		}
		var svg = new fonthx_svg_SVG(options);
		svg.open();
		var svgGlyph = new fonthx_svg_SVGGlyph(idx,options);
		var walkOptions = new fonthx_model_font_ContourOptions(1);
		glyph.walkContours(svgGlyph,walkOptions);
		svg.add(svgGlyph.toString());
		svg.close();
		return svg.toString();
	}
	,buildSheet: function(glyphs,options,sheetConfig) {
		if(options == null) {
			options = new fonthx_svg_SVGOptions();
		}
		if(sheetConfig == null) {
			sheetConfig = new fonthx_svg_SVGSheetConfig();
		}
		var offset = 0;
		sheetConfig.perRow = Math.ceil(Math.sqrt(glyphs.length)) | 0;
		offset = sheetConfig.gap + options.boxSize;
		var boxSize = options.boxSize;
		options.boxSize = sheetConfig.perRow * offset;
		options.isGlyph = false;
		var svg = new fonthx_svg_SVG(options);
		svg.open();
		options.boxSize = boxSize;
		var idx = 0;
		var walkOptions = new fonthx_model_font_ContourOptions(1);
		var _g = 0;
		while(_g < glyphs.length) {
			var g = glyphs[_g];
			++_g;
			++idx;
			var svgGlyph = new fonthx_svg_SVGGlyph(idx,options);
			if(idx % sheetConfig.perRow == 0) {
				options.offsetX = 0;
				options.offsetY += offset;
			} else {
				options.offsetX += offset;
			}
			g.walkContours(svgGlyph,walkOptions);
			svg.add(svgGlyph.toString());
		}
		svg.close();
		return svg.toString();
	}
	,__class__: fonthx_svg_SVGBuilder
};
var fonthx_svg_SVGGlyph = function(id,options) {
	this.currProps = null;
	this.id = id;
	this.options = options;
	this.s = new StringBuf();
};
fonthx_svg_SVGGlyph.__name__ = ["fonthx","svg","SVGGlyph"];
fonthx_svg_SVGGlyph.__interfaces__ = [fonthx_model_font_IContourConsumer];
fonthx_svg_SVGGlyph.__super__ = fonthx_model_font_AbstractContourConsumer;
fonthx_svg_SVGGlyph.prototype = $extend(fonthx_model_font_AbstractContourConsumer.prototype,{
	s: null
	,id: null
	,options: null
	,currProps: null
	,start: function() {
		var _this = this.s;
		var x = "<g" + this.getId() + this.offset() + ">";
		_this.b += Std.string(x);
	}
	,offset: function() {
		if(this.options.offsetX == 0 && this.options.offsetY == 0) {
			return "";
		}
		return " transform=\"translate(" + this.options.offsetX + "," + this.options.offsetY + ")\"";
	}
	,getId: function() {
		if(!this.options.idsInGlyphs) {
			return "";
		}
		return " id=\"glyph" + this.id + "\"";
	}
	,startPath: function(props) {
		if(props != null) {
			this.currProps = props;
		} else if(this.currProps == null) {
			this.currProps = new fonthx_model_font_PathProperties();
		}
		this.s.b += "<path ";
		if(props.fill != null) {
			this.s.b += Std.string("fill=\"" + props.fill + "\" ");
		}
		if(props.stroke != null) {
			this.s.b += Std.string("stroke=\"" + props.stroke + "\" ");
		}
		if(props.opacity != 1) {
			this.s.b += Std.string("opacity=\"" + props.opacity + "\" ");
		}
		this.s.b += "d=\"";
	}
	,moveTo: function(x,y) {
		var _this = this.s;
		var x1 = "M" + x + "," + this.m(y);
		_this.b += Std.string(x1);
	}
	,lineTo: function(x,y) {
		var _this = this.s;
		var x1 = "L" + x + "," + this.m(y);
		_this.b += Std.string(x1);
	}
	,quadTo: function(x1,y1,x2,y2) {
		var _this = this.s;
		var x = "Q" + x1 + "," + this.m(y1) + "," + x2 + "," + this.m(y2);
		_this.b += Std.string(x);
	}
	,cubicTo: function(x1,y1,x2,y2,x3,y3) {
		var _this = this.s;
		var x = "C" + x1 + "," + this.m(y1) + "," + x2 + "," + this.m(y2) + "," + x3 + "," + this.m(y3);
		_this.b += Std.string(x);
	}
	,endPath: function() {
		this.s.b += "\"/>";
	}
	,end: function() {
		this.s.b += "</g>";
	}
	,m: function(y) {
		return this.options.boxSize - y;
	}
	,toString: function() {
		return this.s.b;
	}
	,__class__: fonthx_svg_SVGGlyph
});
var fonthx_svg_SVGOptions = function() {
	this.offsetY = 0;
	this.offsetX = 0;
	this.idsInGlyphs = false;
	this.isGlyph = true;
	this.boxSize = 1000;
	this.id = -1;
};
fonthx_svg_SVGOptions.__name__ = ["fonthx","svg","SVGOptions"];
fonthx_svg_SVGOptions.prototype = {
	id: null
	,boxSize: null
	,isGlyph: null
	,idsInGlyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: fonthx_svg_SVGOptions
};
var fonthx_svg_SVGSheetConfig = function() {
	this.perRow = 10;
	this.gap = 100;
};
fonthx_svg_SVGSheetConfig.__name__ = ["fonthx","svg","SVGSheetConfig"];
fonthx_svg_SVGSheetConfig.prototype = {
	gap: null
	,perRow: null
	,__class__: fonthx_svg_SVGSheetConfig
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var fonthx_utils_ExecutionTimer = function() { };
fonthx_utils_ExecutionTimer.__name__ = ["fonthx","utils","ExecutionTimer"];
fonthx_utils_ExecutionTimer.start = function(key) {
	var _this = fonthx_utils_ExecutionTimer._spans;
	var value = new Date().getTime();
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
};
fonthx_utils_ExecutionTimer.end = function(key) {
	var _this = fonthx_utils_ExecutionTimer._spans;
	var start = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(start != null) {
		console.log("" + key + " took " + (new Date().getTime() - start) + "ms");
	}
};
var fonthx_utils_MathUtils = function() { };
fonthx_utils_MathUtils.__name__ = ["fonthx","utils","MathUtils"];
fonthx_utils_MathUtils.maxint = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
fonthx_utils_MathUtils.minint = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
var fonthx_utils_StepIterator = function(start,end,step) {
	this.index = start;
	this.end = end;
	this.step = step;
};
fonthx_utils_StepIterator.__name__ = ["fonthx","utils","StepIterator"];
fonthx_utils_StepIterator.prototype = {
	end: null
	,step: null
	,index: null
	,hasNext: function() {
		return this.index < this.end;
	}
	,next: function() {
		var tmp = this;
		return (tmp.index += this.step) - this.step;
	}
	,__class__: fonthx_utils_StepIterator
};
var fonthx_utils_StringEncoder = function() { };
fonthx_utils_StringEncoder.__name__ = ["fonthx","utils","StringEncoder"];
fonthx_utils_StringEncoder.encode = function(s,encoding) {
	var buffer = new haxe_io_BytesBuffer();
	var encodingMap = fonthx_utils_StringEncoder.getEncoding(encoding);
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var code = HxOverrides.cca(s,i);
		var encoded = encodingMap.h[code];
		if(encoded != null) {
			buffer.b.push(encoded);
		}
	}
	var bytes = buffer.getBytes();
	return bytes;
};
fonthx_utils_StringEncoder.getEncoding = function(encoding) {
	var encodingName = js_Boot.__cast(encoding , String);
	var _this = fonthx_utils_StringEncoder.encodings;
	var encodingMap = __map_reserved[encodingName] != null ? _this.getReserved(encodingName) : _this.h[encodingName];
	if(encodingMap == null) {
		var text = fonthx_Assets.getText("ENC" + encodingName.toUpperCase());
		var lines = text.split("\n");
		encodingMap = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(line.indexOf("#") == 0 || line.length == 0) {
				continue;
			}
			var r = new EReg("\\s","g");
			var parts = r.split(line);
			if(parts.length < 2) {
				continue;
			}
			var codepoint = Std.parseInt(parts[0]);
			var unicode = Std.parseInt(parts[1]);
			encodingMap.h[unicode] = codepoint;
		}
		var _this1 = fonthx_utils_StringEncoder.encodings;
		if(__map_reserved[encodingName] != null) {
			_this1.setReserved(encodingName,encodingMap);
		} else {
			_this1.h[encodingName] = encodingMap;
		}
	}
	return encodingMap;
};
var format_png_Color = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"] };
format_png_Color.ColGrey = function(alpha) { var $x = ["ColGrey",0,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColTrue = function(alpha) { var $x = ["ColTrue",1,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColIndexed = ["ColIndexed",2];
format_png_Color.ColIndexed.toString = $estr;
format_png_Color.ColIndexed.__enum__ = format_png_Color;
var format_png_Chunk = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"] };
format_png_Chunk.CEnd = ["CEnd",0];
format_png_Chunk.CEnd.toString = $estr;
format_png_Chunk.CEnd.__enum__ = format_png_Chunk;
format_png_Chunk.CHeader = function(h) { var $x = ["CHeader",1,h]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CData = function(b) { var $x = ["CData",2,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CPalette = function(b) { var $x = ["CPalette",3,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CUnknown = function(id,data) { var $x = ["CUnknown",4,id,data]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
format_png_Reader.__name__ = ["format","png","Reader"];
format_png_Reader.prototype = {
	i: null
	,checkCRC: null
	,read: function() {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.i.readByte() != b) {
				throw new js__$Boot_HaxeError("Invalid header");
			}
		}
		var l = new List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c = new haxe_crypto_Crc32();
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				c["byte"](HxOverrides.cca(id,i));
			}
			c.update(data,0,data.length);
			if(c.get() != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
format_png_Tools.__name__ = ["format","png","Tools"];
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 1) {
			var h = c[2];
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 3) {
			var b = c[2];
			return b;
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) {
		numChannels = 4;
	}
	var b = y == 0 ? 0 : data.b[p - stride];
	var c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) {
		pa = -pa;
	}
	var pb = k - b;
	if(pb < 0) {
		pb = -pb;
	}
	var pc = k - c;
	if(pc < 0) {
		pc = -pc;
	}
	if(pa <= pb && pa <= pc) {
		return prev;
	} else if(pb <= pc) {
		return b;
	} else {
		return c;
	}
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g1 = 0;
	var _g = b.length >> 2;
	while(_g1 < _g) {
		var i = _g1++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		b.b[p++] = a & 255;
		b.b[p++] = r & 255;
		b.b[p++] = g & 255;
		b.b[p++] = b1 & 255;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				var b1 = fullData.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					fullData.b.push(b2[i]);
				}
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				var b11 = fullData.b;
				var b21 = data.b;
				var _g11 = 0;
				var _g2 = data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					fullData.b.push(b21[i1]);
				}
				var b12 = fullData.b;
				var b22 = b.b;
				var _g12 = 0;
				var _g3 = b.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					fullData.b.push(b22[i2]);
				}
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var _g4 = h.color;
	if(_g4[1] == 0) {
		var alpha = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rinc = alpha ? 2 : 1;
		var _g13 = 0;
		var _g5 = h.height;
		while(_g13 < _g5) {
			var y = _g13++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				var _g31 = 0;
				var _g21 = width;
				while(_g31 < _g21) {
					var x = _g31++;
					var v = data.b[r];
					r += rinc;
					grey.b[w++] = v & 255;
				}
				break;
			case 1:
				var cv = 0;
				var _g32 = 0;
				var _g22 = width;
				while(_g32 < _g22) {
					var x1 = _g32++;
					cv += data.b[r];
					r += rinc;
					grey.b[w++] = cv & 255;
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width;
				var _g33 = 0;
				var _g23 = width;
				while(_g33 < _g23) {
					var x2 = _g33++;
					var v1 = data.b[r] + grey.b[w - stride1];
					r += rinc;
					grey.b[w++] = v1 & 255;
				}
				break;
			case 3:
				var cv1 = 0;
				var stride2 = y == 0 ? 0 : width;
				var _g34 = 0;
				var _g24 = width;
				while(_g34 < _g24) {
					var x3 = _g34++;
					cv1 = data.b[r] + (cv1 + grey.b[w - stride2] >> 1) & 255;
					r += rinc;
					grey.b[w++] = cv1 & 255;
				}
				break;
			case 4:
				var stride3 = width;
				var cv2 = 0;
				var _g35 = 0;
				var _g25 = width;
				while(_g35 < _g25) {
					var x4 = _g35++;
					var b3 = y == 0 ? 0 : grey.b[w - stride3];
					var c1 = x4 == 0 || y == 0 ? 0 : grey.b[w - stride3 - 1];
					var k = cv2 + b3 - c1;
					var pa = k - cv2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b3;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c1;
					if(pc < 0) {
						pc = -pc;
					}
					cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b3 : c1) + data.b[r] & 255;
					r += rinc;
					grey.b[w++] = cv2 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
		}
	} else {
		throw new js__$Boot_HaxeError("Unsupported color mode");
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				var b1 = fullData.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					fullData.b.push(b2[i]);
				}
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				var b11 = fullData.b;
				var b21 = data.b;
				var _g11 = 0;
				var _g2 = data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					fullData.b.push(b21[i1]);
				}
				var b12 = fullData.b;
				var b22 = b.b;
				var _g12 = 0;
				var _g3 = b.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					fullData.b.push(b22[i2]);
				}
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g4 = h.color;
	switch(_g4[1]) {
	case 0:
		var alpha = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head1 = d.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var t = val1;
				if(t[1] == 4) {
					if(t[2] == "tRNS") {
						var data1 = t[3];
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g13 = 0;
		var _g5 = h.height;
		while(_g13 < _g5) {
			var y = _g13++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g31 = 0;
					var _g21 = width;
					while(_g31 < _g21) {
						var x = _g31++;
						var v = data.b[r++];
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = data.b[r++] & 255;
					}
				} else {
					var _g32 = 0;
					var _g22 = width;
					while(_g32 < _g22) {
						var x1 = _g32++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = (v1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g33 = 0;
					var _g23 = width;
					while(_g33 < _g23) {
						var x2 = _g33++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						ca += data.b[r++];
						bgra.b[w++] = ca & 255;
					}
				} else {
					var _g34 = 0;
					var _g24 = width;
					while(_g34 < _g24) {
						var x3 = _g34++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = (cv == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g35 = 0;
					var _g25 = width;
					while(_g35 < _g25) {
						var x4 = _g35++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1] & 255;
					}
				} else {
					var _g36 = 0;
					var _g26 = width;
					while(_g36 < _g26) {
						var x5 = _g36++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = (v3 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g37 = 0;
					var _g27 = width;
					while(_g37 < _g27) {
						var x6 = _g37++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1 & 255;
					}
				} else {
					var _g38 = 0;
					var _g28 = width;
					while(_g38 < _g28) {
						var x7 = _g38++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = (cv1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g39 = 0;
					var _g29 = width;
					while(_g39 < _g29) {
						var x8 = _g39++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b3 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b3;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b3 : c1) + data.b[r++] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						var b4 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b4 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b4;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b4 : c2) + data.b[r++] & 255;
						bgra.b[w++] = ca2 & 255;
					}
				} else {
					var _g310 = 0;
					var _g210 = width;
					while(_g310 < _g210) {
						var x9 = _g310++;
						var b5 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b5 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b5;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b5 : c3) + data.b[r++] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = (cv2 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g_head2 = d.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var t1 = val2;
				if(t1[1] == 4) {
					if(t1[2] == "tRNS") {
						var data2 = t1[3];
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g14 = 0;
		var _g6 = h.height;
		while(_g14 < _g6) {
			var y1 = _g14++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g311 = 0;
					var _g211 = width1;
					while(_g311 < _g211) {
						var x10 = _g311++;
						bgra.b[w++] = data.b[r + 2] & 255;
						bgra.b[w++] = data.b[r + 1] & 255;
						bgra.b[w++] = data.b[r] & 255;
						bgra.b[w++] = data.b[r + 3] & 255;
						r += 4;
					}
				} else {
					var _g312 = 0;
					var _g212 = width1;
					while(_g312 < _g212) {
						var x11 = _g312++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr = data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g313 = 0;
					var _g213 = width1;
					while(_g313 < _g213) {
						var x12 = _g313++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g314 = 0;
					var _g214 = width1;
					while(_g314 < _g214) {
						var x13 = _g314++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g315 = 0;
					var _g215 = width1;
					while(_g315 < _g215) {
						var x14 = _g315++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5] & 255;
						++w;
						r += 4;
					}
				} else {
					var _g316 = 0;
					var _g216 = width1;
					while(_g316 < _g216) {
						var x15 = _g316++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb & 255;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg & 255;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr & 255;
						++w;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g317 = 0;
					var _g217 = width1;
					while(_g317 < _g217) {
						var x16 = _g317++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g318 = 0;
					var _g218 = width1;
					while(_g318 < _g218) {
						var x17 = _g318++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g319 = 0;
					var _g219 = width1;
					while(_g319 < _g219) {
						var x18 = _g319++;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b6 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b6;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b6 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b7 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b7;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b7 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b8 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b8;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b8 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b9 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b9;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b9 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g320 = 0;
					var _g220 = width1;
					while(_g320 < _g220) {
						var x19 = _g320++;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b10 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b10;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b10 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b13 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b13 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b13;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b13 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b14 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b14 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b14;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b14 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g_head3 = d.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var t2 = val3;
			if(t2[1] == 4) {
				if(t2[2] == "tRNS") {
					var data3 = t2[3];
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g15 = 0;
		var _g7 = h.height;
		while(_g15 < _g7) {
			var y2 = _g15++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g321 = 0;
				var _g221 = width2;
				while(_g321 < _g221) {
					var x20 = _g321++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g322 = 0;
				var _g222 = width2;
				while(_g322 < _g222) {
					var x21 = _g322++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9] & 255;
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g323 = 0;
				var _g223 = width2;
				while(_g323 < _g223) {
					var x22 = _g323++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12 & 255;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g324 = 0;
				var _g224 = width2;
				while(_g324 < _g224) {
					var x23 = _g324++;
					var v7 = data.b[r];
					var b15 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - 1];
					var k10 = c13 + b15 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b15;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b15 : c14) + v7 & 255;
					data.b[r++] = c13 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g16 = 0;
			var _g8 = h.height;
			while(_g16 < _g8) {
				var y3 = _g16++;
				++r1;
				var _g325 = 0;
				var _g225 = h.width;
				while(_g325 < _g225) {
					var x24 = _g325++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c15 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c15 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c15] : 255) & 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g17 = 0;
			var _g9 = h.height;
			while(_g17 < _g9) {
				var y4 = _g17++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var v8;
				var _g326 = 0;
				var _g226 = h.width;
				while(_g326 < _g226) {
					var x25 = _g326++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c16 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c16 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c16] : 255) & 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.buildGrey = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r++] & 255;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildIndexed = function(width,height,data,palette,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r++] & 255;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColIndexed, interlaced : false}));
	l.add(format_png_Chunk.CPalette(palette));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r + 2] & 255;
			rgb.b[w++] = data.b[r + 1] & 255;
			rgb.b[w++] = data.b[r] & 255;
			r += 3;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgba.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgba.b[w++] = data.b[r + 1] & 255;
			rgba.b[w++] = data.b[r + 2] & 255;
			rgba.b[w++] = data.b[r + 3] & 255;
			rgba.b[w++] = data.b[r] & 255;
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgba.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgba.b[w++] = data.b[r + 2] & 255;
			rgba.b[w++] = data.b[r + 1] & 255;
			rgba.b[w++] = data.b[r] & 255;
			rgba.b[w++] = data.b[r + 3] & 255;
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_tools_Deflate = function() { };
format_tools_Deflate.__name__ = ["format","tools","Deflate"];
format_tools_Deflate.run = function(b,level) {
	if(level == null) {
		level = 9;
	}
	return haxe_zip_Compress.run(b,level);
};
var format_tools_Inflate = function() { };
format_tools_Inflate.__name__ = ["format","tools","Inflate"];
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var haxe__$Int32_Int32_$Impl_$ = {};
haxe__$Int32_Int32_$Impl_$.__name__ = ["haxe","_Int32","Int32_Impl_"];
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64_Int64_$Impl_$ = {};
haxe__$Int64_Int64_$Impl_$.__name__ = ["haxe","_Int64","Int64_Impl_"];
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		var _g = divisor.low;
		switch(_g) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
			break;
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = -dividend.low;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this3 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this3;
	} else {
		var this4 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this4;
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = -divisor.low;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this5 = new haxe__$Int64__$_$_$Int64(high1,low1);
		divisor = this5;
	} else {
		divisor = divisor;
	}
	var this6 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this6;
	var this7 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this7;
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this8 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this8;
		} else if(b < 32) {
			var this9 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this9;
		} else {
			var this10 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this10;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this11 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this11;
		} else if(b1 < 32) {
			var this12 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this12;
		} else {
			var this13 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this13;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var this14 = new haxe__$Int64__$_$_$Int64(0,0);
		var b2 = this14;
		if(!(mask.high != b2.high || mask.low != b2.low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			var this15 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this15;
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				var ret2 = high2--;
				high2 = high2 | 0;
			}
			var this16 = new haxe__$Int64__$_$_$Int64(high2,low2);
			modulus = this16;
		}
		var b3 = 1;
		b3 &= 63;
		if(b3 == 0) {
			var this17 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this17;
		} else if(b3 < 32) {
			var this18 = new haxe__$Int64__$_$_$Int64(mask.high >>> b3,mask.high << 32 - b3 | mask.low >>> b3);
			mask = this18;
		} else {
			var this19 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b3 - 32);
			mask = this19;
		}
		var b4 = 1;
		b4 &= 63;
		if(b4 == 0) {
			var this20 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this20;
		} else if(b4 < 32) {
			var this21 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b4,divisor.high << 32 - b4 | divisor.low >>> b4);
			divisor = this21;
		} else {
			var this22 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b4 - 32);
			divisor = this22;
		}
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = -quotient.low;
		if(low3 == 0) {
			var ret3 = high3++;
			high3 = high3 | 0;
		}
		var this23 = new haxe__$Int64__$_$_$Int64(high3,low3);
		quotient = this23;
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = -modulus.low;
		if(low4 == 0) {
			var ret4 = high4++;
			high4 = high4 | 0;
		}
		var this24 = new haxe__$Int64__$_$_$Int64(high4,low4);
		modulus = this24;
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
haxe_Int64Helper.__name__ = ["haxe","Int64Helper"];
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw new js__$Boot_HaxeError("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion underflow");
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var result = this1;
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var this2 = new haxe__$Int64__$_$_$Int64(0,1);
			var a = this2;
			var b = i;
			b &= 63;
			var b1;
			if(b == 0) {
				var this3 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
				b1 = this3;
			} else if(b < 32) {
				var this4 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
				b1 = this4;
			} else {
				var this5 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
				b1 = this5;
			}
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var this6 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this6;
		}
		++i;
	}
	if(neg) {
		var high1 = ~result.high;
		var low1 = -result.low;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this7 = new haxe__$Int64__$_$_$Int64(high1,low1);
		result = this7;
	}
	return result;
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b[pos++] = value & 255;
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() {
	this.crc = -1;
};
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.prototype = {
	crc: null
	,'byte': function(b) {
		var tmp = (this.crc ^ b) & 255;
		var _g = 0;
		while(_g < 8) {
			var j = _g++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		this.crc = this.crc >>> 8 ^ tmp;
	}
	,update: function(b,pos,len) {
		var b1 = b.b.bufferValue;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = (this.crc ^ b1.bytes[i]) & 255;
			var _g2 = 0;
			while(_g2 < 8) {
				var j = _g2++;
				if((tmp & 1) == 1) {
					tmp = tmp >>> 1 ^ -306674912;
				} else {
					tmp >>>= 1;
				}
			}
			this.crc = this.crc >>> 8 ^ tmp;
		}
	}
	,get: function() {
		return this.crc ^ -1;
	}
	,__class__: haxe_crypto_Crc32
};
var haxe_crypto_Md5 = function() {
};
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	var _g = blksSize;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_zip_Compress = function() { };
haxe_zip_Compress.__name__ = ["haxe","zip","Compress"];
haxe_zip_Compress.run = function(s,level) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
var haxe_zip_Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,'final': null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
haxe_Resource.content = [{ name : "ENCMACROMAN", data : ""},{ name : "AGLFN", data : ""}];
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
fonthx_examples_pixelfonter_PixelGlyph.useCircles = false;
fonthx_model_font_ContourOptions.LAYERED_CONTOURS = 1;
fonthx_model_font_ContourOptions.FLAT_CONTOURS = 2;
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_AALT = "aalt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ABVF = "abvf";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ABVM = "abvm";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ABVS = "abvs";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_AFRC = "afrc";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_AKHN = "akhn";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_BLWF = "blwf";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_BLWM = "blwm";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_BLWS = "blws";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CALT = "calt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CASE = "case";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CCMP = "ccmp";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CFAR = "cfar";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CJCT = "cjct";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CLIG = "clig";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CPCT = "cpct";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CPSP = "cpsp";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CSWH = "cswh";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_CURS = "curs";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_C2PC = "c2pc";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_C2SC = "c2sc";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_DIST = "dist";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_DLIG = "dlig";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_DNOM = "dnom";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_DTLS = "dtls";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_EXPT = "expt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FALT = "falt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FIN2 = "fin2";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FIN3 = "fin3";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FINA = "fina";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FLAC = "flac";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FRAC = "frac";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_FWID = "fwid";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HALF = "half";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HALN = "haln";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HALT = "halt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HIST = "hist";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HKNA = "hkna";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HLIG = "hlig";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HNGL = "hngl";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HOJO = "hojo";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_HWID = "hwid";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_INIT = "init";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ISOL = "isol";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ITAL = "ital";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_JALT = "jalt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_JP78 = "jp78";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_JP83 = "jp83";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_JP90 = "jp90";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_JP04 = "jp04";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_KERN = "kern";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LFBD = "lfbd";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LIGA = "liga";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LJMO = "ljmo";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LNUM = "lnum";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LOCL = "locl";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LTRA = "ltra";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_LTRM = "ltrm";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_MARK = "mark";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_MED2 = "med2";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_MEDI = "medi";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_MGRK = "mgrk";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_MKMK = "mkmk";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_MSET = "mset";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_NALT = "nalt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_NLCK = "nlck";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_NUKT = "nukt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_NUMR = "numr";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ONUM = "onum";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_OPBD = "opbd";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ORDN = "ordn";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ORNM = "ornm";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PALT = "palt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PCAP = "pcap";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PKNA = "pkna";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PNUM = "pnum";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PREF = "pref";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PRES = "pres";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PSTF = "pstf";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PSTS = "psts";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_PWID = "pwid";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_QWID = "qwid";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RAND = "rand";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RCLT = "rclt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RKRF = "rkrf";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RLIG = "rlig";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RPHF = "rphf";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RTBD = "rtbd";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RTLA = "rtla";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RTLM = "rtlm";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RUBY = "ruby";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_RVRN = "rvrn";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SALT = "salt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SINF = "sinf";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SIZE = "size";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SMCP = "smcp";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SMPL = "smpl";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS01 = "ss01";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS02 = "ss02";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS03 = "ss03";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS04 = "ss04";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS05 = "ss05";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS06 = "ss06";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS07 = "ss07";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS08 = "ss08";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS09 = "ss09";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS10 = "ss10";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS11 = "ss11";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS12 = "ss12";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS13 = "ss13";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS14 = "ss14";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS15 = "ss15";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS16 = "ss16";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS17 = "ss17";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS18 = "ss18";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS19 = "ss19";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SS20 = "ss20";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SSTY = "ssty";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_STCH = "stch";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SUBS = "subs";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SUPS = "sups";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_SWSH = "swsh";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_TITL = "titl";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_TJMO = "tjmo";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_TNAM = "tnam";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_TNUM = "tnum";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_TRAD = "trad";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_TWID = "twid";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_UNIC = "unic";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VALT = "valt";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VATU = "vatu";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VERT = "vert";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VHAL = "vhal";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VJMO = "vjmo";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VKNA = "vkna";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VKRN = "vkrn";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VPAL = "vpal";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VRT2 = "vrt2";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_VRTR = "vrtr";
fonthx_model_font_features__$FeatureTag_FeatureTag_$Impl_$.FEAT_ZERO = "zero";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DEFAULT = "DFLT";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ABAZA = "ABA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ABKHAZIAN = "ABK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ACHOLI = "ACH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ACHI = "ACR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ADYGHE = "ADY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AFRIKAANS = "AFK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AFAR = "AFR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AGAW = "AGW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AITON = "AIO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AKAN = "AKA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ALSATIAN = "ALS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ALTAI = "ALT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AMHARIC = "AMH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ANGLOSAXON = "ANG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ARABIC = "ARA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ARAGONESE = "ARG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AARI = "ARI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RAKHINE = "ARK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ASSAMESE = "ASM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ASTURIAN = "AST ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ATHAPASKAN = "ATH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AVAR = "AVR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AWADHI = "AWA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AYMARA = "AYM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TORKI = "AZB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AZERBAIJANI = "AZE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BADAGA = "BAD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BAGHELKHANDI = "BAG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BALKAR = "BAL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BALINESE = "BAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BAVARIAN = "BAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BAULE = "BAU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BATAKTOBA = "BBC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BERBER = "BBR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BENCH = "BCH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BIBLESCREE = "BCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BANDJALANG = "BDY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BELARUSSIAN = "BEL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BEMBA = "BEM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BENGALI = "BEN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HARYANVI = "BGC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BAGRI = "BGQ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BULGARIAN = "BGR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BHILI = "BHI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BHOJPURI = "BHO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BIKOL = "BIK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BILEN = "BIL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BISLAMA = "BIS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KANAUJI = "BJJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BLACKFOOT = "BKF ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BALUCHI = "BLI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PAOKAREN = "BLK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BALANTE = "BLN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BALTI = "BLT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BAMBARA = "BMB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BAMILEKE = "BML ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BOSNIAN = "BOS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BISHNUPRIYAMANIPURI = "BPY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BRETON = "BRE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BRAHUI = "BRH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BRAJBHASHA = "BRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BURMESE = "BRM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BODO = "BRX ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BASHKIR = "BSH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BURUSHASKI = "BSK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BETI = "BTI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BATAKSIMALUNGUN = "BTS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BUGIS = "BUG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MEDUMBA = "BYV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KAQCHIKEL = "CAK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CATALAN = "CAT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZAMBOANGACHAVACANO = "CBK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CEBUANO = "CEB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHECHEN = "CHE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHAHAGURAGE = "CHG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHATTISGARHI = "CHH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHICHEWA = "CHI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHUKCHI = "CHK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHOCTAW = "CHO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHIPEWYAN = "CHP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHEROKEE = "CHR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHAMORRO = "CHA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHUVASH = "CHU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHEYENNE = "CHY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHIGA = "CGG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WESTERNCHAM = "CJA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EASTERNCHAM = "CJM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.COMORIAN = "CMR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.COPTIC = "COP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CORNISH = "COR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CORSICAN = "COS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CREOLES = "CPP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CREE = "CRE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CARRIER = "CRR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CRIMEANTATAR = "CRT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KASHUBIAN = "CSB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHURCHSLAVONIC = "CSL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CZECH = "CSY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHITTAGONIAN = "CTG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SANBLASKUNA = "CUK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DANISH = "DAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DARGWA = "DAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DAYI = "DAX ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WOODSCREE = "DCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GERMAN = "DEU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DOGRI = "DGO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DOGRI2 = "DGR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DHANGU = "DHG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DIVEHI = "DHV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DIMLI = "DIQ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZARMA = "DJR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DANGME = "DNG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DAN = "DNJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DINKA = "DNK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DARI = "DRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DHUWAL = "DUJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DUNGAN = "DUN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DZONGKHA = "DZN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EBIRA = "EBI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EASTERNCREE = "ECR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EDO = "EDO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EFIK = "EFI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GREEK = "ELL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EASTERNMANINKAKAN = "EMK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ENGLISH = "ENG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ERZYA = "ERZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SPANISH = "ESP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CENTRALYUPIK = "ESU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ESTONIAN = "ETI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BASQUE = "EUQ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EVENKI = "EVK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EVEN = "EVN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EWE = "EWE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FRENCHANTILLEAN = "FAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PERSIAN = "FAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FANTI = "FAT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FINNISH = "FIN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FIJIAN = "FJI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FLEMISH = "FLE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FEFE = "FMP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FORESTNENETS = "FNE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FON = "FON ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FAROESE = "FOS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FRENCH = "FRA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CAJUNFRENCH = "FRC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FRISIAN = "FRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FRIULIAN = "FRL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ARPITAN = "FRP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FUTA = "FTA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FULAH = "FUL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NIGERIANFULFULDE = "FUV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GA = "GAD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SCOTTISHGAELI = "GAE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GAGAUZ = "GAG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GALICIAN = "GAL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GARSHUNI = "GAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GARHWALI = "GAW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GEEZ = "GEZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GITHABUL = "GIH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GILYAK = "GIL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KPELLEGUINEA = "GKP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GILAKI = "GLK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GUMUZ = "GMZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GUMATJ = "GNN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GOGO = "GOG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GONDI = "GON ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GREENLANDIC = "GRN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GARO = "GRO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GUARANI = "GUA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WAYUU = "GUC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GUPAPUYNGU = "GUF ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GUJARATI = "GUJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GUSII = "GUZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HAITIAN = "HAI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HALAM = "HAL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HARAUTI = "HAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HAUSA = "HAU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HAWAIIAN = "HAW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HAYA = "HAY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HAZARAGI = "HAZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HAMMERBANNA = "HBN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HERERO = "HER ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HILIGAYNON = "HIL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HINDI = "HIN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HIGHMARI = "HMA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HMONG = "HMN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HIRIMOTU = "HMO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HINDKO = "HND ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HARARI = "HRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CROATIAN = "HRV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HUNGARIAN = "HUN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ARMENIAN = "HYE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IBAN = "IBA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IBIBIO = "IBB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IGBO = "IBO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IJOLANGUAGES = "IJO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IDO = "IDO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INTERLINGUE = "ILE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ILOKANO = "ILO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INTERLINGUA = "INA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INDONESIAN = "IND ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INGUSH = "ING ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INUKTITUT = "INU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INUPIAT = "IPK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IRISH = "IRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.IRISHTRADITIONAL = "IRT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ICELANDIC = "ISL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.INARISAMI = "ISM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ITALIAN = "ITA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HEBREW = "IWR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.JAMAICANCREOLE = "JAM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.JAPANESE = "JAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.JAVANESE = "JAV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOJBAN = "JBO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KRYMCHAK = "JCT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YIDDISH = "JII ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LADINO = "JUD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.JULA = "JUL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KABARDIAN = "KAB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KACHCHI = "KAC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KALENJIN = "KAL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KANNADA = "KAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KARACHAY = "KAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GEORGIAN = "KAT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KAZAKH = "KAZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAKONDE = "KDE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KABUVERDIANUCRIOULO = "KEA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KEBENA = "KEB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KEKCHI = "KEK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHUTSURIGEORGIAN = "KGE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHAKASS = "KHA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHANTYKAZIM = "KHK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHMER = "KHM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHANTYSHURISHKAR = "KHS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHAMTISHAN = "KHT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHANTYVAKHI = "KHV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHOWAR = "KHW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KIKUYUGIKUYU = "KIK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KIRGHIZKYRGYZ = "KIR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KISII = "KIS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KIRMANJKI = "KIU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOUTHERNKIWAI = "KJD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.EASTERNPWOKAREN = "KJP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BUMTHANGKHA = "KJZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOKNI = "KKN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KALMYK = "KLM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KAMBA = "KMB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KUMAONI = "KMN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOMO = "KMO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOMSO = "KMS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHORASANITURKIC = "KMZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KANURI = "KNR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KODAGU = "KOD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOREANOLDHANGUL = "KOH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KONKANI = "KOK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KIKONGO = "KON ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOMI = "KOM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOMIPERMYAK = "KOP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOREAN = "KOR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOSRAEAN = "KOS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOMIZYRIAN = "KOZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KPELLE = "KPL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KRIO = "KRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KARAKALPAK = "KRK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KARELIAN = "KRL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KARAIM = "KRM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KAREN = "KRN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KOORETE = "KRT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KASHMIRI = "KSH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHASI = "KSI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KILDINSAMI = "KSM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SGAWKAREN = "KSW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KUANYAMA = "KUA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KUI = "KUI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KULVI = "KUL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KUMYK = "KUM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KURDISH = "KUR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KURUKH = "KUU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KUY = "KUY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KORYAK = "KYK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WESTERNKAYAH = "KYU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LADIN = "LAD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAHULI = "LAH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAK = "LAK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAMBANI = "LAM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAO = "LAO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LATIN = "LAT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAZ = "LAZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LCREE = "LCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LADAKHI = "LDK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LEZGI = "LEZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LIGURIAN = "LIJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LIMBURGISH = "LIM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LINGALA = "LIN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LISU = "LIS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAMPUNG = "LJP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LAKI = "LKI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOWMARI = "LMA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LIMBU = "LMB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOMBARD = "LMO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOMWE = "LMW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOMA = "LOM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LURI = "LRC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOWERSORBIAN = "LSB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LULESAMI = "LSM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LITHUANIAN = "LTH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LUXEMBOURGISH = "LTZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LUBALULUA = "LUA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LUBAKATANGA = "LUB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.GANDA = "LUG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LUYIA = "LUH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LUO = "LUO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LATVIAN = "LVI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MADURA = "MAD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAGAHI = "MAG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MARSHALLESE = "MAH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAJANG = "MAJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAKHUWA = "MAK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALAYALAM = "MAL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAM = "MAM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANSI = "MAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAPUDUNGUN = "MAP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MARATHI = "MAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MARWARI = "MAW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MBUNDU = "MBN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MBO = "MBO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANCHU = "MCH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MOOSECREE = "MCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MENDE = "MDE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANDAR = "MDR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MEEN = "MEN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MERU = "MER ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PATTANIMALAY = "MFA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MORISYEN = "MFE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MINANGKABAU = "MIN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MIZO = "MIZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MACEDONIAN = "MKD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAKASAR = "MKR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KITUBA = "MKW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALE = "MLE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALAGASY = "MLG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALINKE = "MLN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALAYALAMREFORMED = "MLR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALAY = "MLY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANDINKA = "MND ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MONGOLIAN = "MNG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANIPURI = "MNI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANINKA = "MNK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MANX = "MNX ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MOHAWK = "MOH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MOKSHA = "MOK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MOLDAVIAN = "MOL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MON = "MON ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MOROCCAN = "MOR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MOSSI = "MOS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAORI = "MRI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAITHILI = "MTH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MALTESE = "MTS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MUNDARI = "MUN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MUSCOGEE = "MUS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MIRANDESE = "MWL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.HMONGDAW = "MWW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAYAN = "MYN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MAZANDERANI = "MZN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NAGAASSAMESE = "NAG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NAHUATL = "NAH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NANAI = "NAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NEAPOLITAN = "NAP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NASKAPI = "NAS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NAURUAN = "NAU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NAVAJO = "NAV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NCREE = "NCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NDEBELE = "NDB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NDAU = "NDC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NDONGA = "NDG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LOSAXON = "NDS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NEPALI = "NEP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NEWARI = "NEW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NGBAKA = "NGA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NAGARI = "NGR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORWAYHOUSECREE = "NHC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NISI = "NIS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NIUEAN = "NIU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NYANKOLE = "NKL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NKO = "NKO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DUTCH = "NLD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NIMADI = "NOE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NOGAI = "NOG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORWEGIAN = "NOR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NOVIAL = "NOV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORTHERNSAMI = "NSM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOTHONORTHERN = "NSO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORTHERNTAI = "NTA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ESPERANTO = "NTO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NYAMWEZI = "NYM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORWEGIANNYNORSK = "NYN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MBEMBETIGON = "NZA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.OCCITAN = "OCI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.OJICREE = "OCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.OJIBWAY = "OJB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ODIA = "ORI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.OROMO = "ORO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.OSSETIAN = "OSS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PALESTINIANARAMAIC = "PAA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PANGASINAN = "PAG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PALI = "PAL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PAMPANGAN = "PAM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PUNJABI = "PAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PALPA = "PAP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PASHTO = "PAS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PALAUAN = "PAU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.BOUYEI = "PCC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PICARD = "PCD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PENNSYLVANIAGERMAN = "PDC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.POLYTONICGREEK = "PGR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PHAKE = "PHK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORFOLK = "PIH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.FILIPINO = "PIL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PALAUNG = "PLG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.POLISH = "PLK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PIEMONTESE = "PMS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WESTERNPANJABI = "PNB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.POCOMCHI = "POH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.POHNPEIAN = "PON ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PROVENCAL = "PRO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.PORTUGUESE = "PTG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WESTERNPWOKAREN = "PWO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHIN = "QIN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KICHE = "QUC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.QUECHUABOLIVIA = "QUH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.QUECHUA = "QUZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.QUECHUAECUADOR = "QVI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.QUECHUAPERU = "QWH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RAJASTHANI = "RAJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RAROTONGAN = "RAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RUSSIANBURIAT = "RBU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RCREE = "RCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.REJANG = "REJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RIANG = "RIA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TARIFIT = "RIF ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RITARUNGO = "RIT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ARAKWAL = "RKW ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ROMANSH = "RMS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.VLAXROMANI = "RMY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ROMANIAN = "ROM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ROMANY = "ROY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RUSYN = "RSY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ROTUMAN = "RTM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KINYARWANDA = "RUA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RUNDI = "RUN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.AROMANIAN = "RUP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.RUSSIAN = "RUS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SADRI = "SAD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SANSKRIT = "SAN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SASAK = "SAS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SANTALI = "SAT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SAYISI = "SAY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SICILIAN = "SCN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SCOTS = "SCO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SEKOTA = "SEK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SELKUP = "SEL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.OLDIRISH = "SGA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SANGO = "SGO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SAMOGITIAN = "SGS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TACHELHIT = "SHI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SHAN = "SHN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SIBE = "SIB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SIDAMO = "SID ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SILTEGURAGE = "SIG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SKOLTSAMI = "SKS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SLOVAK = "SKY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.NORTHSLAVEY = "SCS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SLAVEY = "SLA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SLOVENIAN = "SLV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOMALI = "SML ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SAMOAN = "SMO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SENA = "SNA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SINDHI = "SND ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SINHALASINHALESE = "SNH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SONINKE = "SNK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SODOGURAGE = "SOG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SONGE = "SOP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOTHOSOUTHERN = "SOT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ALBANIAN = "SQI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SERBIAN = "SRB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SARDINIAN = "SRD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SARAIKI = "SRK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SERER = "SRR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOUTHSLAVEY = "SSL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOUTHERNSAMI = "SSM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SATERLANDFRISIAN = "STQ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SUKUMA = "SUK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SUNDANESE = "SUN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SURI = "SUR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SVAN = "SVA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SWEDISH = "SVE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SWADAYAARAMAIC = "SWA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SWAHILI = "SWK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SWATI = "SWZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SUTU = "SXT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UPPERSAXON = "SXU ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SYLHETI = "SYL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SYRIAC = "SYR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SYRIACESTRANGELA = "Syre";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SYRIACWESTERN = "Syrj";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SYRIACEASTERN = "Syrn";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SILESIAN = "SZL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TABASARAN = "TAB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAJIKI = "TAJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAMIL = "TAM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TATAR = "TAT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.THCREE = "TCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.DEHONDAI = "TDD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TELUGU = "TEL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TETUM = "TET ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAGALOG = "TGL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TONGAN = "TGN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TIGRE = "TGR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TIGRINYA = "TGY ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.THAI = "THA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAHITIAN = "THT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TIBETAN = "TIB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TIV = "TIV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TURKMEN = "TKM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAMASHEK = "TMH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TEMNE = "TMN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TSWANA = "TNA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TUNDRANENETS = "TNE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TONGA = "TNG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TODO = "TOD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TOKPISIN = "TPI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TURKISH = "TRK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TSONGA = "TSG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TSHANGLA = "TSJ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TUROYOARAMAIC = "TUA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TULU = "TUM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TUMBUKA = "TUL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TUVIN = "TUV ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TUVALU = "TVL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TWI = "TWI ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAY = "TYZ ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TAMAZIGHT = "TZM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.TZOTZIL = "TZO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UDMURT = "UDM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UKRAINIAN = "UKR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UMBUNDU = "UMB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.URDU = "URD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UPPERSORBIAN = "USB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UYGHUR = "UYG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.UZBEK = "UZB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.VENETIAN = "VEC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.VENDA = "VEN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.VIETNAMESE = "VIT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.VOLAPUEK = "VOL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.VOERO = "VRO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WAGDI = "WAG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WARAYWARAY = "WAR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WESTCREE = "WCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WELSH = "WEL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WALLOON = "WLN ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.WOLOF = "WLF ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MEWATI = "WTM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.LUE = "XBD ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KHENGKHA = "XKF ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.XHOSA = "XHS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.MINJANGBAL = "XJB ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SOGA = "XOG ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.KPELLELIBERIA = "XPE ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.SAKHA = "YAK ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YAO = "YAO ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YAPESE = "YAP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YORUBA = "YBA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YCREE = "YCR ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YICLASSIC = "YIC ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.YIMODERN = "YIM ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZEALANDIC = "ZEA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.STANDARDMOROCCANTAMAZIGHT = "ZGH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZHUANG = "ZHA ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHINESEHONGKONGSAR = "ZHH ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHINESEPHONETIC = "ZHP ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHINESESIMPLIFIED = "ZHS ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.CHINESETRADITIONAL = "ZHT ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZANDE = "ZND ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZULU = "ZUL ";
fonthx_model_font_features__$LanguageTag_LanguageTag_$Impl_$.ZAZAKI = "ZZA ";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LATIN = "latn";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ADLAM = "adlm";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.AHOM = "ahom";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ANATOLIANHIEROGLYPHS = "hluw";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ARABIC = "arab";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ARMENIAN = "armn";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.AVESTAN = "avst";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BALINESE = "bali";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BAMUM = "bamu";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BASSAVAH = "bass";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BATAK = "batk";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BENGALI = "beng";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BENGALI2 = "bng2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BHAIKSUKI = "bhks";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BOPOMOFO = "bopo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BRAHMI = "brah";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BRAILLE = "brai";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BUGINESE = "bugi";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BUHID = "buhd";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.BYZANTINEMUSIC = "byzm";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CANADIANSYLLABICS = "cans";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CARIAN = "cari";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CAUCASIANALBANIAN = "aghb";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CHAKMA = "cakm";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CHAM = "cham";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CHEROKEE = "cher";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CJKIDEOGRAPHIC = "hani";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.COPTIC = "copt";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CYPRIOTSYLLABARY = "cprt";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.CYRILLIC = "cyrl";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.DEFAULT = "DFLT";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.DESERET = "dsrt";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.DEVANAGARI = "deva";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.DEVANAGARI2 = "dev2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.DOGRA = "dogr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.DUPLOYAN = "dupl";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.EGYPTIANHIEROGLYPHS = "egyp";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ELBASAN = "elba";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ETHIOPIC = "ethi";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GEORGIAN = "geor";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GLAGOLITIC = "glag";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GOTHIC = "goth";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GRANTHA = "gran";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GREEK = "grek";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GUJARATI = "gujr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GUJARATI2 = "gjr2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GUNJALAGONDI = "gong";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GURMUKHI = "guru";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.GURMUKHI2 = "gur2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HANGUL = "hang";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HANGULJAMO = "jamo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HANIFIROHINGYA = "rohg";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HANUNOO = "hano";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HATRAN = "hatr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HEBREW = "hebr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.HIRAGANA = "kana";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.IMPERIALARAMAIC = "armi";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.INSCRIPTIONALPAHLAVI = "phli";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.INSCRIPTIONALPARTHIAN = "prti";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.JAVANESE = "java";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KAITHI = "kthi";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KANNADA = "knda";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KANNADA2 = "knd2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KATAKANA = "kana";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KAYAHLI = "kali";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KHAROSTHI = "khar";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KHMER = "khmr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KHOJKI = "khoj";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.KHUDAWADI = "sind";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LAO = "lao ";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LEPCHA = "lepc";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LIMBU = "limb";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LINEARA = "lina";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LINEARB = "linb";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LISUFRASER = "lisu";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LYCIAN = "lyci";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.LYDIAN = "lydi";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MAHAJANI = "mahj";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MAKASAR = "maka";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MALAYALAM = "mlym";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MALAYALAM2 = "mlm2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MANDAICMANDAEAN = "mand";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MANICHAEAN = "mani";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MARCHEN = "marc";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MASARAMGONDI = "gonm";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MATHEMATICALALPHANUMERICSYMBOLS = "math";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MEDEFAIDRINX = "medf";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MEITEIMAYEK = "mtei";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MENDEKIKAKUI = "mend";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MEROITICCURSIVE = "merc";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MEROITICHIEROGLYPHS = "mero";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MIAO = "plrd";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MODI = "modi";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MONGOLIAN = "mong";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MRO = "mroo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MULTANI = "mult";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MUSICALSYMBOLS = "musc";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MYANMAR = "mymr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.MYANMAR2 = "mym2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.NABATAEAN = "nbat";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.NEWA = "newa";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.NEWTAILUE = "talu";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.NKO = "nko ";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.NUESHU = "nshu";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ODIA = "orya";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ODIA2 = "ory2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OGHAM = "ogam";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLCHIKI = "olck";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDITALIC = "ital";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDHUNGARIAN = "hung";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDNORTHARABIAN = "narb";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDPERMIC = "perm";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDPERSIANCUNEIFORM = "xpeo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDSOGDIAN = "sogo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDSOUTHARABIAN = "sarb";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OLDTURKICORKHONRUNIC = "orkh";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OSAGE = "osge";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.OSMANYA = "osma";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.PAHAWHHMONG = "hmng";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.PALMYRENE = "palm";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.PAUCINHAU = "pauc";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.PHAGSPA = "phag";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.PHOENICIAN = "phnx";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.PSALTEPAHLAVI = "phlp";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.REJANG = "rjng";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.RUNIC = "runr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SAMARITAN = "samr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SAURASHTRA = "saur";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SHARADA = "shrd";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SHAVIAN = "shaw";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SIDDHAM = "sidd";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SIGNWRITING = "sgnw";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SINHALA = "sinh";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SOGDIAN = "sogd";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SORASOMPENG = "sora";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SOYOMBO = "soyo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SUMEROAKKADIANCUNEIFORM = "xsux";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SUNDANESE = "sund";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SYLOTINAGRI = "sylo";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.SYRIAC = "syrc";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAGALOG = "tglg";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAGBANWA = "tagb";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAILE = "tale";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAITHAM = "lana";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAIVIET = "tavt";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAKRI = "takr";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAMIL = "taml";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TAMIL2 = "tml2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TANGUT = "tang";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TELUGU = "telu";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TELUGU2 = "tel2";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.THAANA = "thaa";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.THAI = "thai";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TIBETAN = "tibt";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TIFINAGH = "tfng";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.TIRHUTA = "tirh";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.UGARITICCUNEIFORM = "ugar";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.VAI = "vai ";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.WARANGCITI = "wara";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.YI = "yi ";
fonthx_model_font_features__$ScriptTag_ScriptTag_$Impl_$.ZANABAZARSQUARE = "zanb";
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.UNDEFINED = 0;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_SINGLE_ADJUSTMENT = 1;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_PAIR_ADJUSTMENT = 2;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_CURSIVE_ATTACHMENT = 3;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_MARKTOBASE_ATTACHMENT = 4;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_MARKTOLIGATURE_ATTACHMENT = 5;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_MARKTOMARK_ATTACHMENT = 6;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_CONTEXT_POSITIONING = 7;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_CHAINED_CONTEXT_POSITIONING = 8;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GPOS_EXTENSION_POSITIONING = 9;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_SINGLE = 1;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_MULTIPLE = 2;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_ALTERNATE = 3;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_LIGATURE = 4;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_CONTEXT = 5;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_CHAINING_CONTEXT = 6;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_EXTENSION_SUBSTITUTION = 7;
fonthx_model_font_features_lookups__$LookupType_LookupType_$Impl_$.GSUB_REVERSE_CHAINING_CONTEXT_SINGLE = 8;
fonthx_model_geom_CubicBezier.recursionTolerance = 1;
fonthx_model_geom_CubicBezier.maxDistance = 1;
fonthx_model_geom_Point.ON = 0;
fonthx_model_geom_Point.OFF = 1;
fonthx_opentype_tables_Table.SFNT = "sfnt";
fonthx_opentype_tables_Table.TDIR = "tdir";
fonthx_opentype_tables_Table.CMAP = "cmap";
fonthx_opentype_tables_Table.HEAD = "head";
fonthx_opentype_tables_Table.HHEA = "hhea";
fonthx_opentype_tables_Table.HMTX = "hmtx";
fonthx_opentype_tables_Table.MAXP = "maxp";
fonthx_opentype_tables_Table.NAME = "name";
fonthx_opentype_tables_Table.OS2 = "OS/2";
fonthx_opentype_tables_Table.POST = "post";
fonthx_opentype_tables_Table.GLYF = "glyf";
fonthx_opentype_tables_Table.LOCA = "loca";
fonthx_opentype_tables_Table.CFF = "CFF ";
fonthx_opentype_tables_Table.SVG = "SVG ";
fonthx_opentype_tables_Table.KERN = "kern";
fonthx_opentype_tables_Table.GPOS = "GPOS";
fonthx_opentype_tables_Table.GSUB = "GSUB";
fonthx_opentype_tables_Table.DSIG = "DSIG";
fonthx_opentype_tables_Table.compileOrder = [fonthx_opentype_tables_Table.HEAD,fonthx_opentype_tables_Table.HHEA,fonthx_opentype_tables_Table.MAXP,fonthx_opentype_tables_Table.OS2,fonthx_opentype_tables_Table.HMTX,fonthx_opentype_tables_Table.CMAP,fonthx_opentype_tables_Table.GLYF,fonthx_opentype_tables_Table.LOCA,fonthx_opentype_tables_Table.CFF,fonthx_opentype_tables_Table.KERN,fonthx_opentype_tables_Table.NAME,fonthx_opentype_tables_Table.POST,fonthx_opentype_tables_Table.GPOS,fonthx_opentype_tables_Table.GSUB,fonthx_opentype_tables_Table.SVG,fonthx_opentype_tables_Table.DSIG];
fonthx_opentype_tables_Table.optimalOrder = [fonthx_opentype_tables_Table.HEAD,fonthx_opentype_tables_Table.HHEA,fonthx_opentype_tables_Table.MAXP,fonthx_opentype_tables_Table.OS2,fonthx_opentype_tables_Table.HMTX,fonthx_opentype_tables_Table.CMAP,fonthx_opentype_tables_Table.LOCA,fonthx_opentype_tables_Table.GLYF,fonthx_opentype_tables_Table.CFF,fonthx_opentype_tables_Table.KERN,fonthx_opentype_tables_Table.NAME,fonthx_opentype_tables_Table.POST,fonthx_opentype_tables_Table.GPOS,fonthx_opentype_tables_Table.GSUB,fonthx_opentype_tables_Table.SVG,fonthx_opentype_tables_Table.DSIG];
fonthx_opentype_cff_CFF.HEADER = "header";
fonthx_opentype_cff_CFF.NAME_INDEX = "name_index";
fonthx_opentype_cff_CFF.TOP_DICT_INDEX = "top_dict_index";
fonthx_opentype_cff_CFF.STRING_INDEX = "string_index";
fonthx_opentype_cff_CFF.GLOBAL_SUBR_INDEX = "global_subr_index";
fonthx_opentype_cff_CFF.CHARSETS = "charsets";
fonthx_opentype_cff_CFF.CHARSTRINGS_INDEX = "charstrings_index";
fonthx_opentype_cff_CFF.PRIVATE_DICT = "private_dict";
fonthx_opentype_cff_Strings.standards = [".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"];
fonthx_opentype_constants_MacStyle.REGULAR = 0;
fonthx_opentype_constants_MacStyle.BOLD = 1;
fonthx_opentype_constants_MacStyle.ITALIC = 2;
fonthx_opentype_constants_MacStyle.OUTLINE = 4;
fonthx_opentype_constants_MacStyle.SHADOW = 8;
fonthx_opentype_constants_MacStyle.CONDENSED = 16;
fonthx_opentype_constants_MacStyle.EXTENDED = 32;
fonthx_opentype_constants_MacintoshEncoding.ROMAN = 0;
fonthx_opentype_constants_MacintoshEncoding.JAPANESE = 1;
fonthx_opentype_constants_MacintoshEncoding.CHINESE = 2;
fonthx_opentype_constants_MacintoshEncoding.KOREAN = 3;
fonthx_opentype_constants_MacintoshEncoding.ARABIC = 4;
fonthx_opentype_constants_MacintoshEncoding.HEBREW = 5;
fonthx_opentype_constants_MacintoshEncoding.GREEK = 6;
fonthx_opentype_constants_MacintoshEncoding.RUSSIAN = 7;
fonthx_opentype_constants_MacintoshEncoding.RSYMBOL = 8;
fonthx_opentype_constants_MacintoshEncoding.DEVANAGARI = 9;
fonthx_opentype_constants_MacintoshEncoding.GURMUKHI = 10;
fonthx_opentype_constants_MacintoshEncoding.GUJARATI = 11;
fonthx_opentype_constants_MacintoshEncoding.ORIYA = 12;
fonthx_opentype_constants_MacintoshEncoding.BENGALI = 13;
fonthx_opentype_constants_MacintoshEncoding.TAMIL = 14;
fonthx_opentype_constants_MacintoshEncoding.TELUGU = 15;
fonthx_opentype_constants_MacintoshEncoding.KANNADA = 16;
fonthx_opentype_constants_MacintoshEncoding.MALAYALAM = 17;
fonthx_opentype_constants_MacintoshEncoding.SINHALESE = 18;
fonthx_opentype_constants_MacintoshEncoding.BURMESE = 19;
fonthx_opentype_constants_MacintoshEncoding.KHMER = 20;
fonthx_opentype_constants_MacintoshEncoding.THAI = 21;
fonthx_opentype_constants_MacintoshEncoding.LAOTIAN = 22;
fonthx_opentype_constants_MacintoshEncoding.GEORGIAN = 23;
fonthx_opentype_constants_MacintoshEncoding.ARMENIAN = 24;
fonthx_opentype_constants_MacintoshEncoding.CHINESE_SIMPLE = 25;
fonthx_opentype_constants_MacintoshEncoding.TIBETAN = 26;
fonthx_opentype_constants_MacintoshEncoding.MONGOLIAN = 27;
fonthx_opentype_constants_MacintoshEncoding.GEEZ = 28;
fonthx_opentype_constants_MacintoshEncoding.SLAVIC = 29;
fonthx_opentype_constants_MacintoshEncoding.VIETNAMESE = 30;
fonthx_opentype_constants_MacintoshEncoding.SINDHI = 31;
fonthx_opentype_constants_MacintoshEncoding.UNINTERPRETED = 32;
fonthx_opentype_constants_MacintoshLanguages.ENGLISH = 0;
fonthx_opentype_constants_MicrosoftEncoding.SYMBOL = 0;
fonthx_opentype_constants_MicrosoftEncoding.UNICODE_BMP_ONLY = 1;
fonthx_opentype_constants_MicrosoftEncoding.SHIFTJIS = 2;
fonthx_opentype_constants_MicrosoftEncoding.PRC = 3;
fonthx_opentype_constants_MicrosoftEncoding.BIG5 = 4;
fonthx_opentype_constants_MicrosoftEncoding.WANSUNG = 5;
fonthx_opentype_constants_MicrosoftEncoding.JOHAB = 6;
fonthx_opentype_constants_MicrosoftEncoding.UNICODE = 10;
fonthx_opentype_constants_MicrosoftLanguages.ENU = 1033;
fonthx_opentype_constants_OS2Embeddable.INSTALLABLE = 0;
fonthx_opentype_constants_OS2Embeddable.RESTRICTED_LICENSE = 2;
fonthx_opentype_constants_OS2Embeddable.PREVIEW_AND_PRINT = 4;
fonthx_opentype_constants_OS2Embeddable.EDITABLE = 8;
fonthx_opentype_constants_OS2Embeddable.NO_SUBSET = 256;
fonthx_opentype_constants_OS2Embeddable.BITMAP_ONLY = 512;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.ITALIC = 1;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.UNDERSCORE = 2;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.NEGATIVE = 4;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.OUTLINED = 8;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.STRIKEOUT = 16;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.BOLD = 32;
fonthx_opentype_constants__$OS2FontSelectionFlags_OS2FontSelectionFlags_$Impl_$.REGULAR = 64;
fonthx_opentype_constants_OS2Weight.THIN = 100;
fonthx_opentype_constants_OS2Weight.EXTRALIGHT = 200;
fonthx_opentype_constants_OS2Weight.LIGHT = 300;
fonthx_opentype_constants_OS2Weight.NORMAL = 400;
fonthx_opentype_constants_OS2Weight.MEDIUM = 500;
fonthx_opentype_constants_OS2Weight.SEMIBOLD = 600;
fonthx_opentype_constants_OS2Weight.BOLD = 700;
fonthx_opentype_constants_OS2Weight.EXTRABOLD = 800;
fonthx_opentype_constants_OS2Weight.BLACK = 900;
fonthx_opentype_constants_OS2Width.ULTRA_CONDENSED = 1;
fonthx_opentype_constants_OS2Width.EXTRA_CONDENSED = 2;
fonthx_opentype_constants_OS2Width.CONDENSED = 3;
fonthx_opentype_constants_OS2Width.SEMI_CONDENSED = 4;
fonthx_opentype_constants_OS2Width.NORMAL = 5;
fonthx_opentype_constants_OS2Width.SEMI_EXPANDED = 6;
fonthx_opentype_constants_OS2Width.EXPANDED = 7;
fonthx_opentype_constants_OS2Width.EXTRA_EXPANDED = 8;
fonthx_opentype_constants_OS2Width.ULTRA_EXPANDED = 9;
fonthx_opentype_constants_Platform.UNICODE = 0;
fonthx_opentype_constants_Platform.MACINTOSH = 1;
fonthx_opentype_constants_Platform.ISO = 2;
fonthx_opentype_constants_Platform.MICROSOFT = 3;
fonthx_opentype_constants_Platform.CUSTOM = 4;
fonthx_opentype_constants_UnicodeEncoding.UNICODE_1_0 = 0;
fonthx_opentype_constants_UnicodeEncoding.UNICODE_1_1 = 1;
fonthx_opentype_constants_UnicodeEncoding.ISO_10646 = 2;
fonthx_opentype_constants_UnicodeEncoding.UNICODE2_BMP = 3;
fonthx_opentype_constants_UnicodeEncoding.UNICODE2_FULL = 4;
fonthx_opentype_glyph_ContourPoint.OFF_CURVE = 0;
fonthx_opentype_glyph_ContourPoint.ON_CURVE = 1;
fonthx_opentype_glyph_ContourPoint.X_SHORT = 2;
fonthx_opentype_glyph_ContourPoint.Y_SHORT = 4;
fonthx_opentype_glyph_ContourPoint.REPEAT = 8;
fonthx_opentype_glyph_ContourPoint.X_SAME_OR_SIGN = 16;
fonthx_opentype_glyph_ContourPoint.Y_SAME_OR_SIGN = 32;
fonthx_opentype_os2_OS2Codepages.codepages = [];
fonthx_opentype_os2_OS2Ranges.ranges = [new fonthx_opentype_os2_OS2Range(0,"Basic Latin",0,127,1),new fonthx_opentype_os2_OS2Range(1,"Latin-1 Supplement",128,255,1),new fonthx_opentype_os2_OS2Range(2,"Latin Extended-A",256,383,1),new fonthx_opentype_os2_OS2Range(3,"Latin Extended-B",384,591,1),new fonthx_opentype_os2_OS2Range(4,"IPA Extensions",592,687,1),new fonthx_opentype_os2_OS2Range(4,"Phonetic Extensions",7424,7551,4),new fonthx_opentype_os2_OS2Range(4,"Phonetic Extensions Supplement",7552,7615,4),new fonthx_opentype_os2_OS2Range(5,"Spacing Modifier Letters",688,767,1),new fonthx_opentype_os2_OS2Range(5,"Modifier Tone Letters",42752,42783,4),new fonthx_opentype_os2_OS2Range(6,"Combining Diacritical Marks",768,879,1),new fonthx_opentype_os2_OS2Range(6,"Combining Diacritical Marks Supplement",7616,7679,4),new fonthx_opentype_os2_OS2Range(7,"Greek and Coptic",880,1023,1),new fonthx_opentype_os2_OS2Range(8,"Coptic",11392,11519,4),new fonthx_opentype_os2_OS2Range(9,"Cyrillic",1024,1279,1),new fonthx_opentype_os2_OS2Range(9,"Cyrillic Supplement",1280,1327,3),new fonthx_opentype_os2_OS2Range(9,"Cyrillic Extended-A",11744,11775,4),new fonthx_opentype_os2_OS2Range(9,"Cyrillic Extended-B",42560,42655,4),new fonthx_opentype_os2_OS2Range(10,"Armenian",1328,1423,1),new fonthx_opentype_os2_OS2Range(11,"Hebrew",1424,1535,1),new fonthx_opentype_os2_OS2Range(12,"Vai",42240,42559,4),new fonthx_opentype_os2_OS2Range(13,"Arabic",1536,1791,1),new fonthx_opentype_os2_OS2Range(13,"Arabic Supplement",1872,1919,4),new fonthx_opentype_os2_OS2Range(14,"NKo",1984,2047,4),new fonthx_opentype_os2_OS2Range(15,"Devanagari",2304,2431,1),new fonthx_opentype_os2_OS2Range(16,"Bengali",2432,2559,1),new fonthx_opentype_os2_OS2Range(17,"Gurmukhi",2560,2687,1),new fonthx_opentype_os2_OS2Range(18,"Gujarati",2688,2815,1),new fonthx_opentype_os2_OS2Range(19,"Oriya",2816,2943,1),new fonthx_opentype_os2_OS2Range(20,"Tamil",2944,3071,1),new fonthx_opentype_os2_OS2Range(21,"Telugu",3072,3199,1),new fonthx_opentype_os2_OS2Range(22,"Kannada",3200,3327,1),new fonthx_opentype_os2_OS2Range(23,"Malayalam",3328,3455,1),new fonthx_opentype_os2_OS2Range(24,"Thai",3584,3711,1),new fonthx_opentype_os2_OS2Range(25,"Lao",3712,3839,1),new fonthx_opentype_os2_OS2Range(26,"Georgian",4256,4351,1),new fonthx_opentype_os2_OS2Range(26,"Georgian Supplement",11520,11567,4),new fonthx_opentype_os2_OS2Range(27,"Balinese",6912,7039,4),new fonthx_opentype_os2_OS2Range(28,"Hangul Jamo",4352,4607,1),new fonthx_opentype_os2_OS2Range(29,"Latin Extended Additional",7680,7935,1),new fonthx_opentype_os2_OS2Range(29,"Latin Extended-C",11360,11391,4),new fonthx_opentype_os2_OS2Range(29,"Latin Extended-D",42784,43007,4),new fonthx_opentype_os2_OS2Range(30,"Greek Extended",7936,8191,1),new fonthx_opentype_os2_OS2Range(31,"General Punctuation",8192,8303,1),new fonthx_opentype_os2_OS2Range(31,"Supplemental Punctuation",11776,11903,4),new fonthx_opentype_os2_OS2Range(32,"Superscripts And Subscripts",8304,8351,1),new fonthx_opentype_os2_OS2Range(33,"Currency Symbols",8352,8399,1),new fonthx_opentype_os2_OS2Range(34,"Combining Diacritical Marks For Symbols",8400,8447,1),new fonthx_opentype_os2_OS2Range(35,"Letterlike Symbols",8448,8527,1),new fonthx_opentype_os2_OS2Range(36,"Number Forms",8528,8591,1),new fonthx_opentype_os2_OS2Range(37,"Arrows",8592,8703,1),new fonthx_opentype_os2_OS2Range(37,"Supplemental Arrows-A",10224,10239,3),new fonthx_opentype_os2_OS2Range(37,"Supplemental Arrows-B",10496,10623,3),new fonthx_opentype_os2_OS2Range(37,"Miscellaneous Symbols and Arrows",11008,11263,4),new fonthx_opentype_os2_OS2Range(38,"Mathematical Operators",8704,8959,1),new fonthx_opentype_os2_OS2Range(38,"Supplemental Mathematical Operators",10752,11007,3),new fonthx_opentype_os2_OS2Range(38,"Miscellaneous Mathematical Symbols-A",10176,10223,3),new fonthx_opentype_os2_OS2Range(38,"Miscellaneous Mathematical Symbols-B",10624,10751,3),new fonthx_opentype_os2_OS2Range(39,"Miscellaneous Technical",8960,9215,1),new fonthx_opentype_os2_OS2Range(40,"Control Pictures",9216,9279,1),new fonthx_opentype_os2_OS2Range(41,"Optical Character Recognition",9280,9311,1),new fonthx_opentype_os2_OS2Range(42,"Enclosed Alphanumerics",9312,9471,1),new fonthx_opentype_os2_OS2Range(43,"Box Drawing",9472,9599,1),new fonthx_opentype_os2_OS2Range(44,"Block Elements",9600,9631,1),new fonthx_opentype_os2_OS2Range(45,"Geometric Shapes",9632,9727,1),new fonthx_opentype_os2_OS2Range(46,"Miscellaneous Symbols",9728,9983,1),new fonthx_opentype_os2_OS2Range(47,"Dingbats",9984,10175,1),new fonthx_opentype_os2_OS2Range(48,"CJK Symbols And Punctuation",12288,12351,1),new fonthx_opentype_os2_OS2Range(49,"Hiragana",12352,12447,1),new fonthx_opentype_os2_OS2Range(50,"Katakana",12448,12543,1),new fonthx_opentype_os2_OS2Range(50,"Katakana Phonetic Extensions",12784,12799,3),new fonthx_opentype_os2_OS2Range(51,"Bopomofo",12544,12591,1),new fonthx_opentype_os2_OS2Range(51,"Bopomofo Extended",12704,12735,2),new fonthx_opentype_os2_OS2Range(52,"Hangul Compatibility Jamo",12592,12687,1),new fonthx_opentype_os2_OS2Range(53,"Phags-pa",43072,43135,4),new fonthx_opentype_os2_OS2Range(54,"Enclosed CJK Letters And Months",12800,13055,1),new fonthx_opentype_os2_OS2Range(55,"CJK Compatibility",13056,13311,1),new fonthx_opentype_os2_OS2Range(56,"Hangul Syllables",44032,55215,1),new fonthx_opentype_os2_OS2Range(57,"Non-Plane 0",65536,1114111,2),new fonthx_opentype_os2_OS2Range(58,"Phoenician",67840,67871,4),new fonthx_opentype_os2_OS2Range(59,"CJK Unified Ideographs",19968,40959,1),new fonthx_opentype_os2_OS2Range(59,"CJK Radicals Supplement",11904,12031,2),new fonthx_opentype_os2_OS2Range(59,"Kangxi Radicals",12032,12255,2),new fonthx_opentype_os2_OS2Range(59,"Ideographic Description Characters",12272,12287,2),new fonthx_opentype_os2_OS2Range(59,"CJK Unified Ideographs Extension A",13312,19903,2),new fonthx_opentype_os2_OS2Range(59,"CJK Unified Ideographs Extension B",131072,173791,3),new fonthx_opentype_os2_OS2Range(59,"Kanbun",12688,12703,3),new fonthx_opentype_os2_OS2Range(60,"Private Use Area (plane 0)",57344,63743,1),new fonthx_opentype_os2_OS2Range(61,"CJK Strokes",12736,12783,4),new fonthx_opentype_os2_OS2Range(61,"CJK Compatibility Ideographs",63744,64255,1),new fonthx_opentype_os2_OS2Range(61,"CJK Compatibility Ideographs Supplement",194560,195103,3),new fonthx_opentype_os2_OS2Range(62,"Alphabetic Presentation Forms",64256,64335,1),new fonthx_opentype_os2_OS2Range(63,"Arabic Presentation Forms-A",64336,65023,1),new fonthx_opentype_os2_OS2Range(64,"Combining Half Marks",65056,65071,1),new fonthx_opentype_os2_OS2Range(65,"Vertical Forms",65040,65055,4),new fonthx_opentype_os2_OS2Range(65,"CJK Compatibility Forms",65072,65103,1),new fonthx_opentype_os2_OS2Range(66,"Small Form Variants",65104,65135,1),new fonthx_opentype_os2_OS2Range(67,"Arabic Presentation Forms-B",65136,65279,1),new fonthx_opentype_os2_OS2Range(68,"Halfwidth And Fullwidth Forms",65280,65519,1),new fonthx_opentype_os2_OS2Range(69,"Specials",65520,65535,1),new fonthx_opentype_os2_OS2Range(70,"Tibetan",3840,4095,2),new fonthx_opentype_os2_OS2Range(71,"Syriac",1792,1871,2),new fonthx_opentype_os2_OS2Range(72,"Thaana",1920,1983,2),new fonthx_opentype_os2_OS2Range(73,"Sinhala",3456,3583,2),new fonthx_opentype_os2_OS2Range(74,"Myanmar",4096,4255,2),new fonthx_opentype_os2_OS2Range(75,"Ethiopic",4608,4991,2),new fonthx_opentype_os2_OS2Range(75,"Ethiopic Supplement",4992,5023,4),new fonthx_opentype_os2_OS2Range(75,"Ethiopic Extended",11648,11743,4),new fonthx_opentype_os2_OS2Range(76,"Cherokee",5024,5119,2),new fonthx_opentype_os2_OS2Range(77,"Unified Canadian Aboriginal Syllabics",5120,5759,2),new fonthx_opentype_os2_OS2Range(78,"Ogham",5760,5791,2),new fonthx_opentype_os2_OS2Range(79,"Runic",5792,5887,2),new fonthx_opentype_os2_OS2Range(80,"Khmer",6016,6143,2),new fonthx_opentype_os2_OS2Range(80,"Khmer Symbols",6624,6655,4),new fonthx_opentype_os2_OS2Range(81,"Mongolian",6144,6319,2),new fonthx_opentype_os2_OS2Range(82,"Braille Patterns",10240,10495,2),new fonthx_opentype_os2_OS2Range(83,"Yi Syllables",40960,42127,2),new fonthx_opentype_os2_OS2Range(83,"Yi Radicals",42128,42191,2),new fonthx_opentype_os2_OS2Range(84,"Tagalog",5888,5919,3),new fonthx_opentype_os2_OS2Range(84,"Hanunoo",5920,5951,3),new fonthx_opentype_os2_OS2Range(84,"Buhid",5952,5983,3),new fonthx_opentype_os2_OS2Range(84,"Tagbanwa",5984,6015,3),new fonthx_opentype_os2_OS2Range(85,"Old Italic",66304,66351,3),new fonthx_opentype_os2_OS2Range(86,"Gothic",66352,66383,3),new fonthx_opentype_os2_OS2Range(87,"Deseret",66560,66639,3),new fonthx_opentype_os2_OS2Range(88,"Byzantine Musical Symbols",118784,119039,3),new fonthx_opentype_os2_OS2Range(88,"Musical Symbols",119040,119295,3),new fonthx_opentype_os2_OS2Range(88,"Ancient Greek Musical Notation",119296,119375,4),new fonthx_opentype_os2_OS2Range(89,"Mathematical Alphanumeric Symbols",119808,120831,3),new fonthx_opentype_os2_OS2Range(90,"Private Use (plane 15)",983040,1048573,3),new fonthx_opentype_os2_OS2Range(90,"Private Use (plane 16)",1048576,1114109,3),new fonthx_opentype_os2_OS2Range(91,"Variation Selectors",65024,65039,3),new fonthx_opentype_os2_OS2Range(91,"Variation Selectors Supplement",917760,917999,3),new fonthx_opentype_os2_OS2Range(92,"Tags",917504,917631,3),new fonthx_opentype_os2_OS2Range(93,"Limbu",6400,6479,4),new fonthx_opentype_os2_OS2Range(94,"Tai Le",6480,6527,4),new fonthx_opentype_os2_OS2Range(95,"New Tai Lue",6528,6623,4),new fonthx_opentype_os2_OS2Range(96,"Buginese",6656,6687,4),new fonthx_opentype_os2_OS2Range(97,"Glagolitic",11264,11359,4),new fonthx_opentype_os2_OS2Range(98,"Tifinagh",11568,11647,4),new fonthx_opentype_os2_OS2Range(99,"Yijing Hexagram Symbols",19904,19967,4),new fonthx_opentype_os2_OS2Range(100,"Syloti Nagri",43008,43055,4),new fonthx_opentype_os2_OS2Range(101,"Linear B Syllabary",65536,65663,4),new fonthx_opentype_os2_OS2Range(101,"Linear B Ideograms",65664,65791,4),new fonthx_opentype_os2_OS2Range(101,"Aegean Numbers",65792,65855,4),new fonthx_opentype_os2_OS2Range(102,"Ancient Greek Numbers",65856,65935,4),new fonthx_opentype_os2_OS2Range(103,"Ugaritic",66432,66463,4),new fonthx_opentype_os2_OS2Range(104,"Old Persian",66464,66527,4),new fonthx_opentype_os2_OS2Range(105,"Shavian",66640,66687,4),new fonthx_opentype_os2_OS2Range(106,"Osmanya",66688,66735,4),new fonthx_opentype_os2_OS2Range(107,"Cypriot Syllabary",67584,67647,4),new fonthx_opentype_os2_OS2Range(108,"Kharoshthi",68096,68191,4),new fonthx_opentype_os2_OS2Range(109,"Tai Xuan Jing Symbols",119552,119647,4),new fonthx_opentype_os2_OS2Range(110,"Cuneiform",73728,74751,4),new fonthx_opentype_os2_OS2Range(110,"Cuneiform Numbers and Punctuation",74752,74879,4),new fonthx_opentype_os2_OS2Range(111,"Counting Rod Numerals",119648,119679,4),new fonthx_opentype_os2_OS2Range(112,"Sundanese",7040,7103,4),new fonthx_opentype_os2_OS2Range(113,"Lepcha",7168,7247,4),new fonthx_opentype_os2_OS2Range(114,"Ol Chiki",7248,7295,4),new fonthx_opentype_os2_OS2Range(115,"Saurashtra",43136,43231,4),new fonthx_opentype_os2_OS2Range(116,"Kayah Li",43264,43311,4),new fonthx_opentype_os2_OS2Range(117,"Rejang",43312,43359,4),new fonthx_opentype_os2_OS2Range(118,"Cham",43520,43615,4),new fonthx_opentype_os2_OS2Range(119,"Ancient Symbols",65936,65999,4),new fonthx_opentype_os2_OS2Range(120,"Phaistos Disc",66000,66047,4),new fonthx_opentype_os2_OS2Range(121,"Carian",66208,66271,4),new fonthx_opentype_os2_OS2Range(121,"Lycian",66176,66207,4),new fonthx_opentype_os2_OS2Range(121,"Lydian",67872,67903,4),new fonthx_opentype_os2_OS2Range(122,"Domino Tiles",127024,127135,4),new fonthx_opentype_os2_OS2Range(122,"Mahjong Tiles",126976,127023,4)];
fonthx_opentype_tables_MaximumProfileTable.TRUETYPE_OUTLINES = 65536;
fonthx_opentype_tables_MaximumProfileTable.CFF_OUTLINES = 20480;
fonthx_opentype_tables_NamingRecord.COPYRIGHT = 0;
fonthx_opentype_tables_NamingRecord.FONT_FAMILY = 1;
fonthx_opentype_tables_NamingRecord.FONT_SUBFAMILY = 2;
fonthx_opentype_tables_NamingRecord.UNIQUE_NAME = 3;
fonthx_opentype_tables_NamingRecord.FULLNAME = 4;
fonthx_opentype_tables_NamingRecord.VERSION = 5;
fonthx_opentype_tables_NamingRecord.PS_NAME = 6;
fonthx_opentype_tables_NamingRecord.TRADEMARK_NOTICE = 7;
fonthx_opentype_tables_NamingRecord.MANUFACTURER = 8;
fonthx_opentype_tables_NamingRecord.DESIGNER = 9;
fonthx_opentype_tables_NamingRecord.DESCRIPTION = 10;
fonthx_opentype_tables_NamingRecord.VENDOR_URL = 11;
fonthx_opentype_tables_NamingRecord.DESIGNER_URL = 12;
fonthx_opentype_tables_NamingRecord.LICENSE = 13;
fonthx_opentype_tables_NamingRecord.LICENSE_URL = 14;
fonthx_opentype_tables_NamingRecord.PREFERRED_FAMILY = 16;
fonthx_opentype_tables_NamingRecord.PREFERRED_SUBFAMILY = 17;
fonthx_opentype_tables_NamingRecord.COMPATIBLE_FULL = 18;
fonthx_opentype_tables_NamingRecord.SAMPLE_TEXT = 19;
fonthx_opentype_tables_NamingTable.E_MAC_ROMAN = 0;
fonthx_opentype_tables_NamingTable.L_MS_ENGLISH = 1033;
fonthx_opentype_tables_NamingTable.L_MAC_ENGLISH = 0;
fonthx_opentype_tables_PostTable.VERSION_1_0 = 65536;
fonthx_opentype_tables_PostTable.VERSION_2_0 = 131072;
fonthx_opentype_tables_PostTable.VERSION_2_5 = 151552;
fonthx_opentype_tables_PostTable.VERSION_3_0 = 196608;
fonthx_utils_ExecutionTimer._spans = new haxe_ds_StringMap();
fonthx_utils_MathUtils.MAX_INT = 2147483647;
fonthx_utils_MathUtils.MIN_INT = -2147483648;
fonthx_utils_StringEncoder.encodings = new haxe_ds_StringMap();
haxe__$Int32_Int32_$Impl_$._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
fonthx_examples_pixelfonter_PixelFonterBrowserApp.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=PixelFonterBrowserApp.js.map